!% -e

Abbreviate ". ";
Abbreviate ", ";
Abbreviate " the ";
Abbreviate "The";
Abbreviate "You";
Abbreviate "ing";
Abbreviate "you";
Abbreviate "and";
Abbreviate "that";
Abbreviate "some";
Abbreviate "all";
Abbreviate "...";
Abbreviate "ion";
Abbreviate "have";
Abbreviate "are";
Abbreviate "ther";
Abbreviate "'t ";
Abbreviate "me ";
Abbreviate "is ";
Abbreviate "d to";
Abbreviate "'s ";
Abbreviate "with ";
Abbreviate "n a";
Abbreviate "ll ";
Abbreviate "ve ";
Abbreviate "it ";
Abbreviate "they ";
Abbreviate "ter";
Abbreviate "their ";
Abbreviate "es ";
Abbreviate "ns ";
Abbreviate "not ";
Abbreviate "ly ";
Abbreviate "It ";
Abbreviate "ut ";
Abbreviate "for";
Abbreviate "which ";
Abbreviate "ver";
Abbreviate "he ";
Abbreviate "st ";
Abbreviate "d b";
Abbreviate "le ";
Abbreviate "-- ";
Abbreviate "That ";
Abbreviate " of ";
Abbreviate "res";
Abbreviate "e to";
Abbreviate "e a";
Abbreviate "e s";
Abbreviate "them";
Abbreviate "d i";
Abbreviate "than";
Abbreviate "r a";
Abbreviate "hen";
Abbreviate "t a";
Abbreviate "ers";
Abbreviate "whi";
Abbreviate "y b";
Abbreviate "e b";
Abbreviate "herb garden";
Abbreviate "e m";
Abbreviate "d m";
Abbreviate "t to";
Abbreviate "Detail)";

Constant Story "Nine-tenths of the Law";
Constant Headline "^Copyright (c) 2008 Jack Welch^";
Release 112;
!Statusline time;


!****replace library routines******

Replace KeyboardPrimitive;
Replace DrawStatusLine;
Replace ScoreSub;

Include "Parser";

!****library over-rides here ******
Object LibraryMessages
	with before [;
		Miscellany:
			!capture any activity that occurs after the AfterPrompt entry point
			if(lm_n == 6 or 7 or 10 or 11 or 13 or 14 or 
			15 or 16 or 20 or 21 or 54 or 55){
				! 6, 7 , 11	undo failed
				! 10 I beg your pardon -- when blank line entered	
				! 14 to 16	Oops responses
				! 20 to 21	Again responses
				! 54 to 55	Comment character responses
 
				if(TxtEntry.twisting){
					if(TxtEntry.backup){
						TxtEntry.backup = false;
						TxtEntry.screen_on(false);
						TxtEntry.strstr(32,TxtEntry.left_margin);
						rtrue;
					}
					TxtEntry.screen_on(false);
					rfalse;
				}
				if(~~TxtEntry.ltr){
					TxtEntry.screen_on(false);
				}
			} 
			if(lm_n == 44)
				"Be more specific, please.";  

		Quit:
			if(TxtEntry.twisting || TxtEntry.ltr == false){
				TxtEntry.screen_on(true);
			}

		Restart:
			if(TxtEntry.twisting || TxtEntry.ltr == false){
				TxtEntry.screen_on(true);
			}

		Take:
			if(lm_n == 6 or 7 && parent(noun) ofclass Being){
				if(parent(noun).current_hp < 0 || parent(noun) has infection){
					if(noun ofclass Garment && noun has worn) {
						print "You deftly, but perhaps inappropriately, slip 
						off the ",(name) parent(noun),"'s ",(name) noun;
						if(noun has worn)
							give noun ~worn;
					}
					else
						if(parent(noun).wielding == noun){
							parent(noun).wielding = 0;
							print "You disarm ",(the) parent(noun)," of ",(the) noun;
						}
						else {
							print "You confiscate ",(a) noun," from the ",
							(name) parent(noun);
							if(noun has worn)
								give noun ~worn;
						}
						move noun to actor;
						".";
				}
				else
					"",(The) parent(noun)," doesn't think that's a good idea.^";	
			}
  ];

Include "VerbLib";
Include "menus";		 
!include Graham Nelson's menu library

!***** CONSTANTS *****************************************************

!screen colours
Constant BLACK  	= 2;
Constant YELLOW 	= 5;
Constant WHITE  	= 9;
Constant BLUE		= 6;

Constant WORKHORSE_SIZE = 512;
Constant SPACE = 32;
Constant CARRIAGE_RETURN = 13;
Constant RIGHT_MARGIN = 50;

Constant STARTYEAR	= 6969; 
Constant STARTDAY	 	= 69;	
Constant STARTHOUR	= 6;
Constant STARTMINUTE	= 9;

Constant DAYS_IN_YEAR = 384;			!hex $180
Constant HOURS_IN_DAY = 32;				!hex $20
Constant MINUTES_IN_HOUR = 48;			!hex $30

Constant POTION_GROUP 	= "potions";
Constant HERB_GROUP   	= "herbs";
Constant GARMENT_GROUP	= "garments";
Constant WEAPON_GROUP	= "weapons";

!***** ARRAYS ********************************************************

Array ArticleBuffer 	-> 7;     		!used in TheHost function

Array remap 			->	7;			!used in TellChoices function

Array TextBuffer 		-> 255;		!a general purpose buffer to deal with
                                  	!any string-like manipulations

Array DispossessMessage -> 800;		!message for dispossess. TODO: trim later.

Array workhorse 	-> WORKHORSE_SIZE;	!for text captured in during output
											!while either twisty printing or
											!reverse printing is in effect
				
Array Centrist		-> 512; 	!used for text printed with centre alignment
									!Ah, you ask, why not use the print rule 
									!(centre) as per 6.30? Well, that mechanism
!uses the StorageForShortName array, which (for V5 at least) is 161 characters
!long, whereas I am much more verbose. I suppose I could print a line at a time,
!but where would the fun be in that? It is tempting to make double use of another
!array, but that would get complicated, as centre-alignment printing can intermixed
!with other text streams. It would be hard to guarantee that the array wouldn't be 
!accessed for two different purposes, leading to confusion.										

!***** COMMON ATTRIBUTES & PROPERTIES ********************************

Property colour;

Attribute infection;              !the undead have infection
Attribute drinkable;

!***** MENUS *********************************************************

Menu help_menu "Help, Hints, and Info";
!Top level (and presumably) only menu hierarchy in the program

Menu -> "What is this?";
Option -> -> "an adventure game"
  with description "This is the kind of computer game known 
  as an ~adventure game~. You 
  probably already knew that, but humour me. In fancier circles, this 
  game would be considered part of the ~interactive fiction~ genre, but 
  this particular work leans more towards entertainment than literature. 
  In this game, you are presented with a situation, and must decide 
  what to do. You can try anything; the cornerstone of the game is 
  cleverness and experimentation. Through your actions, a story will 
  unfold. Unlike a traditional story, you decide what happens. There 
  are consequences to your actions, not all of them pleasant, and some 
  of which lead to dead-ends (or other dead things, sometimes you). You 
  can always play the game again, though, and make other choices. 
  Often, there is more than one way to do things, so if you hit a wall, 
  try something else.^^
 
  When you start this particular game, you are provided with no 
  background -- you are simply thrust into the situation, and left to 
  your own devices to figure out what's going on. Don't worry if it 
  takes a while to grok the situation. I can assure you that the story 
  does have a plot.^^
 
  In practical terms, the game is played as a conversation between you 
  and the computer. The computer tells you where you are and gives a 
  bit of description, and then you tell it what you want to do. This 
  may sound familiar if you have participated in roleplaying games 
  before -- the computer acts as the ~dungeon master~,
  ~game master~, ~moderator~ or ~story teller~ 
  and presents a scenario, asks you what you want to do, and then tells 
  what happens after each of your actions  -- for details, see 
  [Instructions]. As conversationalists, computers are somewhat 
  limited, so if the computer doesn't understand you, try rephrasing 
  your response.";
Option-> ->"learn more"
  with description "There are a number of good online resources 
  regarding interactive 
  fiction -- presumably you can find these on your own. I can recommend 
  two well-written summaries, however. The Inform Design Manual by 
  Graham Nelson contains a few chapters on the history of the genre, as 
  well as some observations and recommendations for both game designers 
  and players. Twisty Passages by Nick Montfort is a literary treatment 
  of the same subject with a more academic bent.";

Menu -> "Instructions";
Option -> -> "how to play"
  with description "This game is turn-based, 
  rather than timed. Take as long as you want 
  to think about your actions. The computer gives you some information, 
  like a description of the room that you are in, and what objects it 
  contains, and then it is up to you to say what you are doing. You can 
  enter your ~move~ by typing it at the command prompt, which looks like 
  a ~greater than~ sign: >^^
 
  For example, let's say that you are in the bathroom and there is a 
  green tube of toothpaste on the shelf. If you want to know more about 
  the toothpaste tube, you could type ~examine toothpaste~ (for all 
  these examples, don't literally type in the quotation marks -- just 
  the text between them), and the computer might give you a response 
  like ~A half-used tube of FLOSS-O-DENT toothpaste.~  What a treasure 
  trove of information -- you now know its brand, and that it was 
  already used by someone. Note that you don't have to type a whole 
  sentence like ~I would like to examine the tube of toothpaste on the 
  shelf of the bathroom, please.~ While that is very polite, it would 
  confuse your poor little computer's brain. Most commands in the game 
  consist of a verb and a noun or two, with the occasional preposition 
  thrown in when it helps. In some cases, if the computer needs more 
  information, it will prompt you. For example, if the toothpaste cap 
  were also in the room, and you gave the above command, the computer 
  might ask you ~Do you mean the toothpaste tube or the toothpaste 
  cap?~. Another example of a command would be ~screw cap onto tube~. 
  Not every command that you can think of will work, so you might need 
  to try some rephrasing. If the computer didn't know the verb ~screw~ 
  (or thought it meant something else, however awkward that might be) 
  you could try a command like ~put cap on tube~, and maybe it would 
  work. This is an example. There is no toothpaste in the game.^^

  In general, you should not use punctuation. The only exception is 
  when you want to direct a question or command to someone or something 
  else. In such cases, you can type the name of the person or thing to whom 
  you are addressing your remark, followed by the question or command. 
  For example, you could type:  ~Eugene, give me the axe~.";
Option -> -> "commands"
  with description "If you have played 
  other computer adventure games, chances are that 
  you already know most of the ~utility~ commands used in this game. If 
  not, however, you should start on an equal footing with more 
  experienced players, so here they are:^^
 
  look             - Look at your surroundings^
  examine          - look at something in detail^
  go               - followed by destination/direction^
  take/drop        - pick up or drop an item";
Option -> -> "common actions"
  with description "Since you are likely 
  to do some actions frequently, there are some 
  short cuts. To move in a direction, it is enough to type the 
  abbreviation for that direction. For example, you can extend the life 
  of your fingertips by typing ~nw~ instead of ~go northwest~. You can 
  use the letter in <brackets> instead of typing out the whole word for 
  the following:^^
 
  <i>nventory       - what are you carrying?^
  <l>ook            - describe the area around you^
  e<x>amine         - examine a specific item in detail^
  <z>zzzz           - don't do anything; just wait for a bit^
  a<g>ain           - repeat your last action^
  <o>ops            - type this to correct spelling mistakes";
Option -> -> "conversation"
  with description "A couple of verbs are helpful for conversation; these
  include:^^
  SAY something                    - to say something like hello^
  TELL someone ABOUT some topic    - to say something on a specific topic^
  ASK  someone ABOUT some topic    - to ask for information about a topic^
  SHOW someone something           - to show something you have and maybe^
  SHOW something TO someone          provoke some reaction from someone^^
  With all of these commands, you do not need to, indeed you should not,
  use quotation marks.^^
  With the TELL command, you will be prompted with a numbered list of 
  possible things to say. This list may change according to events in the
  game, for instance, if you have learned about something new, you might have
  more to say on a specific topic. You can select from this list or hit zero to
  say nothing. Assuming that colour is implemented on your system, phrases
  that have already been said are darkened, but still available, should you
  wish to be repetitious.";
Option -> -> "saving and restoring"
  with description "Assuming there is free space 
  on your machine, you can save games and 
  then reload them later. You can make multiple save files. You can 
  also restart a game (wiping out the current game). In an act of 
  desperation, you can quit.^^

  SAVE              - save the game at the current point^
  RESTORE           - load and then continue the game^
  RESTART           - start over again^
  QUIT              - a last resort!";

Menu -> "Help. I'm stuck!";
Option -> -> "philosophical help"
  with description "Philosophical help, almost by definition, 
  will not help you in any 
  tangible way, so if you are really stuck in the game, and perhaps not 
  in the best frame of mind to read my musings, see [practical help]. 
  If, however, you spend large amounts of time doing largely 
  incomprehensible things which serve no real purpose, read on.^^
 
  Still here, are you?  Well, that's not entirely unexpected given that 
  the game audience is highly self-selecting.^^ 
 
  As you have likely found out through experience, typing help or hints 
  merely brings you to these menus. If you did read these instructions 
  before playing the game, don't feel bad. Someone had to.^^
 
  The game is designed to be difficult but fair. Getting this balance 
  right is not easy. I want the game to be playable and not 
  frustrating, but I also want players to feel like they've achieved 
  something non-trivial when they work through the puzzles.^^

  All of the puzzles are designed to function within the domain of the 
  game -- no special external knowledge is needed. Any information needed to 
  solve the puzzles is found in the game, although it may be hidden or 
  scattered about. There are both situation-specific and general hint 
  mechanisms in the game. In some cases, you will not see these sorts 
  of hints unless you need them. In other cases, you have some control 
  over the amount of hints given, all in the name of making the game fun 
  but challenging.";
Option -> -> "practical help"
  with description "Here are some practical pointers for this game:^^
  * Try everything you can think of. If it doesn't work, try 
  rephrasing.^
  * Reread text to make sure you didn't miss anything.^
  * Leave no stone unturned; conversely, don't obsess.^
  * This game follows many, but not all, of the conventions of computer 
  adventure games. If something makes sense to you, try it even though 
  it ~shouldn't work~.^
  * Don't try to trick the computer into self-destructing by having it 
  calculate pi to the last decimal place or confronting it with its own 
  inadequacies. It has seen every episode of every TV show known to 
  man, and will not fall for that sort of gimmick.^
  * It is possible to get trapped in an unwinnable situation, but it is 
  not possible to ever run out of possible moves. You can always die.^
  * If you are really stuck, put the game aside and let it percolate  
  through your subconscious for a while. Come back fresh.^
  * If you are really really stuck, con someone else into playing the 
  game and watch them. You might get some ideas.^
  * If you are really and truly stuck, you could do an internet search 
  and see if someone has already posted a similar question/answer. 
  Since you could be playing this years after it was released, maybe 
  I've even created a FAQ about it. If you do post a question or 
  answer, preface your message with a spoiler warning and skip down a 
  bunch of lines before writing anything too revealing.^
  * Failing all else, you can email me at: ninetenths@@64templaro.com and 
  tell me in detail how my game has defeated your best efforts. I may 
  be able to give you a hint that wouldn't spoil the rest of the game 
  for you.";
Option -> -> "spelling help"
  with description "It's worth mentioning that some words may not 
  be spelt the way you 
  would expect in this game, which follows British conventions as a 
  matter of, um, convention. The programming language used to write 
  this game was developed in England, and it just seems nicer to keep 
  everything uniform. Heck, if you can suspend reality long enough to 
  play a game with undead space aliens, you should probably be able to 
  convince yourself that the letter ~z~ is pronounced @@47zed@@47, and to 
  adjust your spelling accordingly. After the game, you can revert to 
  your barbarian ways should you be so inclined.";

Menu -> "The Making Of";
Option -> -> "how"
  with description "This game is a computer program, 
  but it is not written in C# or 
  FORTRAN. It could have been, but it would have taken me years and 
  years longer, and I would have been a withered, angry old game writer 
  by the time it was done. Rather, this program was written in the 
  Inform 6 language, which was specifically designed to write such 
  games. The language does all the heavy lifting, while I sip colourful 
  drinks and watch from my lounge chair. As a result, I am not a 
  disgruntled, vindictive game writer bent on torturing players, but a 
  loveable and endearing author, who is tolerated if not worshipped by 
  the masses.";
Option -> -> "who"
  with description "This is my first attempt at writing this kind of game. 
  By background, 
  I am neither a writer nor a programmer, so if this whole thing doesn't 
  work out, we know why.";
Option -> -> "why"
  with description "This game was written to give you a chance to show 
  how clever and creative you are.";
Option -> -> "when"
  with description "I started writing this in February 2008 for no 
  apparent reason other than 
  learning the Inform language -- see [how]. First I tried to write 
  something that would use all the bells and whistles of the language. 
  Then I read about interactive fiction and realised that I didn't have 
  a single idea that hadn't been done before. Then I wrote it again. 
  After playing some other people's games, I realised that I wasn't as 
  clever as I had thought, and that the bar was indeed higher. So I 
  wrote it again. At this point, conditioned like a Pavlovian dog, it 
  takes an act of will for me to *not* keep rewriting the game.";

Menu -> "Bugs";
Option -> -> "hardware"
  with description "This is a computer program 
  which is designed to run on the most 
  advanced hardware which is available: your brain. When you run this 
  program, a model world is created in your brain and you are immersed 
  in a story as the main character. If the program runs slowly or lacks 
  fancy graphics, you can blame it on the hardware. Anyhow, sarcasm aside, 
  the program is designed to run on a virtual machine, the z-machine. 
  You are, no doubt, using some implementation of the z-machine written 
  for your specific hardware -- it could be a computer, cell phone, 3D 
  virtual hologram goggles, cortical implant -- whatever. Some 
  implementations are more faithful to the z-machine standard than 
  others, though, and if they go too far off the standard, the program 
  might not run as intended. I've made every effort to test the 
  program on a number of platforms, but these tests are far from 
  comprehensive. I did not, for instance, visit the future to make sure 
  that the program is (or will be) compatible with hardware not yet 
  invented. Call me lazy. The program does try to be clever and 
  probe the compliance and capabilities of your set-up, and will do its 
  best to not fail in some spectacular way. Despite all of this, if the 
  program doesn't run right, you could try another z-machine interpreter 
  and see if that fixes the situation. If you think the problem is not 
  the z-machine but the game itself, please let me know [reporting].";
Option -> -> "software: general"
  with description "It is not inconceivable (i.e., it is a near certainty) 
  that there are errors in 
  the program. This program has been extensively tested by a 
  dedicated group of beta-testers (see Acknowledgements), but there is 
  always a good chance that, through your dogged cleverness, you have managed 
  to do something absolutely unthinkable. Unimaginable, even. Who 
  would have thought that you would, for instance, have decided to ~kiss 
  the Jade Frog~. Well, in fact, I've got that one covered. But you 
  might decide to do something equally unpredictable, and it's hard to 
  be sure that the program will behave sensibly under all 
  circumstances. The more freedom you have in your actions, the more 
  likely it is that you'll expose some unknown weakness in the 
  program. What should you do if you elicit such an error?  First, 
  you can gloat for a reasonable amount of time (this is a judgement 
  call) about how very slick you are to have uncovered the hitherto 
  unknown fault in the program. Then, you can be a good community 
  member and let me know about it so I can fix it in the next program 
  update, and spare the next several billion people the same painful 
  experience. You won't get a plump cheque in the mail for your effort, 
  but I will add your name to the ultra-prestigious list of bug-finders. 
  There's something you can show to your grand-children with pride. 
  See [reporting].";

Option -> -> "software: specific"
	with description "I am aware of the following interpreter-specific
	issues and will add more detail as I hear about them:^^
	Winfrotz:	For the game's colour tricks to work correctly, use 
				full colour mode, and set the background colour to 
				black.  Winfrotz seems very determined to impose the
				user-selected background colour, while I am equally 
				determined that it should use the colour selected
				by Nine-Tenths of the Law. The resulting struggle for
				background colour superiority is not pretty, and is 
				best avoided by beating the interpreter into submission
				and explicitly forcing the background to black.^^
	Please report any other interpreter-specific issues to:^^
	ninetenths@@64templaro.com";

Option -> -> "reporting"
  with description "Please send bug-report to:^^ninetenths@@64templaro.com.^^ 
  It is not 
  necessary to enclose wads of cash, but it is appreciated.";

Menu -> "Acknowledgements";
Option -> -> "inspiration"
  with description "This program grew out of many years 
  of RPG experience, on both sides 
  of the dice. Formative experiences with RileyCon and NASCRAG strongly 
  influenced the style of this game. As for computer adventure games, I 
  first encountered them in the 1980s. In particular, I remember 
  enjoying the Scott Adams series from Adventure International which I 
  loaded onto my first computer from cassette tape. These games, and 
  more broadly other works of interactive fiction, are being written by 
  more people now than in their commercial heyday, and this wider 
  community should also be acknowledged as a source of inspiration, so 
  thanks to the usenet groups dedicated to interactive fiction:^^
  rec.arts.int-fiction^
  rec.games.int-fiction^^
  ...and probably others as well.";
Option -> -> "enabling"
  with description "This program would not exist, 
  were it not for the creation 
  of the Inform language, and the amazing resources that exist to 
  support its use. Chief amongst these is the Inform Design manual by 
  Graham Nelson. The book is brilliant. Just reading the index is 
  entertaining. Anyone who can stitch together a [coherent] book from 
  elements as diverse as Blake's 7 and Finnish palindromes must have a 
  uniquely wired brain.";

Option -> -> "beta testers"
  with description "Who are the fearless, 
  dedicated individuals who put their lives on the line to 
  test this program?^^ 
  David Anderson^
  Dan ~Captain Ambivalent~ Biemer^
  Margaret Frey^
  Mark Frey^
  Christopher Jobin^
  Denise Jobin Welch^
  John Lodder^
  Ben Collins-Sussman^
  Frances Collins-Sussman^
  Tymme Laun^
  Beth Vanichtheeranont^
  Lara Welch";

Option -> -> "special thanks"
	with description "I would also like to acknowledge:^^
	Copy Edting:^
	Rochelle Lodder^^
	Work In Progress Party Coordinator:^
	Rachel Rosenberg^^
	Cover Art Designer:^
	(no cover yet...)";

Option -> -> "bug finders"
  with description "Bug finders are people who report bugs in the program, 
  and will be added in future releases of this game.";

Menu -> "Administrivia";
Option -> -> "rating"
  with description "This game is rated ~NN4E~, 
  meaning Not Necessarily For Everyone. It is at times violent, and 
  not very friendly to cats, to which I am very allergic, and therefore 
  not very sympathetic. The game isn't very keen on priests on one 
  hand, while it is not overly critical of the undead on the other. The 
  game has some fun with bodily functions, but nothing that would be 
  considered too risqu@'e. In short, this game should not be played by 
  the very uptight, religious fundamentalists, cats or any combination 
  of the three. No one is holding a gun to your head and forcing you to 
  play this game, so if it doesn't suit your tastes, don't play it. If, 
  on the contrary, someone *is* holding a gun to your head and forcing 
  you to play this game, I guess you've got bigger problems.";
Option -> -> "licence"
  with description "This program is released 
  under the Creative Commons 
  Attribution-Noncommercial-Share Alike 3.0 United States licence. As a 
  consequence, you are free to copy, distribute, display and use this 
  work and to make derivative works under the following conditions:^^
 
  Attribution. You must attribute such works mentioning my name (Jack 
  Welch) and the title of this work (~Nine-tenths of the Law~). This can 
  appear in the title, with the Release Information, or in the 
  acknowledgements section of a menu system. Attribution does not 
  suggest my endorsement of derivative works or their authors.^^

  Noncommercial. You may not use this work for commercial purposes.^^

  Share Alike. If you alter, transform, or build upon this work, you may 
  distribute the resulting work only under the same or similar licence 
  to this one.^^

  If you would like a copy of the Inform6 source for this game, please 
  let me know by email: ninetenths@@64templaro.com";

!***** CLASSES *******************************************************

Class BasicItem
	with
	parse_name [;
	return(Vision.parser(self));
	],
	colour 0;

Class Prop class BasicItem
!props are somewhat difficult to move depending on size.
!they can be supporters or containers (or not), defined individually
	with 
	before [sizediff;
		sizediff = actor.size - self.size;
		Take:
			if(self in actor)
				"You already have ",(the) self,".";
			if(sizediff > 0) 
				rfalse;
			"", (The) self, " ", (IsOrAre) self," too heavy.";
!
!			[TODO: After intro submission, fix the drag system
!			see also drag verb and dragsub function, below.
!			Need to handle issues like door_dir pointing to a 
!			door or obstacle, and how this would work in the 
!			SlipperyRoom]
!
!
!			print (The) self, " is too heavy for that; ";
!			if (sizediff > -2 && self hasnt static or scenery) 
!				print "you might consider pushing or dragging it about, though";
!				!props shouldn't have static or scenery, this is just in case.
!			else print "you can't budge it"; 
!			".";  
!	  	PushDir:
!			if(sizediff >-2 && actor ~= polyp && 
!			self hasnt static or scenery) {
!				if(	(self ofclass Being) &&
!					self hasnt infection &&
!					self.current_hp > 0)
!						"",(The) self," objects to your plan.";
!				if(~~(location.second)){
!					location.cant_go(second);
!					rtrue;
!				}
!				if((location.second).size < actor.size)
!					"You are too big!";
!				if((location.second).size < self.size)
!					"",(The) self," is too big!";
!				print "With effort, ", (the) self," slides ";
!				DirectionToText(second);
!				print ".^";
!				move self to location.(second.door_dir);
!				PlayerTeleport(location.(second.door_dir));
!				rtrue;
!           }
	],
	size 2;

Class NPC
  with
  hostile false,
  size 8,
  has animate;

Class Topic
	with 
	valid  $$00000000, 
	unsaid $$11111111;

Class Being class Prop
	with 
	name 'being',
	short_name [;
	  if(self.size < self.size_original)
		print "miniature ";
	  rfalse;
	],
	max_hp 10,
  	current_hp 10,
  	strength 10,
  	armour 10,
  	atk 2,
  	dam 2,
	size_original 8,
  	size 8,
  	capacity 10,
  	memories 0,
  	arms 3, !limb remaining: 0=none,1=left,2=right,3=both
  	legs 3,
  	wielding 0,
  	animal false, !by default, humanoid
  	force_colour_vision false,
  	buzzed false,
  	poisoned 0,
  	appearance [; print "A being";],
  	description [item naked_flag;
		self.appearance();
		if(self.current_hp < 1) { 
			print "; ";
			TheHost("the",self,"look//s");
			print " somewhat, well, ", (string)
					random("deceased",
							"living-challenged",
							"dead",
							"expired",
							"not alive. Dead in fact",
							"defunct",
							"deceased",
							"done for",
							"lifeless",
							"inert",
							"lacking in the so-called spark-of-life department",
							"not very lively",
							"~non in corporo sano~ as they say",
							"morbid",
							"cadaver-like",
							"like a stiff"
					);
		}
		else 
			if(self has infection){
				print "; ";
				print (string) random(
					"it is apparent",
					"any fool could tell",
					"one might hazard a guess",
					"it is a fair wager",
					"if you look closely around the eyes, there is
					no question but",
				);
				print " that "; 
				TheHost("the",self,"/are/is");
				print " undead";
				if(random(20) < 4){
					print (string) random (
						". And maybe that's not a bad thing, after all",
						" -- not that there is anything wrong with
						being undead; it is just a different lifestyle",
				 ". And you're okay with that");
	 			 }
			};
		print ". ";

		if(self.arms < 3  || self.legs < 3){
			print " ";
			TheHost("The",self,"seem//s");
			print " to be missing ";
			if(self.arms <3) {
				switch (self.arms){
					0: print "both arms";
					1: print "a right arm";
					2: print "a left arm";
				}
			}
			if(self.arms < 3 && self.legs < 3)
				print " and ";
			if (self.legs <3) {
				switch (self.legs){
					0: print "both legs";
					1: print "a right leg";
					2: print "a left leg"; 
				}
			}
			print ". ";
		}

		naked_flag = true;
		objectloop(item in self){
			if(item ofclass Garment && item has worn){
				naked_flag = false;
				break;
			}
		}	
		if (naked_flag  && self ~= polyp && (~~self.animal)){
			print "Most interestingly, or perhaps most disgustingly, depending
					on ", (string) random (
					"your intestinal fortitude",
					"which way your moral compass blows",
					"personal tastes",
					"transient social mores",
					"your ability to roll with this sort of thing",
					"your visual acuity (or lack thereof)",
					"your point of reference"
					),", ";
			TheHost("the",self,"/are/is");
			print " ",(string) random (
				"stark naked",
				"wearing little more than a drooling smirk",
				"naked as a jay-bird",
				"nude (and none the better for it)",
				"not wearing any clothes at all"
				),". ";
			}
		if(~~naked_flag){
			print "In terms of fashion, ";
			TheHost("the",self,"/are/is");
			print " wearing ",(a) item,". ";
		}

		if (Spectacles in self && Spectacles has worn)
			print "At least the spectacles add an air of academic
				respectability.";

	"";
	],  
	heal [ potency;
    self.current_hp = self.current_hp + potency;
    if (self == player) print "You feel ";
       else print (The) self," looks ";
    if (self.current_hp > self.max_hp) self.current_hp = self.max_hp;
    if (self.current_hp == self.max_hp) {
        print "about as well as ";
	if (self == player) "you ever have!";
	  else "it ever has!";
    }
    switch(self.max_hp/potency){
      1: print "astoundingly";
      2: print "quite a bit";
      3: print "much";
      4: print "somewhat";
      5 to 9:print "a tad";
      10 to 19:print "a smidgeon";
      20 to 50:print "just the tiniest bit";
      default:;
    }
    " better.";
  ], 
  postmortem [;
	rfalse; !override for being-specific death scene, like zomboguts
  ],
  nothing_but_loot [;
	!for when being dies and the carcass is never recovered
	while(children(self)){
		if(child(self) has worn)
			give child(self) ~worn;
		move child(self) to parent(self);
	}
	self.wielding = 0;
	self.postmortem();
	remove self;
	rtrue;
  ],
  invent [;
    if(inventory_stage == 2) rtrue;
    rfalse;
    !to avoid glowing bunnies ...bunny rabbit (providing light)...
  ],
  before [;
    Lick,
    Drool,
    Bite:
			if(actor provides cant_drool) {
 				print "Your mouth is bone dry. ";
              rfalse;
			}
           if (actor has infection &&
              self hasnt infection && 
              self.current_hp > 0){
				give self infection;
				give self ~animate;
           print (The) self," briefly obeys the laws of an alien 
         	geometry, bubbling and warping into impossible shapes, and then 
          	settles down, reassuming its familiar shape as if nothing 
	   		happened.  Really, nothing at all.^";
			if(self ~= skeleton)
			print "^On the other hand it might be worth pointing 
			out that ",(the) self," is holding unusually still, has a
			distant, almost catatonic expression, and that the first hints of 
			foamy spittle have made their appearance at the corners of ",
			(the) self,"'s mouth.^"; 
			rtrue;
         }
    Attacking:
      Combat(actor,noun);
      rtrue;

 	Possess: !since anyone could be picked up by a bigger being
      if(parent(self) ofclass Being  && self has infection){  
        print "The psychic impulse propels ",(the) self," clear 
        of ";
        if(parent(self) == actor) 
          print "you";
        else
          print "the ", (string) PossessionSuit(parent(self));
        print ". ";   
        move self to location;
      }  
	Search:
		if(self.current_hp < 0 || self has infection){
			if(self == rabbit)
				"Under the fur, you find a rabbit.";
			else {
				print "You pat ",(the) self," down and find";
				MyHappyPlace.frisk(self);
				".";
			}
		}
		else
			rfalse;
  ],
  orders [;
    Take: if(cluecat in self)
          "The cat wants your full attention. You can't pick up 
           anything else."; 
	  if(self.arms < 1)
	  	"You reach for ",(the) noun," and then recall that you have no arms.";
	Empty:
		if(self.arms < 1)
			"It is too difficult to do this without arms!";
	Search:
		if(self.arms < 1)
	  		"You are one arm short of being an effective searcher.";
    Gnaw:
      if(~~(noun == Limbs)) rfalse;
      if(self.animal) "Fortunately, ",
        (address) self.&name-->0,"s are too inherently
        intelligent to do that.";
      if(Limbs.limb_present() == 0) "Been there. Done that. 
        Anyway, it was tasty while it lasted.";
      if(~~(Limbs.laterality)){
        if(Limbs.limb_present() == 3) "Choices, choices. Could you 
	  rephrase and indicate whether you mean your ~left ",
	  (address) Limbs.limb,"~ or ~right ",(address) Limbs.limb,"~?";
	Limbs.biteoff(Limbs.limb_present()); !i.e., the only remaining limb
	rtrue;
      }
      if(Limbs.limb_present() < 3 && Limbs.laterality ~= Limbs.limb_present()){
	  "You are already, um, missing that ",(address) Limbs.limb,".^";
      }
      Limbs.biteoff(Limbs.laterality);
      rtrue;
    Jump:
      if(self.legs < 1) "Without legs, you don't get much height.";
    Go:
      if(self.legs<3){
        if(self.legs > 0){ 
	  print "You try to hop ";
	  if(noun in Compass) LanguageDirection(noun);
	  print " on your good ";
          if (self.legs == 1) print "left"; else print "right";
          print " leg";
	}
	else {
	  if(self.arms > 0){
	    print "You try to drag yourself ";
	    if(noun in Compass) LanguageDirection(noun);
	    print " using your ";
	    switch (self.arms){
	      1: print "remaining left arm";
	      2: print "remaining right arm";
	      3: print "arms";
	    }
	  }
	  else {
            print "You attempt to squirm and wiggle your way ";
	    if(noun in Compass) LanguageDirection(noun); else print "away";
          }
	}
        print ". ";
      }
      if(noun in Compass && parent(self).(noun.door_dir) provides size &&
        actor.size > (parent(self).(noun.door_dir)).size) 
	!check the size of the object pointed to by the noun giving the 
	!direction of intended movement
        "You are too large to fit through ",
	  (the) parent(self).(noun.door_dir),".";
	!implicit rtrue prevents the movement if actor is too big
      else print"^";
  ],
  each_turn_for_just_me [;
    !run any actions that are specific to a given being, if any, by 
    !overriding this
    rtrue;
  ],
  each_turn [;
  !each turn actions common to all beings

    self.each_turn_for_just_me();
    !being-specific each turn actions (beings are expected to do their
    !own checking that they are not the player, as sometimes it is 
    !desirable for them to run an each_turn action even if the player
    !is in their body
      
    if (self ~= player) rtrue;
    !run the following only for the body inhabited by the player, but
    !don't run it for every 'ol body in scope

    self.poisoned = false;
    !this gets set by whatever poison was ingested, but serves as a flag
    !so that multiple poison messages don't print. 
   
	if (self.current_hp <= 0) {
		if (self == polyp){
			deadflag = 1;
			rtrue;
		}
		@output_stream 3 DispossessMessage;
      print "Your ",(string) PossessionSuit(self)," body ",
       (string) random (
      "succumbed after much abuse",
	  "could bear no more",
	  "failed you",
	  "collapsed",
	  "shed its debatably mortal coil",
	  "couldn't take any more",
	  "has had it"), ". ";
		@output_stream -3;
      DispossessSub(self);
      rtrue;
    };
  ],
  has transparent ~infection light;

Class Obstruction class BasicItem
  !need to set the parent's dir_to to point to the obstruction at setup
  !the obstruction door_to is later transferred to parent's dir_to
  with 
  max_hp 10,
  current_hp 10,
  size 8,
  replacement_object 0,
  goodbye [dir;
    objectloop(dir in Compass){
      if (parent(self) provides dir){
        if(parent(self).dir == self){
           parent(self).dir = self.door_to;
           break;  
         }
       }
     }
     if (self.replacement_object)
       move self.replacement_object to parent(self);
     remove self;
     "...perhaps you can go ", (name) dir," now.";
  ],
  before [;
       Enter: if(actor == player) "You can't enter ",(the) self,".";
              rtrue;  !don't want to deal w/ roaming stuff 
                      !entering an obstruction
          Go: if(actor == player){
               print "You can't. ",(The) self," ";
               print (string) random("is in the way",
                              "obstructs your movement",
                              "blocks any further passage");
              print ".";
              rtrue;  !as above w.r.t. roaming stuff
           }
           rtrue;  
    Attacking:
                if (second == cluecat) rfalse;
                !really, no question about hitting it... .             
                self.current_hp = self.current_hp - (random(actor.dam-1) +1);
                if (self.current_hp < 1){
		  print "Wham!  You obliterate it! ";
		  self.goodbye();
		  rtrue;
		  }
                print "Your attack ";
                switch (actor.dam*100/self.current_hp){
					300 to 30000	:print "devastating!";
					150	 to 299	:print "superb!";
					100 to 149		:print "was brilliant!";
					90 to 99		:print "was quite impressive!";
					80 to 89		:print "weakened it.";
					70 to 79		:print "was fairly impressive.";
					60 to 69		:print "was reasonably successful.";
					30 to 59		:print "caused some damage.";
					20 to 29		:print "damaged it somewhat.";
					15  to 19		:print "did a bit of damage.";
					10 to 14		:print "did a little damage to it.";
					5 to 9			:print "marred the surface just a bit.";
					1 to 4			:print "may, eventually, cause some damage.";
					0				:print "will, on a geological time 
											scale, be a threat.";
                 default			:print "hit!";                
                }
                print " ",(The) self," looks ";
                switch ((100*self.current_hp)/self.max_hp){
                  96 to 100:print "essentially unaltered.";
                   91 to 95:print "barely scratched.";
                   81 to 90:print "just a bit damaged.";
                   61 to 80:print "lightly damaged.";
                   41 to 60:print "moderately damaged.";
                   21 to 40:print "severely damaged.";
                   11 to 20:print "critically damaged!";
                    6 to 10:print "nearly destroyed.";
                    1 to 5:print "on the brink of obliteration.";
                default:print "more or less unchanged!";
                }
                print "^";
                rtrue;
  ],
  cat_message_count 0,          ! zero implies a reset
  cat_difficulty 15,            ! out of 20, higher is harder
  cat_text "Meow." "Purr." "Hissss.",
  hit_by_cat [;
    if( random(20) > self.cat_difficulty){
      print "^The cat ", (string) random ("cries",
                                         "shrieks",
                                         "exclaims",
                                         "whines",
                                         "yells",
                                         "howls",
                                         "screeches",
                                         "wails",
                                         "bellows",
                                         "yowls",
                                         "chortles",
                                         "balefully whimpers"),",~";
      if(~~(self.&cat_text-->self.cat_message_count ofclass String)){
        self.cat_difficulty = 0;
        self.cat_message_count = 0;
      }
      print (string) (self.&cat_text-->self.cat_message_count),"~.^";
      self.cat_message_count++;
    }
  rfalse;
  ],
  has static door;

Class Appendage(12)
  with name 'severed' 'creature' 'lateral' 'appendage',
  short_name 
		[; 	print "severed ",
			(address) self.&name-->2," ",
			(address) self.&name-->1,"'s ",
			(address) self.&name-->3;
			rtrue;
  ],
  description [; 
    print "What's to say?  It looks pretty much like you would
           expect a chewed up ";
    self.short_name();
    print " to look.^";
  ],
  rename [creature lateral appendage;
    self.&name-->1 = creature; 
    if(lateral == 1) self.&name-->2 = 'left'; else self.&name-->2 = 'right';
    self.&name-->3 = appendage;
    rtrue;
  ],
  create [;
    move self to location;
  ];

Class Outside
  with
  size 50,
  cant_go [; Exits(self);],
  has static;

Class Room 
  with
  size 10,
  cant_go [; Exits(self);],
  has static;

Class Proptainer class Prop
!subclass of props which is meant to contain other items. This assures
!that there is a default capacity and methods to check what is deposited
![CONSIDER] making capacity a function of the size of objects contained
  with 
  capacity 1, !by default, proptainers only contain one item
  before [;
  Receive:
    !check to see if the item is bigger than the container
    if((noun provides size) && noun.size > self.size)
      "",(The) noun," is too big to fit into ",(the) self,".";
    !check to see if the container is already full
    if(children(self) && children(self) > self.capacity)
      "",(The) self," is full and cannot accommodate ",(the) noun,".";
  ],
  has container;

Class Garment class Prop
!garments are wearable props, eh?  They have code for putting them on 
!and taking them off.
  with 
  cursed false,
  bonus 0,
  before [item;	
    disrobe:
		if(self.cursed)
			"You can't seem to remove ",(the) self,". How curious.";
	wear:
   		objectloop (item in actor){
      		if (item has worn && item ofclass Garment) {
        		if (item == self) 
					if(self.cursed)
						"You are already wearing ",(the) self,".";
					else
	       			"You take off ",(the) item,", fluff it, and 
	        	 	 	put ",(the) item," back on again. You feel fresher.";
				if(item.cursed)
					"That's odd. You aren't able to take off ",(the) item," in
					 order to don ",(the) self,".";
				else {
 					give item ~worn;
					give self worn;
					"You remove ",(the) item," and put on ", (the) self,".";
      			}
			}
    	}
  ],
  list_together GARMENT_GROUP,
  has clothing;

Class Fixture
!not moveable -- hence, fixed.
!by default, they are concealed, which supposes that they are mentioned
!in the room description.
  with 
  before [;
          Take,Pull,Push,PushDir:
            print_ret (The) self," doesn't budge. It's no use --  it is 
			definitely fixed in place.";
       ],
  has  static concealed;

Class TwoWayDoor class BasicItem
  with 
  room1, towards_room2,
  room2, towards_room1,
  appearance,
  size 10,
  description [; 
    self.appearance();
    print " It is ";
    if (self has open) "open.";
    else "closed.";
  ],
  status [;
    if(self has open)
		return("an open");
	else
		return("a closed");
  ],
  found_in [;
    if(location == self.room1 or self.room2) rtrue;
    else rfalse;
  ],
  door_dir [;
    if (location == self.room1) return self.towards_room2 ;
    else return self.towards_room1;
  ],
  door_to [;
  if (location == self.room1) return self.room2;
  else return self.room1;
  ],
  has door openable ~open static scenery;

Class Bottle (3) 
  with 
  name 'empty' 'bottle' 'bottles//p' 'seal' 'clear' 'cap',
  plural "empty bottles",
  short_name "empty bottle",
  description "An empty, clear bottle capped by some sort of metal seal.",
  create [;
    move self to Hopper;
    if (location == Kitchen)
      "A bottle is ejected from the recycler, rolls down the chute and lands
       in the hopper with a clinking sound.^";
  ],
  before [;
    open:
      "The cap seems to be fused to the bottle itself. You'll need some
       real technology to get this open.";
    take:
      if(self in Recess)
        "You cannot remove the bottle from the recess. The machine is
	 holding it too tightly.";
  ],
  has
  container openable ~open;

Class Potion (6) class prop
!A class for magical potions -- a combination of bottle and liquid
!for the sake of me not going crazy. 
!Note that potion colours are limited to resolution of dictionary words
!Set the colour, duration, effect_on, effect_off, properties for each potion

	with
	description [item quantity counter;
		switch(self.select){
			'label':
					print "~potion of ", (address) 	
							CommonDataHerbPotion.&name-->self.index,
							".~^";
			'potion':
				print "A potion, ";
				Vision.print_colour(CommonDataHerbPotion.&colour-->self.index);  
				print " in colour, contained in a glass bottle.
						 The bottle has a small label.^";
			'all_labels':
				objectloop(item in actor){
					if(item ofclass Potion)
						quantity++;
					}
				if(quantity == 0)
					"You don't see any labels to read.";
				if(quantity == 1)
					print "The label reads:";
				else
					print "The labels read:";
				print " ";
				objectloop(item in actor){
					if(item ofclass Potion){
						print "~potion of ", (address) 
						CommonDataHerbPotion.&name-->item.index;
						counter++;
						if(quantity > 2)
							if((quantity - counter) > 1){
								print "~, ";
								continue;
							}
						if(quantity > 1)
							if((quantity - counter) > 0){
								print "~ and ";
								continue;
							}
						print "~.^";
					}
				}
				rtrue;
		}	  
	],										
	index 0,
  	time_left 0,
  	target 0,									
  	select 0,																	
	
	create [which where;
		self.index = which;
		move self to where;
	],
	parse_name [ w n flag;
		for (: flag == false: n++) {
			w = NextWord();
			switch(w){
				'labels'	:	self.select = 'all_labels'; continue;
				'label'	:	self.select = 'label';continue;
				'bottle',
				'glass',
				'potion'	:	self.select = 'potion';continue;
				'new'		:	if(self in Recess){
									self.select = 'potion';
									continue;
								}
			}
			if (w == Vision.perceived_colour(CommonDataHerbPotion.&colour-->self.index)
					or
					CommonDataHerbPotion.&name-->self.index){
				self.select = 'potion';
				continue;
			}
			flag = true; 
			n--;
		}
    	return n;
 	 ],
  short_name [;
    Vision.print_colour(CommonDataHerbPotion.&colour-->self.index); 
    print " potion";
    rtrue;
	],
	effect_on [;
		switch (self.index) {
			0:	(self.target).current_hp = 0;
				if (self.target == actor){
					@output_stream 3 DispossessMessage;
					print "For a rapidly acting poison, it really didn't
							taste too bad.^^
							With the world swirling around you, circling
							the drain of nonexistence, your ", (string)
							PossessionSuit(actor)," body collapsed to the
							ground. ";
					@output_stream -3;
					DispossessSub(actor);
					rtrue;
				}
				if(self.target == polyp){
					deadflag = 5;
					"^The polyp deflates like a punctured bladder, and as
					 it melts in the evaporating puddle of poison, so
					 your consciousness boils away.";
				}
				!default case:
					"^Seconds later, the ",(string) PossessionSuit(self.target),
					" is staring blankly skyward, conveying to you clearly
					the potency of the poison which you just administered.";
			1: !check to see if potion already in effect for this body 
				if((self.target).size >= (self.target).size_original){	
					(self.target).size = 2;
					if (self.target == actor) 
						"Everything around you has gotten bigger!";
					else 
						print (The) self.target, 
						" has shrunken down to the size of a mouse!^";
				}
			   else
					"Nothing seems to have happened...";
			2: (self.target).heal(1+random(5));
			3: (self.target).force_colour_vision = true;
				if(self.target == actor){
					Vision.dayvision(true);
					<<look>>;
				}
			4:  (self.target).buzzed = true;
    			if (self.target == actor)
     				"That stuff packed a wallop. You feel great 
					-- unexplainably cheerful
       			and festive. Your surroundings weave and pitch 
					around you, although you are
       			sure that it is not a matter of your own 
					superb coordination. Something
       			in the air is also making your 
					speech sound slurred. You are doing a
       			great job despite everything spinning 
					around you.";
    			else
      				"",(The) self.target," looks inebriated.";
			5: 	ZomboRepel.actuate(self.target,30);
		}
  	],
  	effect_off [;
		switch (self.index) {
			0: 	rfalse;
			1: 	(self.target).size = (self.target).size_original;
				!zomboguts have a size, so the situation of being inside them
				!is covered..

				!----------------
				!actor crushed?
				if(self.target == actor){
					if((parent(self.target)).size < (self.target).size){
						!If in twisty area or RTL mode, flush the input stream.
						!or there will be hell to pay:
						 if(TxtEntry.twisting || TxtEntry.ltr == false)
       					TxtEntry.screen_on(true);
					 	actor.current_hp = 0;
	 					actor.nothing_but_loot();
						@output_stream 3 DispossessMessage;
						print "As the shrinking potion wore off, you began 
						to enlarge. The space grew tighter and tighter! 
						The ",
						(string) PossessionSuit(actor),"'s body was being crushed! ";
						@output_stream -3;
	 					DispossessSub(actor);			!back to the polyp
	 					rtrue;
					}
				} 
				!non-actor crushes actor?
				if(CommonAncestor(actor,self.target)){
					if(CommonAncestor(actor,self.target).size 
						< (self.target).size){
						!If in twisty area or RTL mode, flush the input stream.
						!or there will be hell to pay:
						if(TxtEntry.twisting || TxtEntry.ltr == false)
       					TxtEntry.screen_on(true);
						@output_stream 3 DispossessMessage;
						print (The) self.target,
						" regained its normal size but
						there wassn't enough room! 
						The hapless ",
						(string) PossessionSuit(actor),
						"'s body 
						was crushed like a grape! ";
						@output_stream -3;
						DispossessSub(actor);
						rtrue;
					}
				}
				!not observed...nothin' left but the loot
				if((parent(self.target)).size < (self.target).size){
					(self.target).nothing_but_loot();
					rtrue;
				}
				!*********** not killed in the act of enlarging *************
				!actor re-enlarges
				if(self.target == actor){
					print "You return to your normal size. It feels good
							 to be normal size again.^";
					if(~~(parent(actor) ofclass Room or Outside))
						PlayerTeleport(location);
					rtrue;
				}
				!something other than actor enlarges
				!if observed...
				if(CommonAncestor(actor,self.target)){
					print (The) self.target," returns to 
					its normal size";
					if(~~(parent(self.target) ofclass Room or Outside)){
						print ", after reflexively springing clear of ";
						if (IndirectlyContains(actor, self.target))
							print "you";
						else
							print (the) parent(self.target);
					}
					print ".^";
					if(IndirectlyContains(actor,self.target))
						move self.target to location;
					else
						while (~~(parent(self.target) 
						ofclass Room or Outside))
							move self.target to parent(self.target);
					rtrue;
				}
				!not observed
				while (~~(parent(self.target) ofclass Room or Outside))
					move self.target to parent(self.target);
				rtrue;

			2: rfalse;
			3:	(self.target).force_colour_vision = false;
				if(self.target == actor){
    				Vision.dayvision(false);
    				<<look>>;
				}
			4: 	(self.target).buzzed = false;
    			if (self.target == actor)
      				"^The world settles down, and you 
					have a mild headache. At least 
      				everything has stopped spinning. 
					Perhaps you will think twice before
      				touching Aronk again.";
     			else
       			"",(The) self.target, "'s behaviour is back to normal.";
			5: rfalse;
		}
	],
	time_out [;
		self.effect_off();
		Potion.destroy(self);
		Bottle.create();
		rfalse;
	],
	start_effect [who search;
		self.target = who;
		!Is this potion already in effect for this person?
		if(CommonDataHerbPotion.&duration_potion-->self.index)
			objectloop(search)
				if(search ofclass Potion &&
				search ~= self &&
				search.target == self.target &&
				search.index == self.index ){		
					search.time_left = search.time_left + 
						CommonDataHerbPotion.&duration_potion-->self.index;
					Bottle.create();
					Potion.destroy(self);
					rtrue;
				}
		self.effect_on();
		if(CommonDataHerbPotion.&duration_potion-->self.index) 
			StartTimer(self,CommonDataHerbPotion.&duration_potion-->self.index);
		else {
			Bottle.create();
			Potion.destroy(self);
		}
	],
	before [;
		Drinking:
			print (The) self," disappears with a PUFF!^^";
			remove self;
			self.start_effect(actor);
			rtrue;
		Pour:
			remove self;
			if (second == nothing) { 
				Potion.destroy(self);
				Bottle.create();
				"The magical potion flows out the 
				bottle and turns to mist. The bottle
	 			fades from your sight.";
      		}
			if (second ofclass Being){
				if (second == actor) 
					print "You shimmer";
	  			else 
					print (The) second," shimmers";
				print " with magical energy as the ";
				Vision.print_colour(CommonDataHerbPotion.&colour-->self.index); 
				print " fluid is absorbed. The bottle 
						winks out of existence.^";
				remove self;
        		self.start_effect(second);
				rtrue;
			}
			print "The ";
			Vision.print_colour(CommonDataHerbPotion.&colour-->self.index); 
			print " fluid drenches ", (the) second, ", but
       	doesn't seem to have any effect. The 
			bottle dissolves into thin air.^";
			Potion.destroy(self);
			Bottle.create();
			rtrue;
  ],
  list_together POTION_GROUP;

Class Herb (6) class BasicItem
  	with 
	ingestor 0,
  	size 1,
  	article "an",
	index 0,
	time_remaining 0,

  parse_name [ w n flag;
	for (: flag == false: n++) {
		w = NextWord();
		if (w == 'herb' or 'plant' or 'flower' or 'flowers') 
			continue;
		if (w == Vision.perceived_colour(CommonDataHerbPotion.&colour-->self.index)) 
			continue;
		else 
			if (w== 'no' or 'without' or 'lacking') 
				continue;
		flag = true; 
		n--;
    }
	return n;
  ],
    short_name [;
    print "herb with ";
	if(CommonDataHerbPotion.&colour-->self.index)
	 	Vision.print_colour(CommonDataHerbPotion.&colour-->self.index);
    else print "no";
    print " flowers";
    rtrue;
  ],
  description [;
     print "A small plant ";
     if (CommonDataHerbPotion.&colour-->self.index){
       print "with ";
       Vision.print_colour(CommonDataHerbPotion.&colour-->self.index);
       }
    else print "lacking any";
    print " flowers.^";
  ],
	before [;
		Eating:
			if(CommonDataHerbPotion.&duration_herb-->self.index){
				print (string) random (
				"Yuck. That didn't taste good",
				"Ewww. A very chemical flavour",
				"Uh oh, tastes like poison..",
				"Sort of pleasant, sort of a bitter almond kind of taste with 
					carmel overtones",
				"These flowers can't be very good for anyone..");
				print ".^";
				self.ingestor = actor;
				self.time_remaining = 
					CommonDataHerbPotion.&duration_herb-->self.index;
				StartDaemon(self);
				remove self;
				rtrue;
			}
	],
	create [which;
		self.index = which;
		move self to CommonDataHerbPotion.&herb_home-->self.index;
		if(self in location)
			print (A) self," germinates!^";
		rtrue;
	],
	daemon [;
	!responsible for doing damage each turn to whomever ingested it
	!this is set to suppress multiple poisoning messages
		(self.ingestor).current_hp = (self.ingestor).current_hp -2;
		if((self.ingestor).current_hp < 0) 
			(self.ingestor).current_hp = 0;
		if(actor == player && (self.ingestor).poisoned ~=true){
			!to make sure that this is seen only when it is the actor's present
			!body that is experiencing the symptom, and that it is only printed
			!once. Since the order of daemons is not fixed, the first one will 
			!print and all subsequent ones will see the flag and not print
			print (string) random (
			"You are growing weaker",
			"A slow poison is working its way through your body",
			"It is becoming harder to stay awake",
			"You feel worse and worse",
			"You feel sick",
			"You break out into a cold sweat",
			"Your brow is hot, and you are shaking uncontrollably",
			"Your vision is blurry, and everything sounds muffled",
			"You feel lightheaded",
			"You are nearly paralysed by pain",
			"You can't think straight. Something is affecting you",
			"You are dizzy, and feel like you are about to pass out",
			"You must have eaten something that has made you sick"
			);
	print ".^";
	(self.ingestor).poisoned = true;
	!actors are responsible for clearing this at the end of each turn

	self.time_remaining--;
		if(self.time_remaining < 1){
			StopDaemon(self);
			Herb.create(self.index);
			Herb.destroy(self);
		}
	}
	],
	list_together HERB_GROUP,
	has	edible;
  
Class Detail class BasicItem
	
	!details may be designated either by a list of name dictionary words or by
	!a parse_name function. If the latter, the last "hit" remains selected in 
	!the self.select.  If no name can be found according to short name, he
	!internal name (double quoted name) is used.

	!details should not be portable, and should not be referenced by their
	!object names -- i.e., you are forced to use their dictionary names (since
	!the self.select value is persistent.

	with
	short_name [;
	if(self provides select && self.select){
		print (address) self.select;
		rtrue; !suppresses iname;
	} 
  ],
  has static scenery;
  
Class Weapon class Prop
  	with 
	dambonus 2,
	silent_unwield [;
		if(actor.wielding == self)
			actor.wielding = 0;
	],
	before[;
		Throw:
			self.silent_unwield();
	],
  	after [old_damage;
	   Drop:
			self.silent_unwield();
		Take:
			if(actor.wielding){
				if(actor.wielding provides dambonus)
					old_damage = (actor.wielding).dambonus;
				else
					old_damage = 1;
				print "^You pick up ",(the) self,", although you are still wielding ",
				(a) actor.wielding,", which is ";
				if(self.dambonus > old_damage)
					print "an inferior";
				else
					if(self.dambonus == old_damage)
						print "about as effective a";
					else
						print "a superior";
				" weapon.";
			}
			else
				actor.wielding = self;
				"^You are now wielding ",(a) self,".";
  ],
	invent [;
		if(inventory_stage == 2 && 
			actor.wielding == self)
				print " (wielded)";  
  ],
	list_together WEAPON_GROUP;

!***** OBJECTS ******************************************************

Outside Hill "The Hilltop"
   with
   description [;
		print "A craggy, windswept patch of dirt atop the 
		smallest in a vast range of mountains. A 
		barely visible path leads down the mountain. ";
		if(~~(WelcomeDoor in self))
			print "An opening leads north into the mountain
					itself.";
		"";
	],	
   possess_hint 0,
   gnaw_hint 0,
   each_turn [;
     if(action == ##wait or ##waittime) rfalse;
     if(zombie.memories){
       !once the zombie has been possessed, its trace memories are erased,
       !hence, if there are still memories, it hasn't been possessed yet and
       !player may need a bit of a hint.
       self.possess_hint++;
       switch (self.possess_hint) {
         20:"No one appreciates how difficult life is as a sessile polyp.";
         45:"It sure would be nice to get out of your polyp body and into 
           something a little more...mobile.";
         80:"If you possessed even a fraction of the zombie's ability to move
           around, you'd be off this hill in no time. Hey...there's an
	   idea...";
         120:"The zombie stares at you with a dull expression...clearly, nobody
           is home. Perhaps it is time to take possession of some vacant
	   real estate...";
         150:"The zombie would make an excellent host body. Its mind will offer
           no resistance to possession.";
         180:"The zombie is creeping you out. Wouldn't you rather possess the 
           zombie and not have to look at it anymore?";
	 default:rtrue;
       }
     }
     if(zombie.arms & 2){
       !this starts counting after zombie is possessed
       !i.e., if zombie still has its right arm attached  
       self.gnaw_hint++;
       switch (self.gnaw_hint){
         20:"The shackles are beginning to rub your right wrist raw.";
	 50:"You wonder if you will be shackled to this mountainside by
	     your right arm forever.";
	 80:"The possibility of being trapped up on ths mountain for the
	     foreseeable future gnaws at you.";
	 100:"Trapped. Like a wild animal in a hunter's trap, the chain
	      around your right arm tethers you to the top of the hill.";
	 120:"This bites.";
	 130:"If only there were some way to disarm these shackles!";
	 140:"Off hand, you can't think of a way to escape the shackles.";
	 150:"Your attempts to pull free of the shackles have left you with 
	      a gnawing pain in your right shoulder. Hmm...";
         default:rtrue;
       }
     }
   ],
   d_to Slope,
   n_to WelcomeDoor;
 
Detail -> loam
	with
	select 0,
	parse_name [ w n flag;
		for (: flag == false: n++) {
			w = NextWord();
			switch (w) {
				'earth',
				'rich',
				'loam',
				'soil',
				'dirt':		self.select = 'dirt'; continue;
				'granite',
				'hilltop',
				'hill',
				'hillside':	self.select = 'hillside'; continue;
				'path',
				'trail':		self.select = 'path'; continue;
				'square',
				'entrance',
				'opening',
				'mountain':		if(~~(WelcomeDoor in Hill))
										self.select = 'opening'; continue;
			}
      		flag = true; 
      		n--;
		}
	return n;
	],
	description [;
		switch(self.select){
			'dirt':
    			print "Mmmm. Dirt. Composting, filthy, old dirt. 
					Your dirt. You would expect this hill to be 
					covered with a lush mountain grass, but 
					instead, nothing else grows here. Just ";
    				TheHost("the",polyp,"");
				".";
			'hillside':
				Hill.description();
			'path':
				"The earth is packed down harder in one area -- it could be
				a neglected path. It seems to lead down the mountain. It
				is not marked in any way and might just as easily be an
				animal trail.";
			'opening':
				"A square opening to the north leads into the mountain.";
		}
	],
	before [;
		enter	:	if(self.select == 'opening'){
						PlayerTo(WelcomeRoom);
						<look>; 
						rtrue;
					}
	];

Obstruction -> WelcomeDoor "cheap wooden door",
	with
	max_hp 20,
	current_hp 20,
	select 0,
	colour 'orange',
	parse_name [ w n flag;
		for (: flag == false: n++) {
			w = NextWord();
			switch (w) {
				'bolt',
				'holes',
				'hole': self.select = 'bolt';continue;
				'stain',
				'hinge',
				'hinges': self.select = 'hinge';continue;
				'door',
				'cheap',
				'decaying',
				'wooden',
				'wood',
				'oak': if(self.select == 0) self.select = 'door';
						continue;
			}
			if(Vision.colour_enabled()){
				if(w == self.colour) {
					self.select = 'door'; continue;
				}
			}
			else{
				if(w == 'grey') {
					self.select = 'door'; continue;
				}
			}
			flag = true; 
			n--;
		}
		return n;
	],
   description [;
     switch (self.select) {
       'bolt': "Once, shiny iron bolts fixed this door firm to the very 
               granite of the mountainside, but the bolts are long gone.";
       'hinge':"There's no metal left, just a discolouration of the wood 
                and the bolt holes which have become filled with dirt over
                time.";
       default: print "A cheap door of unfinished oak lies half-buried in 
                 the rich loam of the hillside to the north;  an ";
		Vision.print_colour(self.colour);
		" stain is all that remains of the poorly chosen hinges.";
     }
  ],
  before [;
  Open:
        "It seems jammed shut.";
  Take: if (self.select == 'hinge') 
         "Any bits of hardware have long since 
          dissolved. The stain is soaked into the wood.";
  ],  
  cat_text 
	"I think the only way through this door is to beat it repeatedly."  
	"As much as I would enjoy it, I have to admit that I don't do a lot of damage 
	 when you hit stuff with me. Oh, sure I enjoy it. That's a given. But we'll be here
	 all day unless you knock this door down somehow.",
  door_to WelcomeRoom,
  replacement_object 0,
  has openable;

Being -> polyp "fleshy white polyp"
  with name 'polyp' 'fleshy' 'eye'
				'stalk' 'anemone' 'frond' 
				'fronds//p' 'bud' 'buds//p',
  max_hp 1,
  current_hp 1,
  strength 0,
  armour 1,
  atk 0,
  dam 0,
  memories 0,
  size_original 3,
  size 3,
  description "An anemone-like polyp, with a thick central stalk topped 
    with waving fronds.",
  before [;
	Listen: "You hear the faint, rhythmic swishing of bodily humours.";
	Touch:  "The glistening, mucous-covered surface feels exactly as you would 
             expect, but less pleasant somehow.";
	Taste: "Tangerine, with a hint of cilantro. Or, perhaps, the haunting 
            aftertaste of newly minted undead flesh.";
	Smell: "Hmm...Yeasty and damp, with a dark smoky undertone.";
	Eating,
	Eat,
	Push,
	PushDir,
	Pull:	deadflag = 1;
			"^The shaft of your polyp body is avulsed from its roots, 
			 splattering the hillside with ichor. The world spins
			 as your perspective changes, and suddenly the world
			 grows dark.^";
  ],
  after [;
    Take: deadflag = 1;
          "^As you rip the rubbery glistening stalk from its 
          roots, ever diminishing jets of green ichor spray the 
          craggy hilltop.  Your consciousness fades...^";
  ],
  orders [;
    Go:"One of the major drawbacks of your sessile existence is
        lack of facility for locomotion. In a nutshell, you're 
        not going anywhere.";
	Push,
	Pull,
	PushDir,
	Bend,
	StandUp,
	Dance,
	Disrobe,
    Jump,
    Take,
    Open,
    Close,
    Attacking:
          "A lack of appendages severely limits your ability to interact 
          with your surroundings.";
	Eat,
	Eating,
	Bite,
	Gnaw:
          "You have no orifice which serves this function.";
	Yell:
		   "You scream silently.";
	Kiss:
			"Ah, to have lips.";
    Drool:
          "No mouth equals no saliva.";
    Barf:
          "Oh...to have internal organs...";
    Tell:"Your fronds flail back and forth with the alacrity of dancing 
         garden slugs. Whether anyone can interpret what you are saying 
         is, of course, another question entirely.";
    Listen: "You detect no vibration, neither in your roots which penetrate 
         the rock of the mountain, nor through your fronds which wave in the 
	 air. The world is silent.";
    Taste, Smell: print "You open a ring of pores on your upper stalk, 
         revealing mucous-lined olfactory cavities in your trunk. "; 
    Touch, Examine: 
	 if (noun == self) rfalse;
         print "You bend your stalk and wave your ";
	 if (action == ##Touch) 
	   print "fronds";
	 else 
	   print "eye buds";
	 print " towards ", (the) noun, ". You sense: ";
  ],
  has infection ~static; 

Being -> zombie "shambling zombie"
  with name 'zombie' 'shambling' 'undead' 'monster',
  max_hp 15,
  current_hp 15,
  strength 17,
  armour 8,
  atk 12,
  dam 8,
  memories "Haughty figures in purple robes...tied to the table...must get 
            back to the farm...a greater purpose...to serve whom?...no
	    escape...drinking the liquid...tastes awful...no problems now...
	    must obey...obey the priests...climb the hill and wait...wait...",
  appearance [;
    if(actor == self) 
      print "You are a ";
    else
      print "A ";
    if (actor ~= self) print "dis";
    print "possessed decaying corpse with 
	   vacant, unblinking eyes and ";
    print (string) random ("drooling",
			   "salivating",
			   "slobbering",
			   "dripping",
			   "saliva-coated",
			   "spittle-drenched",
			   "watering"
 		           );
    print " ";
    print (string) random ("maw",
			   "mouth",
			   "oral cavity",
			   "jaw",
			   "lips");

    if(MagickShackles in Hill && ~~MagickShackles.armed) {
      if(actor == self)
        print ". At the moment, you are";
      else
        print ", which is";
      print " chained to the top of the hill
      by some sort of shiny black chain";
    }
    rtrue;
  ],
  postmortem [;
	move ZomboGuts to parent(zombie);
	  ],
  before [;
    Taste: 
           TheHost("The",self,"taste//s");" of stale camphor.";
    Smell: 
	   TheHost("The",self,"smell//s");" somewhere between 
	     mouldy leaves and gangrene.";
    Touch: 
           if(actor == self) 
	     print "Your";
	   else 
	     print "The zombie's";
	   " skin is dry and leathery, scaly and flaky in some thick rough 
	     patches, puffy and pustulent in other areas.";
    Listen:
	   TheHost("The",self,"putter//s");
           print " about growling softly, with the occasionally groan. Almost 
	   every movement ";
	   TheHost("the",self,"make//s");
	   print " is accompanied by some sound related to ";
	   if (actor == self) 
	     print "your";
	   else 
	     print "the zombie's";
	   " state of deterioration -- joints creak, viscera gurgle, loose 
	   flaps of skin flutter in the breeze.";
  ],
  orders [stuff;
    Eating:
      if(noun == polyp){
			deadflag = 1;
			"You stretch your ample zombie jaws around the 
			 succulent polyp and experience the odd sensation
			 of chewing through yourself. It is not pleasant.^";
	   }
      if(noun has edible) rfalse; 
      if(noun has scenery or static) rfalse;
      !both situations handled by the default Eating action.
      if(noun provides size && noun.size > 4) 
        "You not are picky about what you eat, but there are practical limits
	 as to how wide your jaws can stretch.";
      if(noun == Limbs) <<Gnaw noun>>;
      move noun to Zomboguts;
      if (self.wielding == noun)
		self.wielding = 0;
      print "The ", (name) noun, " disappears down your hideous zombie craw. ";
      if (random(20) < 6 && location ~= SlipperyRoom)
        print (string) random(
			"An ominous gurgling sound erupts from deep
	 		 	within your body.",
			"You feel your innards rearranging themselves
	  			to make room for the latest arrival.",
			"A wave of indigestive indignation passes 
	  			without incident.");
      "";  
    Barf:
		if(parent(self) == SlipperyRoom)
			"You try to vomit but can't -- your entrails
			 are frozen solid!";
        stuff=1;
        while(stuff){
          stuff=child(ZomboGuts);
          if(stuff){
             print "You yack up ", (a) stuff,".^";
             move stuff to parent(self);
          }
        }
        "Ah...that's much better....although now you're feeling a might 
         peckish..";
    Go:
       if(MagickShackles in Hill && ~~MagickShackles.armed)
         "You can't!  You are chained to the top of the hill by a set of 
	 obsidian shackles.";
       else 
         rfalse;    
  ],
  each_turn_for_just_me [;
    if(actor == self) ZomboGuts.rumble();
  ],
  has infection;

Garment ->-> FarmGarments "decaying farm garments"
  with name 'farm' 'garment' 'garments' 'clothes' 'rag' 'rags//p',
  description "Tattered, torn, blood-soaked filthy rags that were once 
    clothes typically worn by farmers or other peasants.",
  has 
  worn pluralname;

Proptainer ->-> ShacklesKeyBox
  with 
	size 1,
	name 'lacquer' 'box',
  	colour 'crimson',
  	short_name [;
		print "lacquer box";
		rtrue;
  	],
  	description [;
	if (self has open) 
		print "An open ";
	else
		print "A closed ";
    Vision.print_colour(self.colour);    
    print " faux-lacquer box. The letter ~H~ appears in the middle of
    the lid, inlaid in a ";
    Vision.print_colour('gold');
    print " script.";
    if (self has open){ 
      print " The inside of the box is padded with a rich,
      deep ";
      Vision.print_colour('purple');
      print " material of the finest quality. This material bears the
      clear impression of a key which must at one time have rested in the 
      box.";
    }
    "";
  ],
  invent [;
    if(inventory_stage == 2) 
		if(child(self) && self has open)
			" which contains ",(a) child(self);
		else
			rtrue;
    rfalse;
    !to mask open/close state and contents
  ],
  after [;
         Examine:
	 if(self has open) OneDeep(self);
       ],
  has ~open openable;

Prop ->->-> ShacklesNote "parchment note"
  	with name 'parchment' 'note' 'paper' 'writing' 
				'script' 'paper' 'ink' 'signature',
	size 1,
  	description "A carefully folded square of parchment paper, covered with 
    small, precise writing in black ink. It says:^^
    My Dear Zombie,^^We, the Priests of Perigee, humble and loyal followers
    of Order, have the unfortunate duty to inform you that the Ivory 
    Key of Obsidian Annihilation was lost in the year 37E121A105. In
    subsequent Pereginations, we have observed that this has not constituted an 
    insurmountable inconvenience, and we trust this will again be the case. 
    ^^We remain devoted and ever-committed to achieving Alignment.^^Signed,^
    Laemmli, Emphyteote of Helle.";

Being -> rabbit "shy little bunny rabbit"
  with name  'rabbit' 'little' 'fuzzy' 'bunny' 'cute' 'shy',
  animal true,
  max_hp 2,
  current_hp 2,
  strength 2,
  armour 10,
  atk 2,
  capacity 1,
  dam 1,
  size_original 3,
  size 3,
  tummy_full false,
  memories "Hop here, hop there...Carrots?  Oh yes, please...more shiny
            stuff...shiny good...hop, hop...uh oh, people...bounce away...
	    hop here, hop there...ew...what's that?",
  appearance [;print "A cute, fuzzy white rabbit";rtrue;],
  orders [; 
	Empty,
    Take: 
         "Silly, possessed, and potentially evil bunny!  Your little 
	  		paws lack prehensile thumbs. It is pitiful watching you make 
	  		the attempt.";
  ],
  before[;
    Listen: TheHost("The",self,"coo//s");" innocently.";
    Touch: if (self == actor) "You touch yourself for good luck.";
           else "The soft, plush fur of the bunny is soothing, and 
	     not at all suggestive of impending doom.";
    Taste:  TheHost("The",self,"would//");
            " go well with a full-bodied,
            relatively strong, red wine.";
    Smell:  TheHost("The",self,"smell//s");
            " of freshly cut grass."; 
  ],
	postmortem [;
		move RabbitSkeleton to parent(self);
	],
	each_turn_for_just_me [direction rabbit_at way exit_count exit_chosen;
		if(Spectacles in self){
			if(random(20) < 3){
				move Spectacles to parent(self);
				give Spectacles ~worn; !perhaps redunant
				print "The spectacles slide down and forward, sliding off ";
				if (actor == rabbit)
					print "your";
				else
					print "the rabbit's";
				" twitchy little nose.";
			}
		}
		if(self has infection) 
			rfalse; !undead bunnies don't hop.
		if(self.current_hp < 1 || self == player) 
			rfalse;

		if(parent(self) ofclass Outside or Room &&
		   Carrot in parent(self)){
			self.tummy_full = true;
			remove Carrot;
			"The greedy little bunny stops to admire the carrot. Its eyes
			 brim with lust as it lunges towards the carrot, impaling it
			 on its sharp yellow incisors.";
		}
		if(self.tummy_full){
			self.tummy_full = false;
			rtrue;
		}

		if(random(20) > 10) 
			rfalse; !scamperiness of rabbit
		rabbit_at = parent(rabbit);
		if (parent(player) ~= rabbit_at) 
			rfalse;
		objectloop(direction in compass){
			way = rabbit_at.(direction.door_dir);
			if (way ofclass Object && way hasnt door) 
				exit_count++;
		}
		if(exit_count == 0) 
			rfalse;
		exit_chosen = random(exit_count); 
		exit_count = 0;
		objectloop (direction in compass){
			way = rabbit_at.(direction.door_dir);
			if (way ofclass Object && way hasnt door) 
				exit_count++;
			if (exit_count == exit_chosen) 
				break;
	}
	move self to way;
	print "^The little rabbit ";
	print (string) random ("bounces", 
                           "hops",
                           "scampers",
                           "scoots",
                           "flees",
                           "runs",
                           "ambles",
                           "skips",
                           "bolts",
                           "darts",
                           "dashes",
                           "hurries",
                           "races",
                           "romps",
                           "rushes",
                           "scurries",
                           "scuttles",
                           "bounds",
                           "speeds",
                           "skedaddles",
                           "lopes",
                           "springs",
                           "skitters");
	print " ";
	DirectionToText(direction);
	print ".^";
	rfalse;
	];

Fixture -> MagickShackles
	with
	short_name  "obsidian shackle",
	select 0,
	armed 0,
	with_key magic_key,
	parse_name [ w n flag;
    	for (: flag == false: n++) {
			w = NextWord();
			switch (w) {
				'obsidian',
				'volcanic'		:;continue;
				'glass',
				'shackles'		:self.select='shackles';continue;
				'chain',
				'chains'		:self.select='chain';continue;
				'keyhole',
				'hole'			:self.select='keyhole';continue;
				'gear',
				'gears',
				'spring',
				'springs',
				'clockwork',
				'mechanism'	:self.select='mechanism';continue;
				'severed',
				'right',
				'arm'			:if(self.armed) {
									self.select='shackles';continue;
								}
								else 
									n--;
	  			default		:flag=true;
	  		}
		}
    	flag = true; 
		n--;
		return n;
    ],
	description [;
		switch (self.select) {
			'shackles':
				if(zombie.arms & 2 == 0)
					"The zombie's severed right arm remains clamped securely in the 
	     			unforgiving obsidian shackles.";
           	else {
             		print "Uncannily strong obsidian shackles and a chain forged from
             		the same black, volcanic glass hold ";
             		TheHost("the",zombie,"");
             		print " prisoner on the hillside. The shackles are closed tightly 
	     			on ";
	     			if(actor == zombie) 
						print "your "; 
					else 
						print "the zombie's ";
	     			if(zombie.arms == 2) 
						print "remaining"; 
					else 
						print "right";
	     			" arm. There is a small keyhole at the base of the shackles,
	     			near where they connect to the chain.";
	  			}
			'chain':
          		"The chain runs from some shackles to the ground where it melds into 
           	the very stone of the mountain itself. Although apparently made of 
           	black, volcanic glass, the chain seems supernaturally strong and not
				brittle in the least.";
			'keyhole':
				"An intricate keyhole extends through the base of the shackles; some
				sort of mechanism is inside.";
			'mechanism':
				"The keyhole contains an immensely complicated assembly of toothed
				gears, springs, and other clockwork that are so miniaturised as to
				strain your vision.";
		}
	],
	before [;
		Take: "You strain at the chain, but cannot pull it free from the rock.";
		Attacking: "The chain is far stronger than you are and is not affected.";
		Eating: "Not even you can manage to eat these magical bonds!";
		Open: "The shackles are locked.";
		Unlock: if(second ~= magic_key)
					"The shackles remain locked.";
				 else
					rfalse;
	],
	after [new_arm;
		Unlock: 	if(magic_key.material ~= TxtEntry.ltr){
						give self locked;
						"They key turns in the lock, with negative results.";
					}
					remove(self);
					print "The shackles spring open, releasing ";
					if(~~self.armed)
						if(actor == zombie)
							print "you";
						else
							print (the) zombie;
					else {
						new_arm = Appendage.create();
						new_arm.rename('zombie','right','arm');
						print "the captive arm"; 
					}
					". There is a 
					crackling sound as the shackles become dull and shrink
					just a fraction before they turn to black sand and are 
					absorbed into the soil.";
	],
	each_turn [item;
		if(self has open && self.armed) "Obliterate the shackles...";
		!restore whatever the reaction was for opening the shackles previously...
		!assuming that the long-lost key can be recovered from the rabbit hole

	if(~~self.armed){
		!do some stuff -- clean up the spawned zombie arm that was gnawed off...
		objectloop (item in parent(self)){
			if (item.&name-->1 == 'zombie' &&
			item.&name-->2 == 'right' &&
			item.&name-->3 == 'arm'){
				Appendage.destroy(item);
				self.armed = true;
				self.short_name = "shackle-bound zombie arm";
				give self ~concealed;
				"The chained zombie arm flops to the ground, wriggles a bit and 
				then rests there, inert.";
			}
		}
	}
	rfalse;
	],
	has lockable locked;

Outside Slope "Sloping Path"
  with
  description [; 
              "At the top, the winding path is little more than a depression
               in the gravel and mud, but lower down the mountain, it becomes 
	       	more defined, and perhaps even sees occasional use. Near the
               bottom of the path a dirt road is visible.";
   ],
   d_to DirtRoad,
   u_to Hill;

Detail -> SlopeDetail
  with
  select 0,
  parse_name [ w n flag;
    for (: flag == false: n++) {
        w = NextWord();
	switch (w) {
	  'hill',
	  'winding',
	  'sloping',
	  'slope',
	  'path': self.select = 'path'; continue;
	  'rocks',
	  'rock',
	  'gravel',
	  'stones': self.select = 'rocks'; continue;
	  'mud',
	  'road',
	  'mountain': self.select = w; continue;
	}
      flag = true; 
      n--;
    }
    return n;
    ],
    description [;
     switch (self.select) {
       'rocks'   	: "Little itty bitty grey rocks.";
       'mud'     	: "Messy.";
       'road'    	: "A simple dirt road further down the hill.";
       'mountain'	: "From down here, even your relatively small mountain
                   seems impressive.";
		'path'  	: Slope.description();
      }
     ],
     before [;
       Take:
         switch(self.select){
           'mud'     : "Yuck. No way.";
	   'rocks'   : "Nah. They're too small to be useful.";
	   default   : rfalse;
	 }
    ];

Outside DirtRoad "Dirt Road"
  with
  description [;
    "A wheel-rutted single lane runs east and west. You are at the bottom of 
     a path that leads upwards to the peak of a small mountain, while 
     the road is bordered by dense woods. There is a small 
     signpost here.";
  ],
  u_to Slope,
  w_to CountryRoad,
  e_to PeasantRoad;

Detail -> RoadDetail
	with
	select 0,
	parse_name [ w n flag;
		for (: flag == false: n++) {
			w = NextWord();
			switch (w) {
				'peak',
				'lane',
				'path',
				'road': self.select = w; continue;
			}
			flag = true; 
      		n--;
		}
		return n;
	],
	description [;
     	switch (self.select) {
       	'road'   : DirtRoad.description();
       	'rut',
			'lane'   : "Just wide enough for an ox-cart.";
       	'path'   : "Way off in the distance, it looks like a path 
						winds its way up the mountain and disappears near the
		    			top.";
			'peak'	  : Mountains.description();
      	}
	];
  
Fixture -> SignToTown "sign post"
  with
  parse_name [ w n flag;
    for (: flag == false: n++) {
        w = NextWord();
        if(w == 'sign' or 'post' or 'signpost' or 'arrow' or 'arrows'
					or 'lettering' or 'characters' or 'letter' or 'character'
					)
	  continue;
	if(self.clean ~= true && w == 'mud' or 'grime') continue;
	flag = true; 
	n--;
    }
    return n;
  ],
  clean false,
  description [;
    if(self.clean) 
      "A painted arrow points east, and is labeled ~Town~. Looking more 
       closely at the sign, it appears that this crude hand-painted lettering 
       overlies a series of characters printed with mechanical precision:^^
       ~Emphyteote Facility~ with an arrow pointing west.";
    else
      "A tilted sign splattered with mud and road grime. A hand-painted
       arrow points east and is crudely labeled ~To~.";
  ],
  before [;
    Rub:self.clean = true;
        "The mud crumbles to the ground, and slowly the accreted road filth
	 of many generations yields to your efforts.";
  ];

Outside CountryRoad "Desolate Road"
  with name 'desolate' 'road',
  description [;
    "To the west, you can make out a cabin at the edge of the woods. 
    The woods come right to the edge of the road, except on the north side
    where there is a small strip of meadow.";
  ],
  w_to BlindManProperty,
  e_to DirtRoad,
  n_to Meadow;

Detail -> CountryRoadDetail
	with
	select 0,
	parse_name [ w n flag;
		for (: flag == false: n++) {
			w = NextWord();
			switch (w) {
				'lane',
				'path',
				'road': self.select = 'road'; continue;
				'meadow',
				'chimney',
				'smoke',
				'cabin': self.select = w; continue;
			}
			flag = true; 
			n--;
		}
		return n;
	],
    description [;
		switch (self.select) {
			'road'   : CountryRoad.description();
			'meadow' :	"A plesant little meadow.";
			'cabin'  : "A rustic cabin, a bit larger and better maintained 
                		than those inhabited by peasants. It probably has a few 
		   				rooms. There is a chimney, but no smoke. From here, it 
		   				looks open.";
			'chimney':	"A simple chimney, likely serving a single fireplace.";
			'smoke'  :	"Wait a minute. You are examining the *absence* of smoke?
						That is just neurotic.";
		}
	],
	before [;
		examine : rfalse;
		default : if(self.select == 'smoke')
						"There is no smoke! There is a distinct absence
						 of smoke, in fact. An almost palpable non-smokiness
						 here that seems preternaturally implausible.";
					else
						"The ", (address) self.select," is too far away";
   ];

Outside BlindManProperty "Front Yard"
  with 
  description [;
    "A small, windowless cabin to the west is framed by a lush lawn. To the south of the 
	cabin, there is a small, well-tended garden. A dirt lane leads towards the
	east, where it joins up with the road into town.";
  ],
  w_to FrontRoom,
  e_to CountryRoad,
  s_to Garden;

Detail -> Road
	with
	select 0,
	parse_name [ w n flag;
		for (: flag == false: n++) {
			w = NextWord();
				switch (w) {
					'property'	: self.select = 'property'; continue;
					'front',
					'yard',
					'lawn',
					'grass' 	: self.select = 'lawn'; continue;
					'path',
					'dirt',
					'lane',
					'road'  	: self.select = 'road'; continue;
					'chimney',
					'door',
					'cabin' 	: self.select = 'cabin'; continue;
					'garden'	: self.select = 'garden'; continue;
				}
			flag = true; 
			n--;
		}
		return n;
	],
	description [;
		switch (self.select) {
			'property'   : 	BlindManProperty.description();
			'lawn'       : 	"The front lawn is evenly mown with no dry spots.";
			'road'       : 	"This is, as they say, the end of the road.";
			'cabin'      : 	"It is not extravagant, but it appears to be in good
								shape. It doesn't look like there is a front door
								at all.";
			'garden'     : 	"It looks like there is a little garden just to
								the south.";
		}
	],
	before [;
		Enter:
			switch (self.select) {
				'cabin': PlayerTo(FrontRoom); <<look>>;
				'garden': PlayerTo(Garden); rtrue;
			}
		rfalse;
	];

Room FrontRoom "Front Room"
  with
  description [;
    print "A monastically simple room, with a single chair, a low table, and 
    a small fireplace. Strangely, this house has been built with no windows.
    The kitchen is to the north, and the front yard is to the east. There is ",
	(string) DoorToBedRoom.status()," ",(name) DoorToBedRoom,
	" which leads to a room to the west. ";
    if(LoungeChair.slid)
      print "Near the chair is a tunnel leading downwards.";
    "";
  ], 
  w_to DoorToBedRoom,
  e_to BlindManProperty,
  n_to Kitchen,
  d_to [;
    if(LoungeChair.slid)
      return PassageWay;
    else
      rfalse;
  ];
!TODO -- it would be much nicer to suppress the messages like a chair (upon 
!whom is sitting an old man), replacing with appropriate inline text

Fixture -> CoffeeTable "table"
  with name 'table',
  description "A short, heavy wooden table.",
  has supporter ~concealed;

Prop -> LoungeChair "black chair"
	!the ship's acceleration couch, now a medieval lounge chair
	with 
	parse_name [w n flag;
		for (:flag == false:n++){
			w=NextWord();
			switch(w){
				'grip',
				'lever':self.select = 'lever';
						return 1;
				'black',
				'acceleration',
				'chair',
				'seat',
				'metal',
				'couch',
				'rest',
				'cushion',
				'cushioning',
				'modern':self.select = 'chair';continue;
        		'frame',
				'material':self.select = w;continue;
			}
      		if(self.slid && w == 'passage' or 'tunnel'){
        		self.select = 'passage';continue;
			}
		flag = true;
		n--;
    	}
		return n;
	],
	lever_up true,
	select 0,
	slid false,
	description [;
		switch (self.select) {
			'frame':"The chair frame is made of tubular 
					  metal and has no sharp corners.";
			'material':"The fabric covering the chair 
						is a high-tensile synthetic
                  	fibre, clearly beyond local technology.";
			'chair':
				print "The modern chair is discordant with its drab and mundane 
        		surroundings. Whilst the rest of the room is made of stone, wood and 
        		thatch, the metal frame of the chair gleams brilliantly and has been finely 
        		tooled -- clearly, not the work of the village blacksmith. The chair is 
        		contoured like a human body, with a head-support, arm-rests and elevated 
        		knee support and foot-rests. The ample cushioning is covered in a supple, 
        		black material and the entire chair ";
        		if(self.lever_up) 
          			print "is reclined";
        		else
          			print "is pitched forwards";
        		print ". There is a small metal lever near the right arm 
						rest, it has been ";
        		if(self.lever_up)
          			print "pulled upwards towards the headrest.";
        		else
          			print "pushed downwards towards the feet.";
        		if(Laemmli in LoungeChair){ 
          			print " Perhaps the most remarkable feature of
							the chair is the old man ";
          			if(Laemmli.awake) 
            			print "resting";
          			else
            			print "sleeping";
          			print " in it.";
	  			}
       	'lever':
          		print "A short metal lever with a molded grip. It is in the ";
          		if(self.lever_up)
            		print "upwards";
          		else
            		print "downwards";
          		print " position.";
       	'passage': "From up here, all you can see is a dark tunnel leading 
                   	 downwards.";
    	}
    "";
  	],
  	size 10,
	chair_move [;
		self.slid = ~self.slid;
		print "The chair slides ";
		if(self.slid)
			"to the side with an easy, fluid motion revealing
			a passage leading downwards.";
		else
			"back into its original position, with no evidence that it had
			ever moved.";
	],
	lever_pushed_down [;
		if(actor notin FrontRoom)
			rtrue;
		print "The old man is thrown forward and appears 
				startled. His forehead creases in irritation
				as he ",(string) random (
				"snarls",
				"grimaces",
				"groans",
				"gripes",
				"grumbles",
				"whignes"),", ";
		quote (random(
				"That lever isn't a toy!",
				"Keep your hands to yourself!",
				"Oh, my poor back!",
				"When you're my age, see how much you 	
				 appreciate it when I
				 drop by your house and flip you back
				 and forth. It's disgraceful!",
				"Oy!",
				"Would you mind?",
				"That's enough."));
		print " ";
		if(Laemmli.awake)
			print "^";
		rtrue;
	],
	lever_pulled_up [;
		if(actor notin FrontRoom)	!consider replacing this by a function
			rtrue;						!TreeFallsAndNoOneHearsIt();		
		print "The veins in the old man's forehead pulse
				and his nostrils flare as he ",
				(string) random (
				"bellows and huffs",
				"gesticulates wildly",
				"shakes his fist in the air and rants",
				"shakes spastically with annoyance and whispers",
				"clenches his non-existent teeth and grunts"
				),", ";
		quote (random(
				"Honestly.",
				"What is with you?",
				"Don't touch my lever.",
				"I don't touch your lever, you don't touch mine.",
				"I hope you are proud of yourself.",
				"Okay, so now you know what the lever does.",
				"I can't tell you what that does for my back.",
				));
		print " He then ",(string) random (
				"shakes his finger at you and pretends that you are not
				 there",
				"whistles in astonishment and stares at his fingernails",
				"clears his throat, folds his arms behind his head, and 
				 closes his eyes",
				"counts to F and takes a deep breath",
				"adjusts himself until he is comfortable again",
				"pats out the wrinkles in his robe and folds his legs"
				),". ";
		if(Laemmli.awake)
			print "^";
		rtrue;
	],
  	before [;
		Take:
			if(self.select == 'chair')
				"It is too massive to pick up. You might be able
				 to push it about, though.";
		Enter:
			if(self.select == 'passage')
				<<go d_obj>>;
			else
				"There is already someone else on the chair.";
    	Push:
      		switch(self.select){
				'frame',
				'chair':self.chair_move();
						 rtrue;
				'lever':if(self.lever_up) {
								self.lever_up = false;
								Laemmli.flipped++;
								if(Laemmli.flipped == 5)
									Laemmli.angry("Leave my chair alone, 
										annoying abomination!");
								if(Laemmli.awake){
									self.lever_pushed_down();
									rtrue;
								}
								else {
									self.lever_pushed_down();
									Laemmli.wake_up();
									rtrue;
								}
						}
						else {
							print "The lever does not move.";
							if(Laemmli.awake) {
								print "The old man waves a stubby finger at you
										and admonishes, ~Listen, ";
								switch(Speaker()){
									1:print "young farmer";
									2:print "cadet";
									3:print "little rabbit";
									4:print "my young acolyte";
									default: "darn";
								}
								print ", the chair is strictly off limits. "; 
								if(Speaker() == 4)
									print "Unless you need to access the basement.";
								print "~.";
							}
							"";
						}	     	
			}
		Pull:
			switch(self.select){
				'frame',
				'chair':self.chair_move();
						rtrue;
				'lever':if(~~self.lever_up){
							self.lever_up = true;
							Laemmli.flipped++;
							if(Laemmli.flipped == 5)
									Laemmli.angry("Leave my chair alone, undead idiot!");
							if(Laemmli.awake){
								print "The chair springs open with a ratcheting sound
										and the old man is thrown backward, sinking 
										deep into the cushion and then floating back 
										upwards, indifferent to the violent movement, but
										still annoyed. ";
								self.lever_pulled_up();
								rtrue;
							}
							else {
								self.lever_pulled_up();
								Laemmli.wake_up();
								rtrue;
							}
						}
					 	else {
							print "The lever does not move. ";
							if(Laemmli.awake){
								print "The old man rants, ~Keep your ";
								switch (Speaker()){
									1:print "dirty fingernails";
									2:print "bloodthirsty claws";
									3:print "puffy little mitts";
									4:print "holier-than-thou hands";
									default: "darn";
								}
								print " off my chair";
								if(Speaker() == 4)
									print ", unless you need to access the transmitter";
								print ".~";
							}
							"";
						}
			}	
  	],
  	has supporter;

NPC ->-> Laemmli "old man"
	with name 'old' 'man' 'priest' 'Laemmli',
	description [;
		print "The old man is short and plump, with unkempt white hair and a 
		stubbly beard of several days growth. His forehead and temples 
		are streaked with deep lines, and his eyes are deeply set in 
		dark sockets. His skin is pale, almost translucent, except for
		the dark patches under his eyes, and the spiderveins that run
		through the thin skin over his cheekbones. His gummy mouth 
		harbours not a single tooth, and his flabby lower lip has
		stretched outward, draping sloppily over his double chin. 
		Somewhere, his head merges into jowls which overlap his barrel
		chest, by-passing a neck entirely. He is dressed in the fine
		robes of a priest. ";
		if (self.awake) 
			"He is staring at you with rheumy eyes.^";
		else
			"He is sleeping comfortably on a fancy chair.^";
  	],
  	awake 0,
	flipped 0,
	greeted 0,
	hostile 0,
	glasses_on 0,
	time_remaining 0,	
	awake_duration_max 5,
	visited_by_zombie false,
	visited_by_farmer false,
	visited_by_soldier false,  !remember to enable these
	visited_by_bunny false,
	visited_by_priest false,
  	not_a_clue [;
    	print (string) random(
			"I have no idea.",
			"Yeah, that's a stumper.",
			"I'll look that up and get back to you.",
			"Hmmm...not a clue.",
			"I think I used to know.",
			"I can't recall...",
			"I couldn't begin to guess what that means. How very odd.");
  	],
  	pre_spray [;
    	ZomboRepel.actuate(actor,30);
    	print "You recall the old man saying, ";
  	],
  	post_spray [;
    print " The old man then ", (string) random (
      "whipped around, lithe as a serpent, and sprayed you with a fine mist of 
       liquid",
      "flipped with lightning speed, produced some sort of metal canister,
       held it in your face, and before you could even think about reacting,
       sprayed you copiously with the vile fluid",
      "became a blur of motion, as he sprayed you in the face with some 
       kind of potion",
      "moved with the speed of a swordsman and spritzed you with some sort
       of noxious fluid",
      "merely leaned back, crossed his legs and nonchalantly doused you with
       some sort of fluid from a canister that he must have had hidden in the 
       cushions"
       ),
       ". After some time, your panic has ebbed and you have returned to your 
        senses. You realise that you are no longer in the house, 
		but must have run off.^^";
	<look>;
	],
	sleep [;
		if(actor in FrontRoom){
			print "The old man ";
			if(self.glasses_on)
				print "mutters something 
						incomprehensible, sleepily 
				 		removes his spectacles, stashes 
						them in his robe, and ";
			print "then falls asleep in the chair.^";
		}				
		self.awake = 0;
		self.hostile = 0;
		self.glasses_on = 0;	
		self.greeted = 0;
		self.flipped = 0;
	],
	timer_boost [;
		self.time_remaining = self.awake_duration_max;
		StartDaemon(self);
	],
	wake_up [;
		if(~~Speaker()){
			self.angry(random(
				"Helle's bells! A naked abomination!",
				"Away, my sartorially-challenged horror!",
				"Get yourself some clothes, evil creature!",
				"Unclothed wretch! You'll get no welcome here!",
				"Get dressed and stop fooling around. The Ordeal 
					cannot wait!"
			));
		rtrue;
		}
		self.timer_boost();
		self.awake++;
		if(self.awake > 2) 
			self.awake = 2;
		if(self.awake == 1){
			print (string) random( 
			"The old man stirs",
			"The figure on the chair wakes",
			"Yawning and blinking, the old man"
			);
			print " and searches ";
			print (string) random(
			"numbly",
			"blindly",
			"reflexively"
			);
			print " in his long robe. After a minute, he ";
			if(Spectacles in LaemmliRobe){
				print "finds what he is looking for and withdraws a pair 
					   of ";
				if(Spectacles.broken){
					self.glasses_on = true;
					print "bent and mangled";
				}
				else {
					self.glasses_on = true;
					self.hostile = true;
					print "precision-crafted";
				}
				" spectacles and lifts them to his face.";
			}
			else
				print (string) random (
				"scratches his head",
				"strokes his chin",
				"makes a clucking noise"
				),
				" and mumbles ~", (string) random ( 
				"Now where did I leave them?",
				"Came home. Did stuff. Glasses down. Put in pocket? Hmph.",
				"Not again. Where did I put them?",
				"I thought I put them in my pocket...",
				"Not again.",
				"I'm just getting too absentminded.",
				"Last time this happened, I was looking for them for a month.",
				"I need to get another pair."
				);
				"~";
		}
	],
	angry [rant;
		if(~~rant) 
			rant = random(
					"Go find another Emphyteote to annoy.",
					"You have to get up pretty early to fool old Laemmli!",
					"What did I ever do to deserve this aggravation.",
					"I guess this makes up for all those times 	
					 you yelled at me!",
					"Go be undead somewhere else!",
					"This may sting slightly...",
					"Learn your place, undead servant!",
					"Don't dally. Two sunsets and you'll be fit for
					 the compost heap of history."
					);
		self.awake = 2;
		self.hostile = 1;
		self.timer_boost();
		if(actor in FrontRoom){
			self.pre_spray();
			quote(rant);
			self.post_spray();
			rtrue;
		}
	],
  	daemon [scan;
	!to keep Laemmli's actions going while he remains awake
		if(self.time_remaining == 0){
			self.sleep();
			StopDaemon(self);
			rtrue;
		}
		objectloop(scan in FrontRoom){  !can't just go with actor in FrontRoom
		  if(scan ofclass Being)			!because sometimes when Laemmli is doing
			self.timer_boost();			!an "orders" action, *he* is the actor.
		}									!of course, he wouldn't be outside the room:
		if(actor in BedRoom or Kitchen or BlindManProperty or Cellar){
			print "^From ";
			if (actor in BlindManProperty)
				print "inside the cabin";
			else
				print "the adjoining room";
			print " you hear ";
			if(self.hostile){
				print "a steady stream of irate ranting";
				if(random(20) > 3)
					print ".";
				else {
					print ", ";
					print (quote) random(
						"You disgusting wretch! It's my house now. Stay out!",
						"Don't show your undead face around here anymore!",
						"I can still hear you skulking around!",
						"Don't think that I don't know you're there!",
						"Next time, you'll think twice, I'd warrant.",
						"All fangs and no brains, and look where it got you.",
						"Get back to the ordeal before your polyp wilts!",
						"Time is wasting, Throne is approaching perigee!",
						"What were you thinking, ~Oh, today I'll just wander
					 	down and annoy old Laemmli? Were you?",
						"As if I don't have enough problems without your lot.",
						"I knew it would be one of those days.",
						"Come back in here and I'll give you some more!",
						"Mess with the Emphyteote, will you?",
						"Be a nice zombie and back up the mountain.",
						"While you're out there, be sure you stay out of my 
						 garden.",
						"Go terrorise the village or something."
						);
				}
			}
			else { ! not hostile
				print "the old man moving around";
				if(random(20) > 3)
					print ".";
				else {
					print ", ";
					print (quote) random (
						"Hey. Don't monkey with any of my stuff.",
						"Are you still there?",
						"I'm not so keen on you wandering about.",
						"Do you always drop in on people and wake them up?",
						"I didn't really expect visitors on a curfew day.",
						"Don't track mud into the house.",
						"My equipment and my garden are strictly off limits.",
						"Sometimes I feel like I am talking to myself.",
						"People. Bah.",
						"Young people these days. No respect at all.",
						"I remember when I was a young lad..."
				  	);
				}
			}
			print "^";
		}
		self.time_remaining--;
		!print "timer: ",self.time_remaining,"^";
  	],
	react_before [;
		Yell:
			if(self.awake == 0){
				self.wake_up();
				rtrue;
			}
			else
				"The old man looks annoyed, and says, ",(quote)
				"Enough already. I'm awake.";
	],
	before [;
		Smell:
			if(self.awake)
				"The old man sniffs you in return and wrinkles his
				 nose in disgust.";
			<Smell LaemmliRobe>;
			rtrue;
	 	Search:
			<search LaemmliRobe>;
			rtrue;
     	Touch:
			if(self.awake == 0){
				self.wake_up();
				rtrue;
			}
			else
				"Hey. Quit poking me.";
		Turn:
			"A paladin you ain't.";
		Take,
		Push:
			if(self.awake){
				self.angry();
				rtrue;
			}
			else{	
				self.wake_up();
				rtrue;
			}
		Attacking:
			self.angry(random(
						"I've been looking forward to this!",
						"Attack me, will you?",
						"You've got some nerve!",
						"Get back to the ordeal.",
						"Stop fooling around! You're supposed to
						be undergoing alignment!",
						"You always were cantankerous.",
						"Some days you really try my patience!"
						));
			rtrue;
		Taste,
		Drool:
			self.angry(random(
						"I've been at this for quite some 
						time, that won't work on me!",
						"It's called immunity 
						Look it up. Now git.",
						"Save your spittle -- you've got more
						important things to do than
						running around and drooling on people.",
						"Time for a manners lesson!"));
			rtrue;
		Bite:	
			self.angry(random("I'd bite you back, if I had teeth.",
						"Biting. Priests. Is. Bad!",
						"What did you do that for? 
						 Won't work on me, you know."));
			rtrue;
		Stare,
		Examine:	
			if(self.awake && (self.hostile == 0 || self.glasses_on == 0)){
				print "The old man complains, ";
				quote ("Would you quit looking at me like that?
				It's unnerving.");
				print "^^";
			}
			rfalse;
	],
	each_turn [;
		if(~~(actor in FrontRoom))
			rfalse; !in case the actor somehow left the room (e.g., died) at an
					 !earlier time in the same turn.

		if((self.awake == 2 && self.glasses_on && Spectacles.broken == 0) ||
			(self.awake == 2 && self.hostile)){
			self.angry();
			rtrue;
		}


		if(self.awake == 0) {
			if (random(20) > 3)
				print "^",(quote) "Zzzzzzzzz.","^";
			else {
				print "^The ",
						(string) random ("old man",
										  "elderly priest",
										  "figure in the chair",
										  "man in priestly robes"),
						" ",
					(string) random(
					"snores contentedly",
					"scratches himself in his sleep",
					"mumbles incoherently about tomatoes",
					"sleeps on, oblivious to your presence",
					"fidgets in the chair, gets comfortable and 
						 		settles into a deep slumber",
 					"smiles in his sleep",
					 "coughs lightly, clears his throat, and turns over",,
					"rests peacefully",
					"yawns and then goes back to sleep",
					"shudders as if he is having a bad dream",
					"stretches like a cat then curls back into a ball"
					),
					 ".^";
			}
		rtrue;
		}
		else { !i.e., awake
			if(actor ~= self && noun ~= self && second ~= self && random(20) < 4){
				print "^The old man ",
					(string) random(
					"rubs his nose",
					"watches you closely",
					"seems distracted",
					"pats the pockets of his robe",
					"looks at his fireplace",
					"glances at the table",
					"blinks",
					"stretches",
					"yawns",
					"belches quietly",
					"hums to himself",
					"relaxes",
					"coughs",
					"looks at the ceiling, apparently bored with your
					 presence",
					"turns to look at you"
				),
				".^";
			}
		}

		if(self.awake) 
			self.awake++;
		if(self.awake > 2)
			self.awake = 2;
	],
	life [chosen;

		WakeOther:
			self.wake_up();
			rtrue;

		Give:
			"I'm happy to look at whatever you show me,
			 but I'm too comfy here to move. You can 
			 leave it on the table, if you'd like. I'll
			 get to it later.";

        Ask:
		if(~~self.awake)
			rtrue;
	  switch(second) {
		t_whistle:
			if(Speaker() == 4)
				quote("Well, Sibling, I have heard stories of a whistle which
						would transport people instantaneously from one place 
						to another, but that's just an oral tradition within
						the monastery, I'm afraid. I'm sure you've heard it,
						some of the old timers call it the story of the green
						frog. I don't recall why, though.");
			else
				quote("Whistle? The only whistle around here is the wind
						whipping through my pitiful thatched roof on cold
						nights. I suffer, I do. ");

		t_robe:
			if(Speaker() == 4)
				quote("This old thing? I've had it for years. The secret is to let it 
				 soak in cold water. Keeps it soft, and, I am told, keeps the 
				 colours vibrant.");
			else
				quote("Admiring my robe are you? This robe is a symbol of my rank
						within the Order of the Perigee. Only the most senior members
						are permitted to wear purple, you know.");
		t_note:
			if(Speaker() == 4)
				quote("Unfortunately, the IKOA (Ivory Key of Obsidian Annihilation,
						that is, is still missing, even after we combed the monastery
						last year. I had to stick a note in Helle's lacquer box, 
						reassuring the zombie that all is well. As you and I both know,
						we have no clue what that key does, or how it fits into this
						whole neuroalignment process, but I didn't see any reason to 
						worry old Nibex on that account.");
			else
				quote("My vision is going, but I can still hold a note. Listen to this...
						Laaaa.....");
		t_box:
			if(Speaker()==4)
				quote("Per tradition, I made sure that we stuffed the note into Helle's
						box. No IKOA anymore, but at least some encouragement for the
						zombie, I suppose.");
			else
				quote("I hope that my groceries get delivered by the end of the week.");
		t_recycling:
			if(Speaker()==4)
				quote("The recycler is one of the artefacts that Helle brought from
						the Throne. We can't manufacture bottles anymore, so it is 
						imperative that we conserve the few that we have.");
			else
				quote("Very technical. Priest stuff. Go train for ten years in the
						monastery, and then I'll explain it to you.");		
		t_kitchen:
			if(Speaker()==4)
				quote("I do all the potion prep in the kitchen. There's a juicer
						up in the cupboard, and the bottle recycler is on the floor
						under the cutting board. Sorry I can't offer you any snacks,
						though. I certainly do miss food.");
			else
				quote("My humble kitchen provides for my simple lifestyle. I have 
					  	no doubt that you were hoping for a bite or two as part of 
						your visit, but I assure you that my cupboards are depressingly
						bare.");
		t_bedroom:
			if(Speaker()==4)
				quote("There's not much to see in the bedroom, although I am 
						particularly proud of the mirror which was made, according 
						to legend, by Helle herself.");
			else
				quote("No need to go nosing around other people's bedrooms.");
		t_mob:
			print "~There's a mob of locals down the road. They seem to come out 
					 on curfew days. ";
			switch (Speaker()){
				1: print "Maybe you can go talk some sense into them.";
				2: print "You should go drive them off. Good practice.";
				3: print "Why don't you go eat *their* crops, for a change";
				4: print "Next time we need a zombie, we should call curfew
						   the day *before* and we'd have a ready supply.";
			}
			print "~";
		t_name:
			quote("My name is Laemmli.  L-A-E-M-M-L-I. Don't leave out the ~a~.
					Everyone does.");
		t_aronk: switch(Speaker()){
	     1,2,3:quote("Aronk?  Dreadful stuff, affects the mind, numbs the 
	       reflexes, a vice often abused by the weak-willed. I have no use
	       for the stuff.");
	     4:quote("Rather strong stuff, that Aronk. Always leaves my throat raw 
	       the next day. Probably not good for you at all, but what is, eh?
	       I don't have so much longer to live before I'm pushing up polyps 
	       as they say, so why not enjoy the occasional swig or two?  Helps 
	       with the arthritis at any rate. There's a bottle in the basement
	       next to the preparation slab -- feel free to help yourself.");
	     }
	   t_pelzall: switch(Speaker()){
             1,2:quote("It's a plant, I think.");
	     3:quote("A plant with crimson leaves -- you'd probably find it tasty."); 
	     4:quote("I think they call it ~zombie-away~ at the monastery, but its 
	       technical name is Pelzall Derivative. I prepare it from the 
	       crimson leaves of the Pelzall shrub. Very useful against zombies
	       -- disorients them and drives them away.");
	     }
	   t_curfew:  
	     t_curfew.valid = t_curfew.valid | $$00000111;
	     print "~The 9th of Sixth, closest perigee in over almost one hundred
	       and deety-four years";
	     switch(Speaker()){
	     1:print ", but that probably doesn't mean much to someone like you. You'll
	       want to be getting back to your farm or the village before the 
	       army finds you.~";
	     2:print ", but for the army, a good reason to parade about and act 
	       important.~";
	     3:print "-- not that rabbits can count.~"; 
	     4:print ", and probably our best chance at a neuroalignment in quite some 
	       time. No Emphyteote ever scored as high as Nibex. As for the 
	       curfew itself -- just a convenient way to keep the peasants off
	       the street while the zombie is running amok.~";
	     }
	   t_neuroalignment:  
	     t_neuroalignment.valid = t_neuroalignment.valid | $$00001111;
	     print "~Neuroalignment?  What's wrong with the old alignment? 
	       Get it? A joke. ";
	     switch(Speaker()){
	       1:print "Tada!...Oh well, farmers have no sense of humour.~";
	       2:print "Nevermind. I didn't expect a sense of humour from a 
	         soldier.~";  
	       3:print "Nevermind. Rabbits are not known for their sense of humour.~";
	       4:print "Sorry. That one never gets old. Anyhow, as you should know
	         from your studies, attaining neuroalignment is	the very 
		 purpose of the order -- to screen each generation for the
		 person most likely to survive the process of aligning their 
		 neuromatrix with that of our order's founder, Helle. 
		 If they survive the Ordeal, the imprint only lasts for a day 
		 at most -- that's why alignment is only attempted while the 
		 Throne is within transmission range.~";
	     }
	   t_neuromatrix:  switch(Speaker()){
	     1,2:quote("Sounds like some sort of fetish. I wouldn't know anything 
	       about that.");
	     3:quote("Bunny rabbits should not use such big words.");
	     4:quote("I think you need to brush up on basic transmigretic theory -- 
	       have you been skipping lessons at the monastery? The neuromatrix
	       is the configuration of psychic energy that resides during life
	       in the physical substrate of the brain. Last night, we needed to
	       prepare the farmer's neuromatrix to be receptive; in lay terms, 
	       he needed to be undead. In that state, his neuromatrix is wide 
	       open to possession.");
	       t_undead.valid = t_undead.valid | $$00000111;
	     }
	   t_undead: 
	     t_undead.valid = t_undead.valid | $$00000111;
	     switch(Speaker()){
	     1:quote("Every now and then, the dead seem to get up and walk around.
	       Nobody knows how or why -- maybe it is some sort of magical 
	       curse.");
	     2:quote("Nobody knows why the dead sometimes decide to awaken and
	       walk about. It's probably some sort of magical curse. But 
	       thanks in large part to them, you have a job.");
	     3:quote("I understand that rabbits are amongst the favourite food items
	       of the undead.");
	     4:quote("As you will recall from your basic coursework at the monastery, 
	       the undead are created by the inoculation of suitable subjects 
	       with infectious material, usually saliva obtained from other 
	       undead creatures. The undead make excellent slaves because 
	       they don't require food or sleep, and they don't age. 
	       Occasionally one goes wrong though, and rampages. That is the 
	       price of progress.");
	     }
	   t_monastery: 
	     if(Speaker() ~= 4) print "~The monastery of the Siblinghood of the 
	       Perigee is located on the cliffs overlooking the ocean at the 
	       edge of town. I was raised there until I was about A years 
	       old. ";
	     switch(Speaker()){
	     1:print "Excellent view of the farms from up there.~";
	     2:print "Nice view of the army barracks from the bell tower.~"; 
	     3:print "Thanks to our hounds, rabbits were never an issue there.~";  
	     4:quote("Surely, I am referring to our Order's monastery in the 
	        mountains overlooking the ocean.");
	     }
	   t_helle: switch(Speaker()){
	     1,2,3: quote("A wise woman who founded our order many, many hexanies 
	       ago.");  
	     4:quote("Don't play childish games with me, Sibling. You know very well
	       who Helle is -- the founder of our Order. She who must reawaken 
	       to bring the Age of Ascension.");
	     }
	   t_ascension: 
	     print "~The Age that will come when our order completes its Mission
	       -- an age that will end suffering and bring enlightenment to
	       all. ";
	     if(speaker() ~=4) 
	       print "~";
	     else 
	       print "I suppose that we'll need to look for new jobs thereafter.~";
	   t_mission: 
	     print "~The mission of the Order of the Perigee is to bring about 
	       the Age of Ascension";  
	     if(Speaker() == 4) print " -- to search through the 
	       generations for the one individual whose mind retains enough
	       traces of Helle's wisdom to cross the void and become one with 
	       her";
	     print ".~";
	   t_hexany: 
	     quote("A hexany is 100 of anything, usually years.");
	   t_transmission: switch(Speaker()){
	     1,2,3: quote("I think that transmission refers to the inheritance of 
	       property rights by the first son or daughter of a land owner, 
	       but I'm an Emphyteote, not a bloody barrister.");
	     4: quote("Transmission refers to the projection of a voice through the 
	       invisible medium of the ether, a way to communicate across great 
	       distances very quickly.");
	     }
	   t_throne: switch(Speaker()){
	     1,2,3: quote("A throne is traditionally the seat of a king or queen, 
	       from which they rule. Since this land has neither a king nor 
	       queen, though, I don't see that the word has any relevance at 
	       all.");
	     4: quote("Throne is the physical manifestation of Helle, the heavenly 
	       body that traces ellipses in the ether. When it is near, her 
	       presence can be felt by those who are adequately aligned.");
	     }
	   t_ether: switch(Speaker()){
	     1,2,3: quote("Either you know it, or you don't.");
	     4: quote("Ether is the space that surrounds the world.");
	     }
	   t_groceries: switch(Speaker()){
	     1,2,3:quote("Don't bother me about minutiae, I have too much to keep 
	       track of, numbers and calculations and what not, to be bothered
	       much about foodstuffs and sundries. If you want to talk 
	       nit-picky details, you want one of the Siblinghood's clerks, 
	       not its Emphyteote.");
	     4:print "~I placed a large order of groceries last week";
			if(~~self.visited_by_farmer)
				print ", but those worthless farmers haven't been by yet, and 
						probably won't bother today, since it's a curfew day";
			print "~.";
		  }
	   t_wood: switch(Speaker()){
	     1,2,3: quote("It gets cold at night here in the valley, and this house is
	       none-too-well insulated. When the wind gets blowing off the 
	       mountains, it goes right through these walls. The roof leaks, 
	       there are huge gaps between the door and the floor, and the 
	       walls could stand a good layer or two of mud. The Siblinghood's 
	       coffers are certainly not what they once were. It is a small 
	       miracle that the Emphyteote house has stood here as long as it 
	       has, and that it is still standing today, and perhaps a greater 
	       miracle that someone of my health has managed to survive into 
	       ripe old age, despite being chilled to the very bone each and 
	       every night. It makes my arthritic knees ache to even think 
	       about how I freeze each night on that lumpy bed, beneath a 
	       threadbare blanket. Don't even get me started on what sleeping 
	       on the bed does to my lower back."); 
	     4: quote("In theory, the fireplace can use wood, but it's mainly for 
	       show. One of the mysteries of this house is that it always 
	       maintains its temperature, even when it is cold outside.");
	     }
	   t_perigee: 
	     if(Speaker() ~= 4) {
	       print "~Ah, now there's a bright question for a ";
	       Speaker_print(Speaker());
	         print ". All you need to know is that perigee is the day that 
	         zombies walk the earth. It's also the day you shouldn't be 
		 walking around the countryside, wandering into people's places,
		 and disturbing old priests who need their sleep because they 
		 spend every night sleeping on a decrepit old bed which is 
		 hard as a board, creaks miserably with the slightest movement 
		 and has three legs which are longer than the fourth, making 
		 it tilt to one side and rock like a ship at sea. Well, I'm an 
		 Emphyteote and not a bloody pirate -- I need my sleep, or I can 
		 get irritable. Count yourself lucky that you're catching me on 
		 a good day.~";
	      }
	      if(Speaker() == 4)
	        quote("I suppose that not everyone in the Order gets full training 
		in astronumerology. Very well then, perigee refers to the 
		closest approach of an object in orbit. As you know, the Throne 
		sails through the ether more or less in an elliptical path, 
		although our moons play havoc with the exact nature of its 
		visits, and make the calculations harrowing, indeed. When 
		perigee is approaching, we transplant the polyp of the former 
		Emphyteote to the hill, and if all goes well, soon we have a 
		zombie wending its way through the Ordeal.");
	   t_sixth: 
	     quote("Before Seventh and after Fifth. Not so skilled in higher maths, 
	      eh.");
	   t_farm: switch(Speaker()){
	     1,2,3:quote("Do I look like a farmer or an Emphyteote?  I don't know 
	       anything about farms, except that's where chickens and bread come
	       from. Sure, ask me about astronumerology or transmigretics, and 
	       I can help you out, but farms...not so much. Now I do have a 
	       certain green thumb as they say, and indeed, the herb garden is 
	       my pride and joy. That is, if you can call kneeling for hours 
	       to do weeding any sort of joy. By the time I am done -- and I 
	       have to weed those herbs almost every week -- my knees are rubbed
	       raw and my back aches for at least the next two days. Sometimes 
	       I get a shooting pain down my right side, like I've strained a 
	       muscle. I'm not getting any younger you know.");
	     4:quote("Most of the farms are between here and Orlane; some of the 
	       largest are just beyond the army roadblock that you must have 
	       passed on the way here. I think our most recent subject came 
	       from a dairy farm a half day's walk from here.");
	     }
	   t_village: 
	     print "~Orlane is just down the road a bit to the South -- just walk
	       out the door, and keep going. ";
	     switch(Speaker()){
	     1:print "Given that it's a curfew day, you'll probably have to explain 
	       yourself to the army guards just the other side of the bridge.~";
	     2:print "Your army buddies are probably wondering where you've 
	       disappeared to, better head back.~";  
	     3:print "I'd watch out for the peasants just outside town -- they're a
	       rough bunch, and I hear they like rabbit stew.~";
	     4:print "There are plenty of peasants who don't live in town, though, 
	       and they're not all smart enough to stay tucked away on curfew 
	       days. Be careful of them -- they are dumb as a zombie, but very
	       superstitious. When they form mobs, it can get ugly.~";
	     }
	   t_foodstuffs: switch(Speaker()){
	     1:quote("Just put anything that looks like food into the kitchen 
	       cupboards. Mind that you don't disturb anything else in there.");
	     2:quote("I hope that the army doesn't come knocking at people's doors, 
	       looking for a handout. The cupboard is bare, I'm afraid.");  
	     3:quote("Since you are a hallucinatory rabbit, I guess it wouldn't hurt 
	       to tell you that there are some excellent carrots growing in my 
	       herb garden. And yes, I am aware that carrots are not an herb.");
	     4:quote("I'm afraid that I don't have anything to eat in the house. 
	       Perhaps the most convenient side effect of hosting a polyp, 
	       particularly given the poor state of farm produce these days, is
	       that I no longer have to eat food for sustenance. I can, of 
	       course, and often do indulge in occasional pastries, or the odd 
	       nip of Aronk.");
	     }
	   t_sundries: switch(Speaker()){
	     1:quote("Just put them on the kitchen table. Don't pile it all on the 
	       floor, because then I'll just have to pick it up, and bending 
	       over and lifting like that isn't good for my back, or even more 
	       to the point, for my knees. Lately, I've noticed that when I 
	       bend my knees to get up, or to pick something up, the backs of 
	       my knees hurt for the rest of the day. Not the side with the 
	       knee-cap, but the behind the knee, above the calf. So I try not 
	       to bend my knees too much, but there's not much I can do about it,
	       because I need to bend them to tend the herb garden.");
	     2,3,4:quote("There isn't much I need in the way of worldly possessions; 
	       I am a simple priest, and live a stoic life.");
	     }
	   t_mountain:
	     quote("These mountains entirely surround the town. A lot of people have
	      tried to cross them, but they say it gets hard to breathe when 
	      you climb even halfway up them. Sounds like too much work 
	      entirely.");
	   t_valley: 
	     print "~We're at the upper end of the valley, and the road continues
	       down towards Orlane, where it widens and runs down to the ocean.
	       That's why Orlane has never, in its entire history, been 
	       successfully attacked -- mountains on every side, and a 
	       rock-strewn coast on the other. That's good. I don't like 
	       strangers. ";
	     if(Speaker() == 4) print "In particular, I don't like strangers 
	       prying into the affairs of the Siblinghood.";
	     print "~";
	   t_walls: switch(Speaker()){
	     1,2,3:quote("These walls could stand a coat of paint -- I don't think the
	       Siblinghood has seen to them in at least two or three generations
	       of Emphyteotes. We're definitely low on their priority list. 
	       Probably because we're not complainers, by and large, although 
	       the one right before me, Nibex was his name, was a constant 
	       fountain of whingeing and moaning about every little thing.");
	     4:quote("The walls keep secrets in, and prying eyes out. They serve our 
	       purpose.");
	     }
	   t_roof: switch(Speaker()){
	     1,2,3:quote("If you look up at the thatch from just the right angle, you 
	       can see the sky. Now imagine how it feels to be an old man, 
	       running low on wood, when the snow comes, or we get a mountain 
	       storm. Chills you right to the bone, it does.");
	     4:quote("The roof is designed with strategically placed gaps in the 
	       thatch through which I can make my astronumerological 
	       observations.");
	     }
	   t_siblinghood: 
	     quote("The Siblinghood of the Perigee was established long ago to save 
	     the world from utter disaster, and since we're still around, I would
	     say that we're doing a fine job!");
	   t_disaster:
	     if(Speaker() == 4)
	       quote("Our writings are not very specific on the sort of diaster that 
	       would befall us should Helle's plan not come to fruition, but on 
	       the whole, I'd rather not find out.");
	       else {
	         print "~Just keep your mind on ";
		 switch(Speaker()){
		   1:print "farming. Too many farmers these days wandering 
		     about, thinking about this and that, leaving their farms 
		     to go to pot. The quality of farm produce isn't what it 
		     used to be. Tomatoes, in particular.";
		   2:print "soldiering.";
		   3:print "prancing about and eating carrots.";
	         }
		 print "~";
	       }
	   t_tomato: 
	     quote("Tomatoes these days...the skin is always stretchy and leathery. 
	     By the time they get here from market, the tomatoes are soft 
	     and half-smushed. A lot of them have marks or dents. The flavour 
	     isn't what it used to be either, much more acidic, and that plays
	     havoc with my stomach. I can eat a tomato, and for the rest of the 
	     day, I have the worst heartburn. I probably have ulcers, too.");
	   t_guard: 
	     switch(Speaker()){
	     1:if(self.visited_by_soldier)
				quote("I saw one of the army guards earlier. No doubt, the rest
						of the army is off somewhere, keeping the townsfolk safe 
	       			from zombies.");
			else
				quote("I haven't seen any army guards lately, but that's because 
						I've been so busy with my duties as Emphyteote. I just haven't
						had the chance to get any fresh air lately.");
	     2:quote("You and your comrades are a constant source of comfort in this 
	       topsy-turvy world of ours."); 
	     3:quote("Don't worry -- the guards are out there to keep zombies away
	       from the town, not to guard anyone's carrots. You're safe.");
	     4:quote("I find it ironic that these soldiers swagger with authority and 
	       self-righteousness when, in fact, the army itself was founded by 
	       our Order, and continues to exist only because of our political 
	       manipulations.");
             }
	   t_townfolk: 
	     print "~The townsfolk are, and pardon me if this does not seem to 
	       be earth-shattering news to anyone, the folks that live in 
	       town";
	     switch(Speaker()){
	     1:print ". Lucky for you, they need to be fed.";
	     2:print " -- the very people that you must protect from themselves.";  
	     3:print " -- superstitious people. Who like to carry lucky charms...";
	     4:print". They are like cattle, but remember that somewhere amongst that
	       breeding stock could be the candidate for a successful 
	       alignment.";
	     }
	     print "~";
	   t_equipment: 
	     switch(Speaker()){
	     1,2,3:quote("You needn't concern yourself with the nature of my 
	       equipment. It is far beyond your mental capacity to understand.");
	     4:quote("The juicer is in the kitchen, the heavy-duty equipment is in 
	       the basement.");
             }
	   t_herb: 
	     print "~These aren't your typical herbs for roasting chickens, my ";
	     switch(Speaker()){
	     1:print "rustic";
	     2:print "martial";
	     3:print "lapine";
	     4:print "ecclesiastic";	
	     }
	     print " friend -- they are potent medicines. ";
	     switch(Speaker()){
	     1:print "Some more toxic than others.";
	     2:print "Not the sort of thing to play around with, I'm afraid.";
	     3:print "In point of fact, some of them would serve for nicely for
	       preparing jugged hare.";
	     4:print "It is from these herbs that one prepares potions.";	
	     }
	     "~";
	   t_garden: 
	     quote("The herb garden is just outside the house. It is the finest herb
	      garden in the valley, and likely the only one of its kind.");
	   t_coast: 
	     print "~I wouldn't know much about the ocean since I was raised by 
	     the Siblinghood in the mountains, but I do know that ships in 
	     Orlane harbour can pick their way out carefully between the cliffs
	     and the coastal rocks, and gain access to the ocean, and thence to 
	     far away lands. I have no use for the ocean, or boats, though. 
	     Everything I need comes from ";
	     if(Speaker() == 1) print "your"; else print "the"; 
	     " farms in the valley.~";
	   t_emphyteote: 
	     switch(Speaker()){
	     1,2,3:quote("I became Emphyteote nigh on thirty-cee years ago -- I keep up
	       the house, tend the garden, maintain the grave, and so on. When I
	       got here, the last Emphyteote, Nibex, was nearing his retirement 
	       and had left things a mess -- he had accumulated all manner of 
	       bric-@`a-brac in the house, the herb garden was a mess of stringy 
	       weeds, and he had let his ...official duties... slide.");
	     4:quote("It didn't help that he had a taste for Aronk, and in his later 
	       years, would often be deep in his cups, while I carried out his 
	       duties.");
	   }
	   t_duties: 
	     print "~You don't need to be concerned with anyone's official 
	       duties, except your own to ";
	     switch(Speaker()){
	     1:print "deliver my groceries. And to keep my tomatoes from getting 
	       squashed in the process.~";
	     2:print "keep the townsfolk from wandering around.~";
	     3:print "fertilise my garden.~";
	     4:print "the Order.~";
	     }
	   t_nibex: 
	     print "~Actually, Nibex is out back right now. That's him in the 
	       grave -- he yielded his spirit thirty-oct years ago. ";
	       !TODO fix library word-number recognition to work with hex
	     switch(Speaker()){
	     1:print "They say he was born a farmer, just like you.~";
	     2:print "They say that he was always intrigued by things military, 
	       and that he had the mind of a general.~"; 
	     3:print "I would appreciate it if you and your family could abstain from
	       consuming the flowers that I plant every so often at the grave 
	       site.~";  
	     4:print "Nibex was the golden boy of the previous generation -- although
	       I only knew him as a crusty old curmudgeon. I had the honour of 
	       plucking the present polyp that grew from his grave and planting 
	       it on the hill this summer. I'm very tempted to go up there and
	       peek at how things are getting on, but I threw my back out last 
	       night.~";
	     }
	   t_transmigretics: 
             if(Speaker() == 4) quote("The science of transferring souls from one 
	       neuromatrix to another -- the ultimate example being our attempt 
	       to restore the neuromatrix of Helle.");
	     else{
	       print "~As if a ";
	       switch(Speaker()){
	         1:print "simple farmer";
	         2:print "dull-witted foot soldier";
	         3:print "figmentary bunny";
	       }
               print " would have the slightest use for or comprehension of such science!
	       Such knowledge is the domain of the Siblinghood of the Perigee, 
	       alone, and you would do well not to dabble in such mysteries.~"; 
	     }
	   t_astronumerology: 
	     if(Speaker() == 4) quote("Astronumerology allows us to predict the coming
	       of a Perigee, and therefore when, in each generation, to 
	       transplant the polyp to the hillside so it can grow in time for 
	       the event.");
	     else {
	       print "~Astronumerology is the science of divining and controlling
                 the future through arcane mathematics applied to heavenly bodies.
	         I am sure that it is the sort of subject not taught in ";
	       Speaker_print(Speaker());
               print " school in any event. Hah!~";
	     }
	   t_zombie: 
	     print "~Essentially, a zombie is a hollowed-out shell of a living 
	       being, and unless they're possessed by some outside agency, 
	       they're not a threat at all, just landscaping really. My 
	       advice: avoid them if you can, and watch out for their drool. ";
	     if(Speaker() == 4) {
	       print "The drool is a disease vector rendering anyone 
	       it contacts undead.";
	       t_undead.valid = t_undead.valid | $$00000111;
	     }
	     print "~";
	   t_possession: 
	     if (Speaker() == 4) quote ("Possession is when a strong-willed entity can 
	       force its essence into the receptive neuromatrix of a host. 
	       For example, when we prepare a zombie to receive the residual 
	       essence of a polyp, or when the zombie subsequently commandeers
	       the body of other hosts as needed for the Ordeal");
			else {
				if(Speaker()==1 && TomatoGood.shown == true){
					quote("Well, fair is fair. Possession is when one being takes mental 
	        				control of another being. Rare as hen's teeth though, don't 
	         				worry about it.");
					"";
				}
				else {
	       		print "~Well, as they say, possession is F/10ths of the law. But I'm
	       	  		afraid that we're now delving into matters that are far too 
	       	  		arcane and technical for a mere ";
	       		switch(Speaker()){
	         			1:print "farmhand.  When you have mastered growing reasonably 
							tasty tomatoes, come back and we'll chat";
						2:print "second lieutenant";
						3:print "imaginary bunny friend";
	       		}
	     		}
			}
			".~";
	   t_mirror: 
	     quote("The mirror came with the house -- it's ancient. The only thing I
	      was ever told about the mirror is that the decorative ribbon 
	      shouldn't be disturbed. Don't know why, perhaps just a 
	      superstition.");
	   t_ribbon: 
	     quote("I'm sure that the red ribbon on the bedroom mirror had some 
	      ceremonial value at some time in the past, but the significance 
	      of the ribbon has been lost over the generations.");
	   t_rabbit: 
	     print "~There are pesky rabbits all over the place, bloody nuisances
	       they are. They get into everything. ";
	     if (Speaker() == 3) "Sorry to say so, my furry hallucination, but 
	       I am none too fond of your sort.";
	     print "~";
	   t_polyp: 
	     switch(Speaker()){
	     1,2,3:quote("Now there is a word you don't hear every day. There are all
	       kinds of strange plants and fungi in the mountains, but I
	       wouldn't know anything about that, being a simple priest and 
	       Emphyteote.");
	     4:quote("Each generation, Emphyteotes are lain to rest in the grave out 
	       back. Within a few years, a polyp sprouts from the grave, and it 
	       contains their essence. Not their full personality, mind you -- 
	       that is accident -- but their very substance. As Perigee 
	       approaches, each Emphyteote transplants the polyp of their 
	       predecessor to the hill in preparation for the Ordeal. Once the 
	       polyp blossoms and attains consciousness, it remains viable for 
	       about another day or two, and it is during this period that the 
	       Ordeal must be completed, or we repeat the cycle, build a new 
	       door, get a new zombie, et cetera, ad infinitum until we attain 
	       the alignment. Actually, since we hope that it will work one 
	       day, I should say ad finitum...");
	   }
	   t_frog: 
	     quote("Good eating, with a little garlic.");
	   t_arthritis: 
	     switch(Speaker()){
	     1,2,3:quote("My arthritis is worst in the morning, particularly after I 
	       get out of bed. There's not much to do about it, except to move
	       around and loosen up. My left ankle sometimes locks up entirely.
	       Mostly I feel it in the ankles, knees and back. My hands also 
	       hurt, particularly after gardening or a long period of writing.
	       My ankles swell in the evenings, although I think that has more 
	       to do with spending too long on my feet than with arthritis per 
	       se. On the other hand, the swelling in my knees tends to come and 
	       go, and it does seem to correspond to my bouts of arthritic pain.
	       My toes, particularly the large toe on either side, are also
	       arthritic, but I think that is more a matter of gout. I'm prone 
	       to gout attacks, you know, which is why I tend to avoid cheese. 
	       Cheese is probably responsible for gout, you know. If you have 
	       ever seen cheese being made, you would not trust it either.");
	     4:quote("I'm not sure it helps with the gout, but a good shot of Aronk 
	       in the evening seems to make the arthritis disappear.");
           }
	   t_knee: 
	     print "~You'll notice that there are no stairs in the house, which
	       is a blessing when you've got knees like mine. Going up stairs, 
	       for instance on the rare occasion that I get to the monastery, 
	       is painful, but coming down them is far worse because I have to
	       put my full weight on each knee. By the time I get down, my 
	       entire leg is burning and my knees are swollen and throbbing.";
             if(Speaker() == 4) print " Now, the ladder to the basement is 
	       another story entirely. For some reason, it doesn't seem to 
	       bother me as much.";
	     print "~";
	   t_back: 
	     switch(Speaker()){
	     1,2,3:quote("My poor old back is bent and painful, from a hard life of 
	       labour in service of the Order and the common people.");
	     4:quote("I wrenched my back something awful last night, holding the  
	       farmer down on the slab while the rest of the Siblinghood tied him 
			down to be turned into a zombie. I'm getting too old for this!");
	     }
	   t_basement: 
	     switch(Speaker()){
	     1,2,3:quote("The ground here is too moist for a basement, particularly 
	       in the springtime.");
	     4:quote("The trapdoor to the basement is just under the chair.");
	     }
	   t_slab: 
	     if (Speaker() == 4) quote("We just used the slab last night, it's in the 
	       basement next to the transmitter.");
	     else
	     self.not_a_clue();
	   t_transmitter: 
	     if (Speaker() == 4) quote("The transmitter is an ancient piece of 
	       equipment, and it is said that when alignment is achieved, the 
	       candidate will be able to commune with Helle through it.");
	     else
	     self.not_a_clue();
	   t_alignment:
	     quote("I think you mean neuroalignment, technically.");
	   t_calculations:
              if (Speaker() ==4) quote("Yes, the astronumerological calculations
	        required to accurately track the orbit of the Throne despite 
		gravitic perturbations and variable ethereal weather.");
              else quote ("I'm too old and infirm to carry out any other duties,
	        so I spend my time watching the stars and the moons, and 
		reckoning the proper times for feast days such as Perigee. 
		It is the little I can do for the Order given the deteriorating 
		condition of my sight and hearing, the pain I experience in my 
		back and knees from even the lightest manual labour, and the 
		general weakness that sometimes overtakes me in the afternoons 
		and evenings.");  
	   t_bed:
	     print "~My bed is stiff as a board. I think it must date back 
	       hexanies of hexanies, to the time that this cottage was 
	       originally constructed. ";
	     if (Speaker() == 4) print"That is no joke -- the bedroom furniture 
	       really does date back to the time of the founder of our Order.";
	     print "~";
	   t_grave:
	     print "~The grave is a single plot, out back. We Emphyteotes are 
	       strongly motivated to see to its upkeep since we know that one 
	       day we will end up there, in the care of our successors.";
	     if (Speaker() == 4) print " It gives me a bit of a chill down my 
	       spine to think that my former instructor, or at least some aspect
	       of him, is once again amongst us.";
	     print "~";
	   t_drool:
	     print "~I find drool repulsive. Dogs, babies, zombies, you name
	       it.";  
	     if (Speaker() == 4) {
	       print "In particular, watch out for the saliva 
	       of the undead which can convey their condition to the living. 
	       If a zombie starts spitting at you, run. Second thought, even 
	       if the zombie doesn't spit at you, run.";
	       t_undead.valid = t_undead.valid | $$00000111;
	       }
             print "~";
	   t_house:
	     quote("Since the founding of the Order of the Perigee, this house 
	       has stood upon this spot, and one member of the order, the 
	       Emphyteote, has lived here and maintained it.");
	   t_ordeal:
             if (Speaker() == 4) quote ("The Ordeal is the means of bringing 
	       about Alignment. Through the process, a candidate may become 
	       attuned to Helle's neuromatrix. Of course, it hasn't worked yet,
	       or we wouldn't be here chatting about it, but I think that Nibex,
	       clever old fellow that he was, might just pull it off.");
	     else {
               print "~You want to know what an ordeal is?  I shall tell you. 
	         Finding a good pair of shoes is an ordeal. Why?  Because I have
	         extra wide feet and no arch. Try walking to town and back here, 
	         all the way up and down the valley in tight shoes with no 
	         support. To top it off, I have gout in my big toes, and bunions
	         to match. There is not a single, competent cobbler in all of
	         Orlane.";  
	       if(Speaker () == 1 or 2){
	         print " If you ever tire of being a ";
	         Speaker_print(Speaker());
	         print " and you have even the slightest clue when it comes to 
		  footwear, I implore you to trade in your ";
		 switch(Speaker()){
	           1:print "ploughshare";
		   2:print "sword";
	         }
		 print " and to consider a change of career.";
	       }
	     }
	     print "~";
	   t_colour:
	     print "~I never realised how important colour was until I began to
	       lose my sight.";
	     if(Speaker() == 4) print ". In working with herbs, I have managed
	       to get by thus far because I recognise the shape of flowers and 
	       leaves, but more and more, the world is drifting towards 
	       monochrome. It is better outside, in the light of the sun, 
	       but only slightly. Maybe it's some strange part of being
	       an Emphyteote. I remember Nibex saying that he had the same
	       problems in his later years.";
	     print "~";
	   t_potion:
             print "~When I was a kid, before I was raised by the monastery, 
	       I used to love hearing stories about magic and potions, like 
	       love potions or potions to make you strong enough to lift a 
	       cow.";
	     if(Speaker() ==4) print " I wouldn't be surprised if my interest 
	       in such things, and my general ability to solve puzzles of all 
	       sorts, were what led the Siblinghood to test me.";
	     print "~";
	   t_shackles:
	     switch(Speaker()){
	       1,3:quote("I think that shackles is a disease contracted by cows
	         	that have eaten too much of a certain kind of clover.");
	       2:print quote("Sorry, shackles are more in your line of work than
	         	mine."); 
	       4:quote("I think that getting out of the shackles is actually 
	         	the first part of the Ordeal. Unfortunately, the Ebony Key 
		 		of Obsidian Annhilation which makes them disappear, and 
		 		therefore frees the zombie --  was lost long ago. Clever 
		 		zombies seem to find ways around this, though.");
             }
		t_ivory_key:
			switch(Speaker()){
				1,2,3	: quote("Eh? If you happen across one, be sure to
									show it to me, as it might be a collector's item,
									and I could probably get you a good price.");
				4		: quote("Sigh.  Yes, the Ivory Key of Obsidian Annihilation.
									Lost, or more likely stolen from our Order hexanies
									ago.  We know that it is somehow involved in the
									Ordeal, and many suspect that its loss explains our
									failure to attain alignment.");
			}
	   t_coordinate:
	     switch(Speaker()){
	     1,2,3:self.not_a_clue();
	     4:quote("Coordinates, at least as used by our Order, are a 
	       mathematical means of expressing location on the surface of a 
	       spherical object, namely, this planet.");
	     }
	   t_juicer:
	     switch(Speaker()){
	     1,2,3:self.not_a_clue();
	     4:quote("That's how we make potions: herbs go in one end, 
	       potions come out the other. It is a great convenience.");
	     }
	   t_cat:
	     if(Speaker() == 4) quote ("It is said that Helle brought with her
	       a cat which was many more times intelligent than your average 
	       cat, and that it dwells inside the ordeal and will provide 
	       assistance to those undergoing alignment.");
	     else {
               print "~I think one of ";
	       switch (Speaker()){
		 1:print "your neighbours";
		 2:print "the farmers";
		 3:print "my neighbours";
	       }
	     print " down the road has a fat tabby cat. Nasty little 
	       creature.";
	     if(Speaker() == 3) print " To its credit, though, it does hunt
	       down vermin. You know the sort I mean..."; 
	     print "~";
	     }
	    default:
	    print (quote) random(
          "Ah yes, quite, rather. Sorry, what were you saying?",
	      "Hmmph. I suppose. Or not. Pardon. Lost my train of 
	       thought there for a moment.",
	      "Come again?  Didn't quite catch that. Bad hearing you know.",
	      "Eh?  You know, at my age, some people would be repetitive. Now,
	       what exactly was it that you were going on about?",
	      "Speak up. Hearing isn't what it used to be. Or maybe it's 
	       memory. What were we talking about?",
	      "I wouldn't really know.",
	      "Ah yes, yes.",
	      "Often wondered about that myself, I have.",
	      "You are most inquisitive!",
	      "Sometimes the most interesting questions are those that aren't
	       asked. Sometimes the converse.",
	      "That's a good one, let me note that down for later.",
	      "I wonder... Oh, are you still here?",
	      "I have no real opinion on that.",
	      "I wouldn't care to speculate. Speculation is something that
	       serves eggs well as camouflage, but is a poor endeavour for
	       one of my Order.",
	      "You ask the most thought-provoking questions.",
	      "Indeed.",
	      "Yes, one would wonder about that, wouldn't one?",
	      "I might well ask you the same. But this gets us nowhere."
	    );
	 }
         "";  !rtrue needed to suppress default.
        Tell:
		if(~~self.awake)
			rtrue;
	  if(second ofclass Topic){
	    chosen=TellChoices(self);
	    if(chosen == -1) rtrue;
	    print "The old man replies, ";
            switch(second){
	      t_aronk:
                switch(chosen){
                  0: if(Speaker() == 4)
		       quote("No need to be judgemental."); 
		     else {
		       print "~You are a fine, upstanding young ";
	               Speaker_print(Speaker());
		       print " and an excellent role model for today's 
		              youth!~";
                     }
		  1: if(Speaker() == 4) 
		       quote("How true, how true. Just don't let the peasants
		              hear you say so.");
		     else
		       quote("I pity those who would think so.");
		  2: quote("Really?  I wonder how it got there!");
		  3: if(Speaker() ==4)
		       quote("The next polyp will not germinate until after I 
		              am dead for some time, but its growth has affected
			      my vision and gives me a constant headache. The
			      Aronk is the only thing that provides relief.");
		     else
		       quote("I assume you have better things to do than to 
		              raid my bedroom and act shocked!");
		  4: quote("Cheers!");
		  5: quote("Show me?");
		  6: if(Speaker() == 4)
		       quote("What a shame.");
		     else
		       quote("It will no longer tempt you.");
		}
              t_pelzall:
                switch(chosen){
                  0:quote("Self defense, I'm afraid. Sorry, old friend.");
		  1:if(Speaker() == 4)
		      quote("Just leave it in the kitchen, I'll juice 
		        it later.");
		    else
		      quote("Please don't touch anything else in the garden.");
		  2:quote("More likely the work of rabbits");
		  3:if(Speaker() == 2)
		    quote("Would you mind, then, telling them to forage 
		      elsewhere?");
		    else
		      quote("I need to get a hound.");
		}
              t_curfew:
                switch(chosen){
                  0:self.pre_spray();
		    quote("Then I am sure that you will understand if I spray 
		    you with this...");
		    self.post_spray();
		  1:quote("Obviously. My calculations are beyond question.");
		  2:quote("What you think does not matter a whit. I know that
		           it is curfew day, because I calculated the 
			   Perigee.");
	        }
	      t_neuroalignment:
		switch(chosen){
                  0:print"~I shouldn't have brought the subject up with a ";
		    switch(speaker()){
		      1:print "farmer";
		      2:print "soldier";
		      3:print "rabbit";
		      4:print "novice";
		    }
		    print "-- forget about it.";
		  1:if(Speaker() == 4)
		      quote("Extremely; which is why we have spent so many
		             generations trying to get it right.");
		      else
		        quote("Yes, more than I can tell you.");
		  2:if(Speaker() == 4)
		      quote("If it troubles you, I suggest that you discuss
		            the matter with your superiors at the monastery. 
			    There is no leaving the monastery, but other 
			    positions are available.");
	             else
		       quote("You are not qualified to pass judgement on that 
		              matter.");  
		  3:print "~In a sense, we are becoming neurally aligned right 
		          now, by having a conversation. You are learning my 
			  thoughts and I yours, and each of us is developing 
			  a mental model of the other. This is a trivial and 
			  supremely inefficient example, though. And thank 
			  heavens for that, as I have no interest in becoming 
			  neurally aligned with a ";
	            switch(speaker()){
		      1:print "peasant";
		      2:print "lackey of the army";
		      3:print "carrot-stealing rodent";
		      4:print "novitiate";
		    }
		    print ".~";
	        }
	      t_undead:
	        switch(chosen){
		  0:quote("I know what you mean. I'm also a bit under the 
		    weather.");
		  1:if(Speaker() == 4)
		      quote("He is making fast progress!");
		    else
		      quote("Brilliant. That is... brilliant that you managed to
		             escape!");
		  2:if(Speaker() == 4)
		      quote("Aside from the undead workers in the monastery
		             and our little project on the hill, I don't think
			     you're likely to encounter any.");
	            else
		      quote("I could, but then I'd have to... umm... no.");
	        }
			t_mob:
				switch(chosen){
					0: quote("Rabble.  Peasant dregs.");
					1: print "~Yes, they can be dangerous, I suppose. ";
						switch(Speaker()){
							1:print "I'm half-surprised that you aren't down there
									  with them";
							2:print "They shouldn't be much of a match for a military
									  professional such as yourself, though";
							3:print "I wouldn't think they'd even take notice of a little
									  rabbit. They're only interested in hunting down
									  any zombies that might wander towards town";
							4:print "Their pitchforks and torches are poor weapons";
						}
						print ".~";
					2: print (quote) "Hah. They would run at their own shadow.";
					3: print "~They have probably run off, or maybe ";
						switch(Speaker()){
							1:print "something evil ate them";
							2:print "the army drove them away";
							3:print "they decided to go hunting for their dinner";
							4:print "the zombie got them. If so, we'd better call out
									  our siblings from the monastery and have them 
									  round up another batch of zombies before they wander
									  into trouble";
						}
						print "!~";
					4: print "~Good work. ";
						switch(Speaker()){
							1:print "Maybe some of you farmers are useful after all";
							2:print "Nice to see our taxes well spent";
							3:print "You? They were afraid of you? Well, why not. They
									  are peasants, after all";
							4:print "That's the spirit. Too many in our Order lack that
									  sort of spunk";
						}
						print ".~";
					5: self.pre_spray();
		    			quote("Indeed.  Here is your reward...");
		    			self.post_spray();
					6:  self.pre_spray();
		    			quote("Try a snuff of this...");
		    			self.post_spray();
				}
			t_ribbon:
				switch(chosen){
					0: quote("Why, thank you. You obviously have refined tastes.");
					1: quote("Helle's toenails! That was ancient! Oh well, nothing we
								can do about it.");
					2: self.pre_spray();
						quote("What did the little lacey ribbon ever do to you?");
						self.post_spray();
				}
			t_mirror:
	        switch(chosen){
		  0:if(Speaker() ==4)
	  	      quote("Interesting. There are many aspects of the 
			     founder's technology that we don't understand. As
			     soon as my back stops spasming, I will examine
			     this portal you have found.");
		    else
		      quote("I would thank you not to go snooping around my 
		             house. I am sure that the ribbon can be replaced, 
			     so no real harm done. As for falling through the
			     mirror - that sounds like a foolish children's 
			     story. You are obviously delusional, and for your
			     sake, I would not mention it to anyone, or they
			     will lock you away.");
		  1:quote("That you are an ill-mannered lout and should leave
		           my house immediately before there are repercussions 
			   for your vandalism.");
		}
              t_rabbit:
	        switch(chosen){
		  0:if(Speaker() == 3)
		      quote("I hope you told it to stay away from my house.");
		    else
		      quote("I hope you chased it away.");
		  1:self.pre_spray();
		    quote("Well, yes. First, I 
		           need to tell you that it is 
		           prohibited for me to give you any assistance in 
			   completing the ordeal. Second, since you have
			   revealed yourself to be the zombie, I have no 
			   choice but to...");
                    self.post_spray();
		  2:quote("Me too, particularly stew.");
		}
            }
	    "";
	  }
          print_ret (The) self, " expresses mild interest.";
	  !TODO: more generic phrases
		Answer: 
			if(~~self.awake)
				rtrue;
			switch(noun) {
            t_yes,t_no: 	quote("I'm sure you're right.");
            t_hello:		if(self.greeted){
								quote(random(
									"I think we've been through this.",
									"You are being repetitious.",
									"Do you have memory problems?"));
								"";
							}
							else {
								self.greeted = true;
								if(actor == rabbit)
									quote(random(
										"Ah, an imaginery bunny. Well, why not. 
										 It was a late night, and I had way too
										 much Aronk. This is what I get.",
										"A talking rabbit? My mind is definitely
										 slipping. Well, you might as well make
										 yourself at home, my hallucinatory little
										 friend.",
										"Um. Hello. Rabbit.",
										"Hi. You know, you look a lot like a rabbit.",
										"Greetings, my figmentary friend."
											));
								else
									quote(random(
										"Hello.",
										"Greetings.",
										"Hi."));
								}
            t_goodbye: 	quote(random(
								"Come again soon.",
								"Be seeing you.",
								"Ciao.",
								"Have a nice day. Don't get eaten.",
								"Sure, you go on. I'll just stay here.",
							));
			  default:		print "",(The) self," ", (string) 
							random(
								"doesn't seem to have heard you",
								"is only half paying attention 
								 to what you are saying",
								"seems absorbed in his own thoughts",
								"seems distracted",
								"looks like he has no clue what you just said",
								"almost fell asleep just then"),".";
            }
			 "";
	Show:
		if(~~self.awake)
			rtrue;
		switch(noun){
			ShacklesKeyBox:
				if(Speaker() == 4){
					print "Ah, it looks like Nibex is up and about!  He must have 
					dropped the box. We had better hang onto it in case he 
					doesn't attain alignment. Every perigee it's always a 
					scavenger hunt every time the zombie gets loose.";
				}
				else
					print "~What a lovely little box!  It was just last week that
					the Orphanmeister of Orlane mentioned to me that she might
					have dropped a box of that sort. If you'd like, you could 
					just leave it on the table and I could return it to her when
					she visits later this week."; 
				print "~";
	   ShacklesNote:
	     if(Speaker() == 4)
	       quote("I just put this in the box yesterday!   Nibex obviously
	         isn't taking much care about dropping things here and there.");
             else {
	       print "~What beautiful penmanship, but of course, as an ";
	       switch(Speaker()){
	         1: print "agrarian";
		 2: print "infantryman";
	       } 	 
	       print " you would have had no opportunity to learn your letters. 
	       If only I could find my glasses, I could read it for you. 
	       Perhaps it is a letter for someone. Why don't you leave it on 
	       the table, and I'll see that it is properly delivered to its 
	       rightful recipient. People only write about important matters, 
	       so it wouldn't do at all to lose it.~";
	     }
	   PriestRobe:
	     quote("Ah, the vestments of a priest of the Order of the Perigee. 
	       Wherever did you get them?  I wouldn't want you to get in trouble
	       with the Law (which, as you know, is quite explicit about the 
	       possession of Church property by anyone outside the Order). 
	       Rather than have you risk your neck and bring it back to the 
	       monastery, you can just leave over there on the table before 
	       you leave. Hmm. It could use a washing.");
	   Skeleton:
	       self.pre_spray();
	       quote("Why...that's...Nibex!  Who would...how dare...Oh, I see. 
	       Actually, there is some element of irony here. 
	       Nonetheless, can't be too careful... ");
	       self.post_spray();
	  Rabbit:
			if(actor ~= rabbit && rabbit.current_hp > 0){
				quote("My vision isn't very sharp, but I think it's still moving. 
						Better hit it again if you want to make sure your dinner 
						doesn't hop away.");
				"";
			}
			if(actor == rabbit){
			   quote("Proud of yourself are you?  You little furry rat.");
				"";
			}
	     	print "~Ah, you've nabbed the little thief, have you?  Well, you 
	     			can take him back to ";
	     	switch(Speaker()){
	       	1:print "your family";
	       	2:print "the barracks";
	       	4:print "the monastery"; 
	     	}
	     	print " for dinner, if you'd like.";
	     	if(Speaker() == 4) 
	       	print" As an Emphyteote, I of course, have no 
	         	stomach for it.";
	     	print "~";
	  JadeFrog:
	    quote("That looks a lot like a jade frog. It might make a nice
	      paperweight or a door stop. If you had two, you could make 
	      bookends.");
	  TomatoGood:
	    quote("Now, that is a nice tomato!");
	    TomatoGood.shown = true;
	  TomatoBad:
	    quote("Remove that fetid, shriveled abomination from my sight."); 
	  Carrot:
	    quote("Looks like an ordinary carrot to me.");
	  Pitchfork:
	    switch(Speaker()){
	      1:quote("I would thank you not to bring your farm implements 
	          into the house.");
	      2:quote("A pitchfork?  I would think that a military professional
	          such as yourself would not be caught dead with such a 
		  plebian implement.");
	      4:quote("Thank you, sibling, but I don't need one. The herbs are
	          delicate, and the pitchfork would stir up the soil too much.");
	    }
	  MagickGrape:
	    if(Speaker() == 4)
	      quote("If it is part of the mechanism of the ordeal, it will find
	        its own way back when the time comes.");
	    else
	      quote("That is very odd. I have never seen its like.... and I am, 
	        not immodestly, the foremost botanical expert on this side of the
	        ocean. I wonder if you wouldn't mind leaving that fruit on the 
	        table in the kitchen, and I can give it a proper examination 
	        later, when my back feels better.");
	  FloatingKey:
	    if(Speaker() == 4)
	      quote("Looks like it actuates a high-tech lock, nothing of recent 
	        manufacture -- it must be part of the ordeal. Give it a day or 
			two, and if Nibex doesn't align, it will revert to wherever it 
			came from.");
	    else {
	      print "~This is a rather intricate looking key, and that implies
	        a correspondingly intricate lock mechanism. If I may 
		extrapolate one step further, such a device would only be used
		to secure something either valuable or powerful, and, if I may
		press this line of reasoning even further, it is likely that
		this item belongs to someone of great wealth or power. Now
		imagine, that the owner of this key found it in the hands of a
		common ";
	      Speaker_print(Speaker());
	      print ". Imagine further that the item of great value was 
	        missing, as well it might be. Just how might that ";
	      Speaker_print(Speaker());
	      print " be treated? I would not care to imagine, because I am as 
	      squeamish as I am shortsighted.~"; 
           }
		magic_key:
			if(Speaker() == 4){
				print  "~My eyes are none too sharp, but that looks an 
						awful lot like the descriptions that I've read of the
						Ivory Key of Obsidian Annihilation. ";
				if(magic_key.material == 0)
						print "I had always imagined that it was a
								bit whiter, though. Well, no matter. ";
				print "It's a shame that
						we didn't have that a day ago -- it would have given
						our zombie a leg up on the Ordeal. You'd better safeguard
						it and bring it back to the monastery for storage 
						until the next Perigee.~";
			}
			else
			  quote(	"That is a beautiful key. I am sure that the monastery 
						 would be pleased to purchase it for their exquisite
						 collection. Be sure to drop by the monastery, and 
						 tell them that Laemmli sent you."); 
		pillow:	
			switch(Speaker()){
				1:quote("I'd appreciate it if you could take that back to your
							farm and have it stuffed with something soft.");
				2:quote("Oh? Taking a nap while on duty?");
				4:quote("I'd appreciate it if you could ask the monastery
							for a new pillow. As you can see, that one probably
							dates back a few Emphyteotes.");
			}
		spectacles:
			quote("In fact, I'm looking for my glasses. I'm not sure
					where I set them down, though.");
		cluecat:
			print "The old man casts a suspicious eye at the cat and
				remarks, ~I don't fancy cats. At best, they're good
				for beating.~^^With an excited look in its eyes, the cat
				 whispers in your ear,
				~Yes, yes. I like this fellow. Beat me! Beat me!~";
		sandwich:
			quote("I'm not a big fan of cucumber, actually.");
		farmgarments:
			quote("They look like filthy rags. I'd get rid of them, they may
			be infested.");
		default:
			if(noun ofclass Herb){
				if(Speaker() == 4) 
					quote("Sharp eye, sibling. That is, in point of fact, an 
					excellent specimen. But, this isn't the monastery, and I don't
					want to talk your ear off about potions. Heavens knows I 
					could.");
				else {
					print "~Ah, interesting - this is no mere herb, but a medicinal 
					herb like those in my garden. Very potent, and not the sort of 
					thing a ";
					Speaker_print(Speaker());
					print " should be touching. Indeed, to be on 
					the safe side, you should put it down on my table and then 
					wash your ";
					if(Speaker() == 3)
						print "paws";
					else
						print "hands";
					print ". I don't have any water here, but there is a 
					river under the bridge to the east.~";
				}
				"";
			}
			if(noun ofclass Potion && 
			noun.index == 4){
	    		switch(Speaker()){
	      			1:	quote("I have seen many a 
						farmer fall prey to the vice of 
	          			Aronk, and I urge you to put 
						it aside -- just leave it here
		  				-- and devote yourself to a 
						clean and moral life.");  
	      			2:	quote("Drinking while on duty? 
						Tut, tut, that won't do at all.
	          			You can leave it on the table, 
						and I will dispose of it 
		  				later.");
	      			4:	quote("Looks like a fine vintage, 
						sibling!");
	    		}
				"";
			}
			else {
		 		print (string) random (
					"Meh.",
					"I've seen better.",
					"Have you see my glasses around?",
					"Here you go again.",	
					"Let's see.  I had my spectacles this morning.",
					"Not bad.",
					"What else have you got?",			
					"I wouldn't bother you about this.",
					"Very nice, but let's keep things in perspective."
	   			);
			}
	  	}
	  "";
	],
	orders [;
		Whatis:
			<<ask self noun>>;
		Whereis:
			if(~~self.awake)
				rtrue;
			switch(noun){
				t_aronk:
					if(Speaker() ==4)
						quote("I had some in the bedroom yesterday evening.");
					else
						quote("How would I know?");
				t_pelzall:
					quote("I'm not sure. It grows here and there.");
				t_monastery:
					if(Speaker() ==4)
						quote("You know very well, Sibling.");
					else
						quote("In town, on a hill overlooking the ocean.");
				t_throne:
					if(Speaker() ==4)
						quote("Throne is just above the plane of the 
								ecliptic, nearing perigee, and within
								transmission distance.");
					else
						quote("Perhaps somewhere in Orlane. I don't know.");
				t_ether:
					quote("It is all around us, of course.");
			
				t_groceries:
					quote("The groceries didn't come today, probably
							because today is curfew.");
				t_undead:
					quote("They could be anywhere. Best to be prepared
							and wear some raingear.");
				t_farm:
					quote("There are a number of farms just outside town;
							most of them are a bit off the beaten path.");
				t_village:
					quote("Orlane is almost due east of here. Head out on 
							the road, go over the bridge, and you'll know
							you're near when you see the sentry post.");
				t_valley:
					quote("You're in the valley now. It runs east towards
							town.");
				t_mountain:
					quote("We're surrounded by mountains. Just go outside
						   and look around. They are the large, imposing
							rocks in the distance.");
				t_siblinghood:
					quote("At the monastery, I'd guess.");
				t_tomato:
					quote("I am growing some prize winning tomatoes in 
							my garden -- go out, then head south a bit.");
				t_guard:
					quote("There is a guard shack right before you get 
							into town. It's just off the left side of the
							road. The guard is a little uptight, but generally
							a good kid.");
				t_townfolk:
					quote("If they know what's good for them, they're
							locked up safely behind the town walls. Today
							is a curfew day, you know.");
				t_equipment:
					if(Speaker() ==4)
						quote("If you mean the transmitter, it's in the 
								cellar.");
					else
						quote("I don't know about any special
								equipment.");
				t_herb:
					quote("I've got a little medicine herb garden. Just
							out the front, and then south a bit.");
				t_garden:
					quote("There are two gardens: an herb garden, and
							a vegetable garden. Both are just south of 
							the cabin.");
				t_coast:
					quote("Head east, over the bridge, and into town. Then,
							just keep going until your feet get wet.");
				t_emphyteote:
					quote("That would be me, in fact.");
				t_nibex:
					if(Speaker() ==4)
						quote("That is a sublimely deep question. His
								body is buried in the graveyard, just beyond
							   	the garden to the south. If all is on schedule,
								though, what is left of his mind should be
								working its way through the ordeal, deep within
								the mountain.");
					else
						quote("Old Nibex is many years dead, I'm afraid.");
				t_zombie:
					quote("I have no idea, but if it wanders in here, 
							I'm prepared for it!");
				t_mirror:
					quote("A sudden urge to admire yourself? Well, I suppose
							that in this day and age, it is something of a
							luxury. There's a mirror in the bedroom
							just west of here. Don't touch anything else in the
							bedroom. I have it organised just the way I want it.");
				t_mob:
					quote("Who knows. Those peasants get crazy ideas in 
							their heads and wander all over the place.");
				t_rabbit:
					quote("I'm not sure where the rabbit lives, although
							Helle knows I've searched. If you walk around
							the countryside long enough, you're bound to 
							run across those little ankle biters.");
				t_polyp:
					if(Speaker()==4)
						quote("It's on top of the short mountain. Go east
								until you get to a dirt road, and then 
								look for a barely visible path that leads upwards,
								just to the north side of the road. Continue up
								until you get to the top, and it should be there,
								just where we transplanted it.");
					else
						quote("I am not familiar with that term. 
								Sounds medical.");
				t_frog:
					quote("Do I look like I know anything about frogs?");
				t_basement:
					if(Speaker()==4)
						quote("It's right below me. Just push the 
								acceleration couch to the side.");
					else
						quote("No basement here. Too damp.");
				t_slab:
					if(Speaker() ==4)
						quote("It's in the basement. I did manage to
								clean it off after last night's business
								with the farmer.");
					else
						self.not_a_clue();
				t_transmitter:
					if(Speaker() ==4)
						quote("It's in the basement next to the slab");
					else
						self.not_a_clue();
				t_bed:
					quote("Not surprisingly, I keep my bed in 
							my soi-disant bedroom.");
				t_grave:
					quote("Former Emphyteotes have traditionally
							been buried in the graveyard just to
							the southeast of the garden.");
				t_house:				
					quote("You're in it, n'est-ce pas?");
				t_ordeal:
					if(Speaker() ==4)
						quote("It's not a place, it's the process of 
								attaining alignment.");
					else
						quote("Apparently here, talking to you.");
				t_potion:
					if(Speaker() ==4)
						quote("I'm not real good at keeping track of
								the potions. Usually, I just go out
								back and juice myself some herb if I 
								need something specific.");
					else
						quote("Potions? Sounds like fairy tales.");
				t_shackles:
					if(Speaker() ==4)
						quote("Unless the IKOA has been found, I presume
								that the shackes are on top of the hill to 
								the south of here.");
					else
						quote("There is a guard shack to the south. Is 
								a shackle a small shack?");
				t_juicer:
					if(Speaker() ==4)
						quote("In the kitchen cabinet.");
					else
						quote("It's off limits for you, so forget 
								about it.");
				t_cat:
					quote("I've seen a fat tabby down the road.");
				t_recycling:
					if(Speaker() ==4)
						quote("In the kitchen, under the cutting board.");
					else
						quote("No need to concern yourself with that 
								sort of mumbo-jumbo.");
				t_bedroom:
					quote("Through the door to the north.");
				t_whistle:
					quote("The army might have some whistles. They're 
							probably near the city gates, all 
							the way at the east end of the road,
							just past the guard shack."); 

				default:if(random(20) < 4)
							self.not_a_clue();
						 else
							print (string) random(
							"I've always been bad with directions, sorry.",
							"I get lost in my own house, sometimes.",
							"I have no sense of direction."
							);
			}
			"";
	];

Proptainer ->-> LaemmliRobe "old man's robe"
	with
	name 'robe' 'pocket' 'pockets' 'Laemmli^s' 'man^s' 'priest^s',
	description "The old man is wearing a robe typical of the Order
				  	of the Perigee. It is not of recent vintage, nor has it
					seen soap and water in the recent past. The old man is 
					lying on the robe, so you can only see one side of it,
					and you note a small pocket near the waist.",
	size 2,
	capacity 4,
	before [;
		wear,
		take	:
			"It is not an appealing garment. Yes, it has a certain homely charm to it,
			 but the smell is putting you off.";
		smell	:
			"A pungent old man smell mingled with sweat, alcohol, and other 		
			 substances too horrible to mention.";
		search	:
		if(actor == rabbit)
			"You are too short to pilfer through the pockets of the old man's robe.
		     Although the idea warms your little lapine heart, cold and still though
			 it is.";
		if(Laemmli.awake){
			Laemmli.angry("I don't appreciate being searched in
						     my own house. The nerve.");
			rtrue;
		}
		print "Whilst ",(string) random(
						"pilfering through",
						"rummaging about in",
						"searching",
						"combing through",
						"inspecting",
						"raking through",
						"ransacking",
						"rifling through",
						"probing")," ",(the) self,
						" you find";
		MyHappyPlace.frisk(self);
		".";
	],
	has container open concealed static;

Prop ->->-> Spectacles
	with
	name 'spectacles//p' 'glasses//p' 'wire' 'frame',
	size 1,
	broken false,
	found false,
	short_name [;
		if (self.broken) 
			print "broken ";
		print "glasses";
		rtrue;
	],
	article "a pair of",
	description [;
		print "A pair of glasses ";
		if (self.broken)
			"with a somewhat mangled wire frame and missing the lenses.";
		else
			"consisting of a strong wire frame and unusually 
			 thick lenses.";
	],
	before [;
		wear:
			move self to actor;
		attacking:
			self.broken = true;
			"The glass in the spectacles shatters, leaving only the rim.";
	],
	has clothing pluralname;

Detail -> Fireplace "fireplace"
   with
   select 0,
	parse_name [ w n flag;
    for (: flag == false: n++) {
      w = NextWord();
		switch (w) {
			'thatch',
			'ceiling'		:self.select = 'ceiling'; continue;
			'wood',
			'wall',
			'walls'		:self.select = 'walls'; continue;
			'mantle',
			'stone',
			'ledge'		:self.select = 'mantle';continue;
			'chimney',
			'duct'			:self.select = 'chimney';continue;
			'fireplace',
			'stonework'	:self.select = 'fireplace';continue;
			'hearth',
			'soot',
			'gunk',
			'initials'		:self.select = w;continue;
		}
      flag = true; 
      n--;
	}
	return n;
	],
   description [;
     switch (self.select) {
       'fireplace':	"A stonework fireplace is built inward from the room's 
                    	wall, and the stone chimney protrudes slightly into the 
						room. There is nothing on the mantle.  It doesn't look 
						like the fireplace has been used in recent times.";
       'hearth'   :	"The area in front of the fireplace is made of blackened
                    	brick.";
       'mantle'   :	"The fireplace is framed in stone. There is a small ledge
                    	above the fireplace. Hexanies of initials have been 
		    		  	carved into the stone.";
       'chimney'  : 	"Inside the wall, a black, stone duct leads upwards. 
                    	It is coated in grime and grows more and more narrow 
		    		  	towards the top. It looks like there might be something
		    		   	stuck in the soot."; 
       'initials' :	"The initials are all different, carved in more or less
                    	elaborate styles, some big, some small. Some look, in 
		    			fact, quite old.";
       'soot'     :	"Black gunk.";
       'gunk'     :	"Yes, gunk.";
		'ceiling'	:	"The thatched roof is old and ratty.";
		'walls'	:	"The wooden walls look old, but sound.";
     }
  ],
  before [;
    Climb:if(self.select == 'chimney') "The chimney is too coated with grime
          	to climb.";
	  else 
		"There really isn't any convenient way to climb up.";
    Touch,
    Search:  if(self.select == 'chimney' or 'soot' or 'gunk' or 'fireplace'
             	&& (~~parent(JadeFrog))) {
             	move JadeFrog to FrontRoom;
	     		"You've dislodged something from the soot!  It falls down,
	      		narrowly missing your head.";
            }
  ];

Room Kitchen "Kitchen"
  with
  description [;
    print "A long, narrow room with a butcher's table. Below the table, there 
    is some sort of large, cube-shaped device marked ~recycling unit~. ";
    if(KitchenCabinet has open)
      print "A cabinet built into the wall is open, showing a large machine
        inside.";
    else
      print "There is a cabinet on the wall, with its doors closed.";
    " The only way out is back south to the front room.";
  ],
  s_to FrontRoom;

Fixture -> BottleCycler "recycling unit" 
	with name 'recycler' 'recycling' 'unit' 'white' 'cuboid' 
				'appliance' 'box' 'enamel' 'script' 'cube' 'cubical',
	description [; 
		print "A large, white enamel box with an attached hopper. The box 
		is flat on every side, and altogether unremarkable, except for the words
		~recycling unit~ which appear in raised script letters on the upper right hand
		corner of the unit, above the hopper. ";
		if(child(Hopper))
			"There is something in the hopper.";
		else
      		"The hopper is empty.";
   ];

Proptainer -> Hopper "hopper"
  with 
  name 'hopper' 'basket' 'chute',
  capacity 5,
  description [;
     print "A basket-like part of the recycling unit catches 
     material ejected from a short chute. ";
     if(~~(child(self))) "There is nothing in the hopper.";
     if(children(self)==1) "There is an empty bottle in the hopper.";
     "There are some empty bottles in the hopper.";
  ],
  before [;
    receive:
      if (~~(noun ofclass Bottle))
        "The hopper's shape is very specific, only bottles fit in it.";
  ],
  has container open concealed;

Fixture -> ButcherTable "butcher table"
  with name 'butcher' 'table' 'block' 'wood',
  description "A sturdy table topped with a heavy block of light wood which 
    bears evidence of years of cutting and chopping. There is a big white
    appliance under the table.",
  has 
  supporter ~concealed;

Fixture -> KitchenCabinet "cabinet"
	with name  'cabinet' 'cupboard' 'wall' 'doors' 'door',
	capacity 5, !i.e., it is full up.
	description [;
		print "A wooden cabinet with two doors is firmly attached to the 
		wall of the kitchen. ";
		if(self has open) 
			print "With the doors open, you can see a strange machine inside.";
		"";
	],
	before [;
		Open:
			if(self has open)
				"How much more open do you want? The
				 cabinet doors are already open.";
			give self open;
			"",(The) self, " doors open, revealing 
			a strange machine which is 
      		bolted to the wall and occupies the 
			entire interior of the cabinet.";
  ],
  has
  container concealed openable ~open;

Fixture ->-> Juicer "strange machine"
  with name 'strange' 'machine' 'juicer' 'device' 'apparatus' 'contraption',
  description [;
    print "Within the kitchen cabinet, there is an odd-looking contraption 
    with a metal funnel on the top, a crank with a wooden handle on the side, 
    and recess marked ~bottle~ at the base, below a hollow tube. ";
	if (child(Recess)) 
      print "A bottle is locked into this receptacle at the base of the machine. ";
    if (child(Funnel)) 
      print (A) child(Funnel)," has been loaded into the funnel.";
    "";
   ],
	before [;
		Receive:
			if(noun ofclass Bottle)
				<<Insert noun Recess>>;
			if(noun ofclass Herb)
				<<Insert noun Funnel>>;
	];

Proptainer ->-> Funnel "funnel"
  with 
  name 'funnel' 'metal',
  description [;

	print "The funnel feeds into the machine. The edge of the funnel
     is labeled ~Plant Material~. ";
	if(child(self))
		print "The funnel contains ",(a) child(self),".";
	"";
  ],
  after [;
	Receive:
		print (The) noun," slides downwards in the funnel.^";
		rtrue;
  ],
  size 2,
  capacity 1,
  has
  open concealed static;

Detail ->-> Nozzle "nozzle"
  with 
  name 'nozzle' 'assembly' 'gasket' 'gaskets' 'tube' 'tubes',
  description "A complex assembly involving gaskets and tubes, at the upper
    end of the machine's bottle receptacle.";
  
Detail ->-> Crank "crank"
  with
  name 'crank' 'shaft' 'handle' 'knob' 'wooden',
  description 
    "On the side of the device, there is a crank shaft with a wooden handle.",
	before [funnel_child;
		Pull,
		Push:
			"It's more the kind of thing that looks like you
			 might turn it.";
		Turn:
			funnel_child = child(funnel);
			if(~~(child(Recess) && funnel_child))
				"The crank does not budge.";
			if(~~(child(Recess) ofclass Bottle)){
				move child(Recess) to Kitchen;
				"",(The) child(Recess)," is ejected from the machine.";
			}
      		if(funnel_child ofclass Herb){
				Bottle.destroy((child(Recess)));
				Potion.create(funnel_child.index,Recess);
				Herb.create(funnel_child.index);
				Herb.destroy(funnel_child);
	  			"A new potion appears in the machine's 
				recess, and the nozzle retracts.";
			}
        	else {  
	  			print "The crank slips through one 
				revolution and ",(the) funnel_child,
	  			" flies across the kitchen and lands 
				on the floor.^";
				move funnel_child to Kitchen;
				if (funnel_child == TomatoGood)
					<throw TomatoGood>;
				rtrue;
        	}
	],
	has concealed;

Proptainer ->-> Recess "recess"
  with
  size 2,
  capacity 1,
  name 'recess' 'slot' 'receptacle' 'concave',
  description [;
     print "At the bottom of the unit, there is a concave receptacle which is 
     shaped like a bottle. There is a complicated nozzle mechanism at the
     top of the slot. ";
     if (child(self)){
       if (child(self) ofclass Bottle)
         print "A bottle has been inserted into the slot, and is firmly
                held in place. The nozzle has descended and punctured the
	        seal at the top of the bottle, and has made a firm seal with
	        the top of the bottle.";
       if (child(self) ofclass Potion){
         print "The recess is retaining a glass bottle filled with a ",
		  (name) child(self),".";
       }
     }
    "";
  ],
  before [;
    receive:
      if(noun ofclass Bottle && ~~(child(self))){
        move noun to self;
        "The bottle snaps into the recess and the nozzle 
	 assembly descends, puncturing the cap.";
      }
      else {
        move noun to Kitchen;
        "",(The) noun," does not fit well in the machine's recess, and ",
	(the) noun, " falls.";
      }   
  ],
  has open concealed transparent static;

TwoWayDoor DoorToBedRoom "warped door" !squeaky
	with 
	name 'squeaky' 'warped' 'door' 'hinges',
	room1 FrontRoom,
	towards_room2 w_to,
	room2 BedRoom,
	towards_room1 e_to,
	after [;
		open,
		close:
			print "The door's rusty hinges squeak loudly.^";
			if(~~Laemmli.awake)
				Laemmli.wake_up();
		rtrue;
	],
	appearance [;
		print "A cheap piece of planking set on rusty hinges.";
	];
	!as it opens, if sleeping, old man should stir; if awake, he should
	!complain about it needing oil.

Room PassageWay "Passageway"
  with
  description "A narrow stone passage leads from the front room 
	       of the house to a secret underground chamber. A ladder
	       runs along the tunnel's wall. The passage continues both
	       up and downwards.",
  u_to FrontRoom,
  d_to Cellar;
  
Fixture -> Ladder "ladder"
  with name 	'metal' 'ladder' 'tube' 'wall' 'walls' 'passageway' 
				'tunnel' 'stone' 'bracket' 'brackets',
  description "The metal ladder is attached at several points
	       by sturdy brackets to the stone walls of the tube and
	       runs vertically along the narrow tube.";

Room Cellar "Cellar"
	with
	description [;
			"The cellar is surprisingly dry, with no puddles or mould, not even
			the expected mustiness of an underground room. Instead, the 
	       stone walls of the room radiate a slight warmth, and the room is
	       altogether pleasant. The room is dimly lit with a diffuse 
	       light emanating from a large electronic console with glowing
	       readouts and buttons. In the corner, there is a black slab 
			supported by a metal column. 
			A passageway runs upwards to the house.";
	],
	before [;
		Listen:
			"There is a constant, very low hum coming from the console.";
	],
  	u_to PassageWay;

Detail -> Transmitter "transmitter"
	with 
	select 0,
	parse_name [ w n flag;
		for (: flag == false: n++) {
			w = NextWord();
			switch (w) {
				'letter',
				'letters',
				'transmitter', 
				'device', 
				'electronic',
				'console', 
				'panel'		: self.select = 'console';continue;
				'switch',
				'switches',
				'button',
				'buttons' 		: self.select = 'button';continue;
				'lever', 
				'levers' 		: self.select = 'lever';continue;
				'readout',
				'readouts',
				'light', 
				'lights'		: self.select = 'light';continue;
				'wall',
				'walls',
				'stone',
				'cellar',
				'basement',
				'passageway',
				'tunnel'		: self.select = 'room'; continue;
			}
      		flag = true; 
      		n--;
		}
		return n;
	],
	description [;
		switch(self.select){
			'console':
				"Some sort of complicated electronic device with all sorts 
				of buttons, levers, and blinking lights.  If you are to 
				believe the stencilled letters above the control panel, this
				is the ~TRANSMITTER~.";
			'button':
				"A mind-boggling array of buttons and switches of every sort.";
			'lever':
				"A number of hefty mechanical levers.";
			'light':
				"Banks of dazzling and almost hypnotic lights dance on the
				 panel, defying all understanding.";
			'room' : Cellar.description();
		}
	],
  before [;
			touch:	
				switch(self.select){
					'button':	"The button illuminates as you touch it.";
					'light' : "The lights are slightly warm to the touch.";
					'lever' : "The levers vibrate slightly.";
					'console': "The console throbs with untold power."; 	
				}
			pull:
			 	if(self.select == 'lever')
					"Within the walls, there is a hissing sound as
					 if gases under great pressure were being released.
					 Moments later, there is a gurgling and bubbling
					 sound and a metallic rattling from the console
					 itself.";
			push:
				if(self.select == 'button')
					"The lights blink even more ardently, a flurry of 
					 activity flashes across the panel, and the unit
					 emits a number of shrill notes.";
				if(self.select == 'lever')
					"Some deep rumbling occurs beneath the floor. You feel
					 it through your bones. It sounds like large pieces
					 of machinery are in motion.";
			attacking:
				if(self.select == 'button' or 'light' or 'lever' or 'console')
					"You are thwarted by an invisible barrier as 
					 you approach the transmitter. It seems to know 
					 your intention. The force subsides as you withdraw.";
			stare:
					"You get a mild headache.";
  ];

Fixture -> Slab "slab"
	with
	name 'slab' 'cylinder' 'column' 'leather' 'restraint' 	
		  'hole' 'holes' 'rock' 'strap' 'straps' 'black',
	description [;
		print "A single polished metal cylinder supports an immensely heavy
				slab of black rock. Leather restraints have been threaded 
				through holes in the rock and hang loosely from the slab. ";
		switch (actor){
			zombie		:	print "You have vague, and not very pleasant
								recollections of having been strapped to
								something like that in the past.";
			soldier	:	print "It looks scary.";
			rabbit		:	print "You get a bad feeling from the 
									slab.";
			skeleton	:	print "You have fleeting memories of seeing
								other people tied to such a table.";
		}
		"";
	];

Room BedRoom "Bedroom"
	with name 'bedroom',
	description [;
	t_ribbon.valid = t_ribbon.valid | $$00000001;
	print "An uncomfortable, stifling bedroom with no windows. The room is 
	barely large enough to accommodate the vaguely bed-like lump of furniture
	in the middle of the	room. A tall, ";
	if(Mirror.broken)
		print "broken";
	else
		print "classic";
	print " mirror framed in dark wood is wedged between the
	bed and the wall. "; 
	if(Ribbon in self) 
		print "A pretty silk ribbon is tastefully draped across the 
      			mirror, about half-way up. ";
	print "The mirror reflects the scene in the room. The only exit, ",
	(string) DoorToBedRoom.status()," ",(name) DoorToBedRoom,", lies
	to the east, and leads back to the front room.^";
	],
	e_to DoorToBedRoom;

Fixture -> Mirror "mirror"
  with name 'mirror' 'reflection' 'reflexion',
  broken false,
  description [;
    print "A beautiful antique mirror of unparallelled craftsmanship";
    if(self.broken) print ";unfortunately, its formerly perfect surface
      has been cracked. Amazingly, the mirror has held together rather 
      than falling into a pile of shards";
    print ". ";
    if(Ribbon in parent(self)) print "A pretty silk ribbon is draped across the 
      mirror, about half-way up. ";
    print "Reflected in the mirror, you can see a ";
    if(Speaker() == false) {
      print "naked ",(string) PossessionSuit(actor),". It isn't a pretty
      sight. Even in your undead state, you feel like you might lose your
      lunch";
    }
    else {
      print (string) PossessionSuit(actor)," dressed in the clothes of a ";
      Speaker_print(Speaker());
    }
    print ".^";
  ],
  before [;
	Search:
		<examine self>;
		rtrue;
    Attacking:
      if(self.broken) "The mirror seems immune to additional 
                       damage.";
      else {
        self.broken = true;
	"The mirror cracks, but does not shatter.";
      } 
    Enter:
		if(Ribbon in parent(self)){ 
			print "There is a ";
			Vision.print_colour(Ribbon.colour);
			" ribbon in the way.";
		}
		else{
			TxtEntry.toggle_textdir();
			t_mirror.valid = t_mirror.valid | $$00000011;
			if(IndirectlyContains(actor, magic_key))
				magic_key.material = ~~magic_key.material;
			"As you pass through the mirror, 
			you have the sensation of brushing
	 	 	past someone like you in every respect.";
		}
	Receive:
		if(noun == magic_key)
				magic_key.go_nuclear();
		else
			"The mirror ripples with the contact, as if the
			 surface is not solid, but liquid.";
  ];

Fixture -> Ribbon "ribbon" 
  with name 'ribbon' 'lacey' 'lace',
  parse_name [;
    return(Vision.parser(self));
  ],
  colour 'pink',
  description [;
    print "A fine ribbon of lacey ";
    Vision.print_colour(self.colour);
    print " silk hangs in a loose arc across the silvery surface of the 
      mirror.^";
  ],
  before [;
    Take,
    Touch,
    Attacking:
      remove self;
	   	t_ribbon.valid = t_ribbon.valid & $$11111110;
		t_ribbon.valid = t_ribbon.valid | $$00000110;
      "The ancient ribbon snaps into two pieces, crumbles to dust, and then
       is no more.";
  ];

Fixture -> SlabBed "bed"
  	with name 'slab' 'bed',
  	description "A raised, stone platform vaguely reminiscent of a neolithic
               bed. By no means inviting.",
  	before [;
		Search:<<Search Pillow>>;
	],
  	has supporter ~concealed;

Prop ->-> Pillow "pillow"
  with name "pillow",
  size 2,
  description "A grey, paper-thin bit of fabric that may have been a pillow
    in its former life.",
  before [;
    Take,
    LookUnder,
    Search:
		if(self hasnt moved){
			give self moved;
			Potion.create(4,Slabbed);
			Herb.create(4);
			if(action == ##Take) move self to actor;
			t_aronk.valid = t_aronk.valid | $$01111111;
             "The pitiful pillow wafts aside, revealing a small bottle.";
	   }
    Smell:
           "Smells like washing the pillow would be a good idea.";
    Taste:
           "No. Just no.";
    Listen:
           "The pillow does absolutely nothing to muffle the noises around 
	    you.";
  ];

Outside VeggieGarden "Vegetable Garden"
  with 
  description [;
     "A small plot of land is furrowed and meticulously free of 
      weeds. A large, weather-beaten stuffed wolf is mounted on a
      short pole. You are just east of the 
      herb garden.";
  ],
  w_to Garden;

Detail -> VeggieGardenDetail
  with
  select 0,
  parse_name [ w n flag;
    for (: flag == false: n++) {
      w = NextWord();
		switch (w) {
			'down',
			'dirt',
			'ground',
			'soil',
			'earth'		: self.select = 'dirt'; continue;
	  		'weed',
	  		'weeds': self.select = 'garden'; continue;
	  		'herbs',
			'herb',
	  		'herbal',
	  		'medicine',
	  		'medicinal': self.select = 'herb'; continue;
 			'garden':	if(self.select) 
							continue;
	  	          	else {
	  	          		self.select = 'garden';continue;
			    		}
		}
		flag = true; 
		n--;
	}
	return n;
   ],
    description [;
     switch (self.select) {
		'dirt'		 :"This is good, dark soil. Excellent for farming.";
       'garden'   : VeggieGarden.description();
       'herb'	     :  "From here, you can see a neat little garden with
                         some medicinal herbs, just west of here.";
      }
   ],
   before [;
     examine : rfalse;
	 	   go,
		enter	:	if(self.select == 'herb')
						<<go w_obj>>;
        eat,
	    take :if(self.select == 'herb')
					"You'll have to go over to the herb garden to do that."; 
				if(self.select == 'garden'){
			    	print (The) Carrot;
			    	if(TomatoGood in VeggieGarden || TomatoBad in VeggieGarden)
				  	print " and maybe the tomato";
               	" look tasty, but everything else is rather repulsive.";
				}
		       else {
				 	print "You can't ";
					if(action == ##Eat) "eat";
			   		if(action == ##Take) "take";
					" that!";					
				}

			dig		: if(self.select == 'dirt')
					"You move dirt from one pile to another.";
				  else
					"Agricultural labour does not appeal to you";
     default : if (self.select == 'herb') "The herb garden is too far away.";
   ];
	    
Prop -> TomatoGood "nice tomato"
  with name 'nice' 'tomato',
  parse_name [;
    return(Vision.parser(self));
  ],
  colour 'red',
  shown false,
  description [;
    print "A paragon amongst tomatokind, this lustrous ";
    Vision.print_colour(self.colour);
    " beauty is at the very point of turning ripe; it is firm and free of 
    any blemish.";
  ], 
  swap [;
    move TomatoBad to parent(actor);
    remove(self);
  ],
  before [;
    Drop:
      self.swap();
      "The tomato lands with a disconcerting thud.";
    Attacking:
      self.swap();
      "You smack the tomato around, showing it who is boss.";
	Throw:
		self.swap();
		"There is a soul-shatteringly squishy sound. You daren't look.";
  ],
  has edible;

  Prop -> Carrot     
  with 
  article "a",
  short_name "carrot",
  name 'carrot',
  parse_name [;
    return(Vision.parser(self));
  ],
  colour 'orange',
  description [;
    print "A bright ";
    Vision.print_colour(self.colour);
    " carrot.";
  ],
  before [;
    Eating:
		print "Chomp. Chomp. Chomp. The carrot tastes earthy and sweet.^";
		remove self;
		if(Carrot hasnt moved)
			Herb.create(3);
		rtrue;
	Dig,
	Take:
		if(Carrot hasnt moved)
			Herb.create(3);
	Give:
		if(second == rabbit)
			<<drop self>>;
  ],
  has edible;

Fixture -> BadWolf "stuffed wolf"
  with 
  select 0,
  parse_name [ w n flag;
    for (: flag == false: n++) {
        w = NextWord();
	switch (w) {
          'dog',
          'canine',
          'animal',
	  'bad',
	  'stuffed', 
	  'wolf',
	  'scarecrow', 
	  'beast':  self.select = 'wolf'; continue;
	  'pole',
	  'stick':  self.select = 'pole'; continue;
	  'jaw',
	  'jaws',
	  'mouth',
	  'fang',
	  'fangs',
	  'tooth',
	  'teeth':  self.select = 'teeth'; continue;
          'claw',
	  'claws':  self.select = 'claws'; continue;
	  'ear',
	  'ears':   self.select = 'ears'; continue;
	  'eye',
	  'eyes': 	 self.select = 'eyes'; continue;
	  'wire',
	  'frame':  self.select = 'frame'; continue;
	  'sockets',
	  'socket': self.select = 'socket'; continue;
          'fur':    self.select = 'fur'; continue;
          'paint',
          'blood':  self.select = 'blood'; continue;
	  }
	flag = true; 
	n--;
    }
    return n;
   ],
   description [;
    switch(self.select){
      'wolf':
        if (actor == Rabbit) 
          "The fierce, life-like wolf hovers above you, in a
          threatening posture. From somewhere deep, deep within the most primitive
          recesses of your rabbit brain come the words ~bad wolf~. The racial 
          memory of predators transfixes you, and paralysed with fear your 
          quiver impotently and whimper, and then back away slowly, keeping your
          eyes fixed on the vicious jaws of the beast which drip with fresh 
          blood.";
        else {
          print "What a pathetic looking...what?  Dog?  Wolf?  Hard to tell. 
            The fur is completely worn away in places, and the wire frame pokes 
	    through. The whole thing is mounted on a short pole, in an awkward 
	    posture which suggests that the animal is running. Its teeth have 
	    been amateurishly painted ";
          Vision.print_colour('red');
          ", although the paint is fading and chipped in places, and some of 
	    the teeth have even fallen out of their sockets.";
       }
       'pole':
          "A sturdy metal pole.";
		'eyes':
			"The better to SEE you with.";
       'teeth':
          "The better to EAT you with.";
       'ears':
          "The better to HEAR you with.";
       'claws':
          "The better to, um, CLAW you with, I guess.";
       'frame':
           "Filthy old chicken wire. Not worth fussing over.";
       'socket':
           "The tooth sockets are empty, and have been for many years.";
       'fur':
           if(actor == rabbit)
              "The bristly fur of this redoubtable hunter strikes fear into
               your heart.";
           else
             "Cheap fabric, probably not real fur, after all. Probably has
                lice.";
       'blood':
           if(actor == rabbit)
              "Bright arterial blood, the kind of blood that wolves drink
                 lustfully.";
           else
             "In your professional estimation, probably an egg-based 
                tempera.";
   }
 ],
 before [;
   Smell:"From a mile away, it smells like wet dog. Yech.";
   Examine: self.description();
            rtrue;
   Take:
        if(self.select == 'pole')
          "Please leave polling to politicians. You can't take the pole.";
   default:
     if (actor == Rabbit)
       "You are too fearful to do anything at all to the scary wolf.";
 ],
   has ~concealed;

Object TomatoBad "spoiled tomato"
  with name  'spoiled' 'tomato',
  parse_name [;
    return(Vision.parser(self));
  ],
  colour 'brown',
  description [;
    print "This disgusting "; 
    Vision.print_colour(self.colour);
    " lump of vegetable matter may have been a tomato once, but the soft, 
     glistening mass is no longer appetising.";
  ],
  before [;
    Drop:
      remove(self);
      "Voracious tomato bats swoop out of nowhere and, in mid-flight, 
       consume the corporeal remains of the former tomato. They then 
       disappear as quickly and mysteriously as they came.";
    Attacking:
      remove(self);
      "You are momentarily covered in tomato juice, attracting a swarm
       of tomato beetles which crawl over you and are gone in a flash. You are
       dry again, and a good bit cleaner, it might be added.";
    Eat:
      remove(self);
      "Absolutely disgusting. No doubt it is a delicacy somewhere, though.";
  ],
  has edible;

Outside Garden "Garden"
  with
  description [;
    "A tidy little garden of the sort that is useful for growing medicinal
    herbs. You can see the cabin just to the north, and there is a 
    vegetable garden to the east. On a more sombre note, there is a small
    cemetery to the southeast.";
  ],
  n_to BlindManProperty,
  e_to VeggieGarden,
  se_to GraveYard;

Detail -> GardenDetail
  with
  select 0,
  parse_name [ w n flag;
	for (: flag == false: n++) {
		w = NextWord();
		switch (w) {
			'cemetery',
			'graveyard'	: self.select = 'graveyard'; continue;
			'cabin' 		: self.select = 'cabin'; continue;
			'furrows',
			'furrow',
			'square',
			'veggie',
			'vegetable'	: self.select = 'vegetable'; continue;
			'garden',
			'gardens',
			'herb',
	  		'herbs',
			'herbal',
			'medicine',
			'medicinal'	: self.select = 'herb'; continue;
			'down',
			'dirt',
			'ground',
			'soil',
			'earth'		: self.select = 'dirt'; continue;
		}
      flag = true; 
      n--;
	}
	return n;
	],
    description [;
     switch (self.select) {
       'herb'   :  	Garden.description();
       'vegetable'   :  	"To the east, a small vegetable garden has been laid
                         out in a small square of furrows.";
       'cabin'       :  "To the north, you can see the side of the cabin.";
       'graveyard'   :  "A private graveyard with a single plot.";
		'dirt'			:  "As dirt goes, this dirt is pretty clean.";
      }
   ],
   before [;
     examine 	: rfalse;
	 	   go,
		enter	:switch(self.select){
					'vegetable'	:<<go e_obj>>;
					'cabin'		:<<go n_obj>>;
					'graveyard'	:<<go se_obj>>;
				  }
		dig		: if(self.select == 'dirt')
					"You find more dirt beneath the dirt.";
				  else
					"Agricultural labour does not appeal to you";
     default 	: if (self.select ~= 'herb') 
                  "The ", (address) self.select, " is too far away.";
   ];

Outside GraveYard "Graveyard"
  with name 'graveyard',
  description [;
   "A quiet, lonely corner of the property behind the cabin. In the
    centre of the graveyard is the solitary mound of grave. The pleasant garden 
    to the northwest provides a comforting contrast.";
  ],
  nw_to Garden;

Fixture -> Grave "grave"
  with name 'grave' 'plot' 'soil' 'down' 'dirt' 'mound' 'earth' 'ground',
  dugup false,
  description [;
    print "A small plot of earth with a black, marble headstone. The plot is 
      surrounded on every side by the woods, except for the path that leads 
      towards a garden. ";
    if (self.dugup) "The soil here has been disturbed.";
    else "The soil appears undisturbed.";
  ],
  before [;
    Dig:if(self.dugup)
          "You dig around some more, but find nothing else.";
	else {
	  move skeleton to parent(self);
	  move PriestRobe to parent(self);
	  self.dugup = true;
	  print "Well, that's interesting. Not far below the surface, you
	  uncover an intact skeleton. When the skeleton was buried, it 
	  was wearing a long ";
	  Vision.print_colour('purple');
	  " robe. Surprisingly, it looks none the 
	  worse for having been buried for so long.";
	}
  ];

Detail -> GraveyardDetail
  with
  select 0,
  parse_name [ w n flag;
	for (: flag == false: n++) {
		w = NextWord();
		switch (w) {
	  		'graveyard',
	  		'cemetery'		: self.select = 'graveyard'; continue;
			'headstone',
			'circle',
			'ellipse',
			'black',
			'marble'  		: self.select = 'headstone'; continue;
			'herb',
			'herbs',
			'herbal',
			'medicinal',
			'garden'  		: self.select = 'garden'; continue;
			'house',
			'cabin'   		: self.select = 'cabin'; continue;
		}
		flag = true; 
		n--;
	}
	return n;
    ],
	description [;
		switch (self.select) {
			'graveyard'   : Graveyard.description();
			'garden'      : "The little herb garden is not far away, towards the
                        		northwest.";
			'headstone'   :  quote("Here be the final resting place of loyal 
                        		Emphyteotes of the Church of Perigee. May each
								generation come to fruition!");
								print "^^Below the text is
								an engraved picture of a circle lying at one end of 
								an ellipse.^";
								rtrue;
			'cabin'       : "You can't see the cabin from here, but it must be
                        		more or less to the north, through the herb garden.";
      }
   ],
   before [;
     examine 	: rfalse;
		go,
		enter	: if (self.select == 'cabin' or 'garden')
					<<go nw_obj>>;
     default 	: if (self.select == 'cabin' or 'garden') 
                  "The ", (address) self.select, " is too far away.";
   ];

Outside Meadow "Meadow"
  with
  description [;
    "An unmaintained field with short
    grass near the road, and taller grass towards the surrounding woods. At the 
    edge of the woods, there is a depression, and at its base, a hole. There
    are some rabbit tracks in the soft mud near the road to the south.";
  ],
  s_to CountryRoad,
  d_to RabbitEntrance;

Detail -> MeadowDetail
  with
  select 0,
  parse_name [ w n flag;
	for (: flag == false: n++) {
		w = NextWord();
		switch (w) {
			'meadow',
			'field',
			'mud':   self.select = 'meadow'; continue;
			'road',
			'lane',
			'path':  self.select = 'road'; continue;
			'hole',
			'depression',
			'tunnel': self.select = 'hole'; continue;
			'tracks',
			'grass':  self.select = w; continue;
			'rabbit': if(self.select) 
							continue;
	            		else {
	            			self.select = 'tracks';continue;
		    			}
		}
		flag = true; 
		n--;
	}
	return n;
	],
    description [;
     switch (self.select) {
       'meadow'   : Meadow.description();
       'road'     :  "Just to the south of the meadow, there is a small, 
	              		unpaved road which runs east and west.";
       'tracks'   :  "Yes, definitely rabbit tracks: two smaller paws in front,
                      	and larger impressions from the hind legs. It looks
		      				like all of these tracks could have been made by a 
		      				single rabbit.";
       'grass'    :  "The grass is higher near the surrounding woods, but low
                      	near the road to the south.";
       'hole'     :  "Looks like a dark hole in the ground, about the size
                      	of a rabbit.";
      }
   ],
   before [;
     Examine : rfalse;
        Take : if(self.select == 'grass')
	        "This is preternaturally strong grass. Good roots. You
		 		can't pull it up.";
       Enter : if(self.select == 'hole')
					if (actor.size > RabbitEntrance.size)
						"You are too big to fit into the hole.";
                  else {
						PlayerTo(RabbitEntrance);
                  	rtrue;
					}
     default : if(self.select == 'road')
                "The road is too far away";
   ];

Room RabbitEntrance "Rabbit Hole Entrance"
  with
  twisty true,
  description "A narrow, dark, rabbit-size tunnel leading both towards the
    surface and even deeper through the dark, moist earth.",
  size 3,
  u_to Meadow,
  d_to RabbitUpper;

Room RabbitUpper "Upper Rabbit Hole"
  with
  twisty true,
  size 3,
  description "A maze of twisty, turning and otherwise cramped passages delving
  far into the ground. You have two choices here: up and down.",
  u_to RabbitEntrance,
  d_to RabbitMiddle;

Room RabbitMiddle "Warrens"
  with
  twisty true,
  size 3,
  description "A horribly long, deep, narrow passage of twisting and winding
  corridors that alternately spiral and zig-zag chaotically through the earth.
  There's nowhere to go but up and down.",
  u_to RabbitUpper,
  d_to RabbitLower;

Room RabbitLower "Lower Reaches"
  with
  twisty true,
  size 3,
  description "A meandering tunnel through the deep dark earth. The tunnel
  extends up and down as far as the eye can see.",
  u_to RabbitMiddle,
  d_to RabbitDen;

Detail RabbitTunneling
	with
	found_in RabbitEntrance RabbitUpper RabbitMiddle RabbitLower,
	select 0,
	parse_name [ w n flag;
		for (: flag == false: n++) {
			w = NextWord();
			switch (w) {
				'tunnel',
				'deep',
				'dark',
				'earth',
				'soil',
				'ground',
				'cave',
				'ceiling',
				'wall',
				'walls',
				'floor',
				'rabbit',
				'entrance',
				'upper',
				'lower',
				'warren',
				'warrens',
				'lower',
				'reaches',
				'hole'		: self.select = 'tunnel'; continue;
			}
			flag = true; 
			n--;
	}
	return n;
	],
	description [;
		"The tunnel continues up and down further than anyone would rationally 
		 expect. Generations of rabbits must have laboured on this rabbit feat 
		 of engineering.";
	];

Room RabbitDen "Rabbit Den"
   with 
   size 4,
   description [;
      print "A relatively large chamber which has been dug in moist
      clay-like soil. Plant roots penetrate through the ceilings
      and walls. The tunnel leads upwards, back to the surface. ";
      if(parent(CarrotWall) ~= RabbitDen)
        print "To the south is a previously hidden side room, a sort of
	       rabbit ~treasure~ chamber.";
      "";
   ],
   u_to RabbitLower,
   s_to CarrotWall;

Obstruction -> CarrotWall "wall of solid carrot"
   with name 'wall' 'of' 'solid' 'carrot',
   max_hp 60,
   current_hp 60,
   size 4,
   description "A wall constructed entirely of closely spaced carrots
     which have been painstakingly selected to fit together without gaps.",
   before [;
     Eating:
	 print "That's your fibre quota for this hexany.";
         self.goodbye();
         rtrue;
     Touch:"It feels slightly damp. The surface is slick.";
     Taste:"It could very well be a carrot.";
     Smell:"You can't remember what carrots smell like, but this might be it."; 
   ],
   cat_text 
		"You can probably beat your way through this one -- it's only carrot, after all."
		"I can think of a tasty solution to your problem."
		"Eating your problems is two-thirds of defeating them.",
   replacement_object 0,
   door_to RabbitTreasure,
   has edible;

Detail -> RabbitDenDetail
with
  select 0,
  parse_name [ w n flag;
	for (: flag == false: n++) {
		w = NextWord();
		switch (w) {
			'den',
			'room',
			'chamber',
			'warren',
			'clay',
			'soil',
			'cave',
			'ceiling',
			'wall',
			'walls': self.select = 'den'; continue;
			'vault',
			'treasure',
			'side',
			'chamber':if (CarrotWall notin parent(self)){
							self.select = 'chamber';
							continue;
						}
		}
		flag = true; 
		n--;
	}
	return n;
	],
	description [;
		switch (self.select) {
			'den'		:  RabbitDen.description();
			'chamber'	:  if(parent(CarrotWall) == RabbitDen)
                       		"You don't see anything that looks like treasure.";
							else
								"There is a formerly hidden room to the south, which
								looks like the rabbit equivalent of a vault for 
								storing valuables.";
      }
	],
	before [;
		examine : rfalse;
		default : "The ", (address) self.select," is too far away";
	];

Fixture -> Root "plant root"
	with name 'plant' 'root' 'system' 'roots' 'light' 'lights' 'dots' 'dot',
	description "Almost imperceptible dots of light scintillate along the 
		plant's root system, like tiny voyagers on a great highway.",
	before [;
		Touch: "You are briefly filled with a strange euphoria, and begin to 
				feel that you are a stranger in your own body, and not a 
				participant, but a puppet, controlled by a higher order of being.
				The feeling passes.";
		Lick,
		Taste: "You taste the colour chartreuse and then see the 
				bittersweet mating cry of the red-breasted Tong-tallow."; 
		Smell: "You take a great snort, inhaling large numbers of the scintillating
				dots which tickle the inside of your nose. The world reverberates
				as if it were a giant bell struck by a hammer, and the ringing
				continues for some time as your vision narrows to a point and then
				explodes in a fiery but monochromatic spectacle of sparks."; 
		Listen: "You hear yourself listening to the root system. It is a good 
				thing that no one can see you, because you look patently 
				foolish.";
    ];

Room RabbitTreasure "Rabbit Treasure Chamber"
   with
   size 4,
   description [;
      "A chamber that the rabbit and his lapine ancestors
      have filled with collected treasure over the ages. A small
      opening in the floor leads to a narrow metal chute. 
      A larger rabbit den is to the north.";
   ],
   n_to RabbitDen,
   d_to [;
		RabbitChute.going_down();
		rtrue;
   ];

Detail -> RabbitTreasureDetail
	with
	select 0,
	parse_name [ w n flag;
		for (: flag == false: n++) {
			w = NextWord();
			switch (w) {
				'den',
				'living',
				'room': self.select = 'den'; continue;
				'walls',
				'wall',
				'ceiling',
				'roof',
				'rabbit',
				'treasure',
				'side',
				'chamber':self.select = 'chamber';continue;
				'dirt',
				'floor'  : self.select = 'floor'; continue;
			}
			flag = true; 
			n--;
	}
	return n;
	],
	description [;
		switch (self.select) {
			'den' 		:	"A larger room is just north of here. It probably serves the
                    		rabbit as a sort of living room.";
       	'chamber'	:	RabbitTreasure.description();
			'floor'	:	"The dirt has been tamped down to the point that
							 it is polished as hard as rock. In the corner
							 of the room, there is the beginning of a metal 
							 passage downwards. It bends immediately, so you 
							 can't see where it goes from here.";     
			}
   ],
   before [;
		examine	:	rfalse;
		  go,
		enter		:	if(self.select == 'den')
							PlayerTo(RabbitDen);
     default		:	if(self.select == 'den')
							"The den is to the north of here, 
							it is too far away.";
   ];

Prop -> magic_key 
	with
	material 0, 								!0 ebony, 1 ivory 
	size 1,
	colour_string [;
		if(self.material)
			return "ivory";
		else
			return "ebony";
	],
	parse_name [ w n flag;
		for (: flag == false: n++) {
			w = NextWord();
			switch (w) {  
				'key',
				'gold',
				'jewels',
				'jewel',
				'impression': continue;
				'ivory': if(self.material) continue;
				'ebony': if(~~self.material) continue;
			}
			flag = true; 
			n--;
		}
	return n;
	],
	short_name [;
	print (string) self.colour_string()," key";
	rtrue;
  	],
	description [;
    print "The soft gold of the key bears the impression of rabbit 
    incisors, but the multi-hued jewels are firmly seated in their
    settings. The shaft and handle of the key are ",(string)
	 self.colour_string(),". 
    The rectangular shaft of the key terminates in an exceptionally
    intricate series of ridges and excavations, which suggest that it fits a
    very complex mechanism. Engraving along the shaft of the key reads ~";
	if(self.material)
		print "The Key to Helle";
	else
		print "elleH ot yeK ehT";
	print "~ in an archaic script.^";
	],
	go_nuclear [;
		deadflag = 4;
		"As the key contacts its reflected twin, the mass and energy of
		 two universes is concentrated into the infinitely small point 
		 of contact.^^
		 You have destroyed the very concept of existence. Nice work.^";
	],
	before [;
		TouchWith:
			if(second == mirror){
				self.go_nuclear();
				rtrue;
			}
	];

Fixture -> RabbitChute "chute"
  with name 'chute' 'metal' 'entrance' 'narrow' 'metal' 'passage',
  size 3,
  description [;
    "You can only see the top of the chute, but it looks like it spirals
     downwards for a long time."; 
  ],
  going_down [;
    print "Once you enter the chute, you realise how slick it is, and find
    yourself whipping around and around in an ever-descending
    spiral. Finally, you come to rest on a metal door. The 
    door clicks open, and you fall to the floor. The metal door
    slams shut above you, melding undetectably into the vaulted 
    ceiling.^";
    PlayerTo(VaultedJunction);
    rtrue;
  ],
  before [;
    Enter: self.going_down(); 
           rtrue;
  ];
	
Outside PeasantRoad "Road Into Town"
   with
   description [;
     "An unpaved road runs from east to west. A small 
     town can be seen in the far distance to the east, on the far side of
     a stone bridge.";
   ],
   w_to DirtRoad,
   e_to [;
     if(Mob in self && actor ~= rabbit)
       "The mob won't let you pass towards the town.";
     else 
       return(Bridge);
   ];

Detail -> PeasantRoadDetail
	with
	select 0,
	parse_name [ w n flag;
		for (: flag == false: n++) {
			w = NextWord();
			switch (w) {
				'lane',
				'path',
				'road',
				'unpaved': self.select = 'road'; continue;
				'orlane',
				'town'	  : self.select = 'town'; continue;
				'stone',
				'bridge' : self.select = 'bridge'; continue;
				'river': self.select = 'river'; continue;
			}
		flag = true; 
		n--;
		}
	return n;
	],
	description [;
		switch (self.select) {
			'road'   :  PeasantRoad.description();
			'town'   :  "A walled town of, you would guess, some 
							tens of thousands of people.";
			'bridge' :  "A sturdy stone bridge crosses the only calm 
							segment of an otherwise raging river.";
			'river'  :  "A river descends from the mountains and passes
							under a bridge to the east. The river flow is
							violent as it courses through the woods, but the 
							wider area forded by the bridge is relatively
							calm, albeit murky.";
      }
	],
   before [;
		examine : rfalse;
		default :  if(self.select ~= 'road')
                  "The ", (address) self.select," is too far away";
   ];

NPC -> Mob "angry mob"
   with name 	'mob' 'peasant' 'angry' 'crowd' 'peasants' 'people' 'pitchfork' 
				'pitchforks' 'torch' 'torches',
   description "About twenty peasants have gathered with pitchforks and 
     flaming torches, and are teetering on the edge of violence",
     atk 3,
     dam 2,
     size 8,
   before [;
     Examine: 
       "An unruly assortment of local hooligans. They are dressed in
        ratty mackintoshes.";	
     Attacking: 
		t_mob.valid = t_mob.valid | $$01111000;
		t_mob.valid = t_mob.valid & $$11111000;
       move pitchfork to PeasantRoad; 
       remove(self);
       "The peasants, big on public displays of bravado, but not so 
        willing to put themselves on the line when it comes down to it, 
        have fled. In their haste, they have dropped something.";
     Touch: "The mob shrinks back from your touch.";
     Taste: "The crowd is all too aware that you would like to taste them,
        and they are keeping their distance from your gustatory pursuits."; 
     Smell: "The crowd reeks of fear."; 
     Listen: "You overhear someone in the mob ", (string)
             random("mutter",
	            "whisper",
		    "quietly remark",
		    "murmur",
		    "mumble",
		    "mention in hushed tones"),
	     " that they ", (string)
	     random("are afraid that this whole business with the zombie
		     will bring nothing but evil upon their town, despite
		     the assurances offered by the Order of the Perigee",
		    "really aren't very interested in fighting, and 
		     are very concerned that they might come into contact with 
		     zombie drool and themselves turn into zombies"),
	     ".";
   ],
   life [;
     Kiss: 
       Combat(mob,actor);
       "Perhaps they are prudish. The mob doesn't seem very interested
       in advances of that nature.";
     Give: 
       "The mob replies, ~We don't want no stinkin' ",(name) noun,"!  We're here
       fer some zombie killin'!~";
     Show:
       "The mob looks on politely as you show them the ",(name) noun," and then 
       returns to their bloodthirsty demonstration.";
     Ask:
       "They appear to think about it for a moment, and then appear more
        angry than ever.";
     Tell:
       "The mob replies, ~We ain't listenin' to any words comin' outta the 
        mouth of some ", (name) actor,"-like critter!~";
     ThrowAt:
        move noun to location;
        print "The mob cleverly avoids ", (the) noun, " which falls at their
        feet.^";
        rtrue;
   ],
   each_turn[; 
	  if(~~(t_mob.valid))
		t_mob.valid = t_mob.valid | $$00000111;
     if(actor in Hill) rtrue; 
       !prevent action if actor has already escaped body
     if(parent(self) == parent(actor) && actor ~= rabbit){
       Combat(mob, actor); 
     }
     if(actor in Hill) rtrue; 
     if(random(20)<8){
        print "From the crowd you overhear, ~";
        print (string) random(
          "I hates zombies!",
          "Ain't no zombie gonna get past us!",
          "I've got a bad feeling about this...",
          "Zombies is fer killin'",
          "Pitchforks don't kill people -- zombies kill people...",
	  "Keep clear of its jaws -- you don't want to become a zombie!",
	  "Watch out for its spit!  Even a drop will get you!",
	  "I like furry rabbits. Rabbits are cute",
	  "We shouldn't be out here, Norbert. There's a curfew on!",
	  "Lads, mind those jaws -- so much as a drop of spittle and
	   you'll be in the same shape as this zombie!",
          );
        print "~.^";
     }
  ];

Outside Bridge "Stone Bridge"
  	with
  	description "A sturdy bridge of worked stone spans the river. The bridge
               is wide enough for two wagons to pass side-by-side. Short walls 
	       on both sides of the bridge prevent anyone from accidentally 
	       falling over the edge. The bridge runs from east to west. 
	       There isn't much to see to the west, except more road, but
	       in the distance, you can see a walled town to the east.",
	jump [;
		!since the detail might be needed, for example jump off wall, over edge, etc.
		print "You plunge over the side of the bridge into the murky
				waters below.^";
		PlayerTo(River); 
		rtrue;
	],
	before [;
    	Jump:self.jump();
		rtrue;
	],
	after [;
		Drop:
			if (noun has edible)
				remove noun;
			if (noun ofclass being)
				noun.current_hp = 0;
			move noun to FrogRoom;
			print "",(The) noun," ";
			if(noun has pluralname)  !TODO -- need a general routine for plurals
				print "fall";
			else
				print "falls";
			print " over the edge of the bridge and ";
			if(noun has pluralname)
				print "plummmet";
			else
				print "plummets";
			print " into the dark waters below, where ";
			if(noun has pluralname)
				print "they are";
			else
				print "it is";
			print " welcomed by a furious thrashing of teeth, claws 
			and long reptilian tails. The tumult ceases
			abruptly, and the foam dissipates. There is no sign
			of your ",(name) noun,". Hope ";
			if(noun has pluralname)
				print "they were";
			else
				print "it was";
			"n't important for anything.";
	],
  	w_to PeasantRoad,
  	e_to GuardRoad,
  	d_to River;

Detail -> BridgeDetail
	with
	select 0,
	parse_name [ w n flag;
		for (: flag == false: n++) {
			w = NextWord();
			switch (w) {  
				'bridge'	: self.select = 'bridge';continue;
				'walled',
				'orlane',
				'town'		:  self.select = 'town'; continue;
				'waterfall',
				'ravine',
				'river' 	: self.select = 'river'; continue;
				'masonry',
				'stone',
				'block',
				'blocks'	: self.select = 'masonry'; continue;
				'edge',
				'wall',
				'walls'	: self.select = 'walls'; continue;
				'armour',
				'pikemen',
				'army',
				'troops',
				'phalanx'	: self.select = 'army'; continue;
				'road'		: self.select = 'road'; continue;
			}
		flag = true; 
		n--;
	}
	return n;
	],
   description [;
    switch(self.select){
		'road'		:"The road runs from the outskirts out west, over this bridge,
					  and continues east towards town.";
		'masonry' 	:"The stone looks like it was quarried from the neighbouring
					mountains.";
		'bridge'	:"The bridge is a beautiful example of masonry and is composed
					of large stone blocks which have been cut and fitted so 
					precisely that no mortar is needed."; 
		'town'		:"In the distance, you can see the walls of the Town of Orlane. 
					Near the walls, a phalanx of army pikemen have assembled on the 
					roadway.";
		'army'		:"A disciplined, professional army of pikemen is assembled in 
					classical phalanx formation. They are outfitted in plate
					armour from head to toe. There must be between forty and 
					eighty of them!";
		'walls'	:"The edges of the bridge are marked by a short stone wall.";
		'river'	:"The narrow, turbulent river flows downwards from the mountains 
					and exits the woods just upstream of the bridge. Here, it
					widens and becomes less violent. To the south of the bridge,
					it again narrows, though, and cascades through a waterfall into a
					dark wooded ravine.";
		default	:"A sturdy bridge of worked stone spans the river. The bridge
					is wide enough for two wagons to pass side-by-side. Short walls 
					on both sides of the bridge prevent anyone from accidentally 
					falling over the edge.";
	}
	],
	before [;
		examine : rfalse;
			go,
		enter:
				if(self.select == 'river'){
					PlayerTo(River);
					rtrue;
				}
				if(self.select == 'town')
					"It's to the east.";
				else
					rfalse;
		climb:
				if(self.select == 'walls');
				"Not much of a wall to climb.";
		jump: if(self.select == 'masonry' or 'bridge' or 'walls' or 'river' or 'road')
					"You take a plunge off the side of the bridge and splash into
					 the river below.";
		default :  if(self.select == 'town' or 'army')
                  "The ", (address) self.select," is too far away";
	];

Fixture -> Gargoyle "gargoyle"
  with name 'statue' 'statues//p' 'gargoyle' 'gargoyles//p',
  description 
            "Ornamental gargoyles have been carved in the same stone
            as the bridge itself, and face outward in each direction at
	    the four corners of the bridge. They are fanciful demons with
	    short horns and contorted faces.";

Outside River "River"
  with
  description [;
    "A dangerous, boulder-strewn foaming river runs down from the 
    mountains and levels out here. Under the bridge, it is almost calm. 
    You can just make out shadowy forms milling about beneath the surface
    of the water.";
  ],
  before [;
	swim,
	jump,
	wave,
	dance,
	yell,
    go: 
	 WorldTime.offset(0,0,3,0);
	 actor.current_hp = 0;
	 move actor to FrogRoom;
	 if(actor == zombie){
		zombie.nothing_but_loot();
	 }
	@output_stream 3 DispossessMessage;
	print
        "Your movement in the water has attracted some attention...^^You were 
	 clenched in the unyielding grip of a pair of sharp, serrated jaws and 
	 whirled downwards through the water in a curtain of bubbles. Your 
	 vision was limited in the turbid water, but you caught sight of sharp 
	 claws and a long, reptilian tail. You were wedged by the creature under 
	 a submerged tree, and left for dead.^^Despite your attempts to escape, 
	 you only worked yourself deeper into the sucking mud.^^Several hours 
	 later, the creature returned and was upset to find that you were still 
	 moving. It expressed its frustration by mashing you into a fine 
	 pulp.^^";	
	 @output_stream -3;	
	 DispossessSub(actor);
	 rtrue;
  ];

Detail -> RiverDetail
	with
	select 0,
	parse_name [ w n flag;
		for (: flag == false: n++) {
			w = NextWord();
			switch (w) {  
				'white',
				'letter',
				'letters',
				'lettering',
				'words',
				'warning',
				'paint',
				'bridge': self.select = 'bridge'; continue;
				'water',
				'murky',
				'river' : self.select = 'river'; continue;
				'shadowy',
				'form',
				'forms' : self.select = 'form'; continue;
				'boulder',
				'boulders': self.select = 'boulders'; continue;
				'serpent',
				'serpents',
				'monster',
				'monsters',
				'seamonster': self.select = 'serpents'; continue;
			}
		flag = true; 
		n--;
	}
	return n;
	],
	description [;
		switch(self.select){
			'bridge': "Someone has painted the bottom of the bridge in large, 
						white letters: ~NO SWIMMING! SERPENTS!~"; 
			'river':  River.description();
			'form' :  "Something else is swimming around in these waters.
						 Something hungry.";
			'boulders': "Large boulders have washed down from the mountains.";
			'serpents': "Now that you mention it, it does look like you might
							not be the only creature swimming in this river.";
		}
	],
	before [;
		examine : rfalse;
		default :  if(self.select ~= 'river')
                  "The ", (address) self.select," is too far away";
   ];

Outside GuardRoad "Checkpoint"
	with
	description [;
		"The road dips down a little here, bringing you to a checkpoint midway 
		between the bridge and the outer walls of the town to the east. 
		A small white building, little more than a 
		free-standing closet, stands just to the north side of the road. 
		~Sentry Post~ is written above the entrance.";
	],
	before [;
		Yell:	if(actor == zombie){
					remove zombie;
					move ZomboGuts to self;
				}
				@output_stream 3 DispossessMessage;
				print "Before the echo of your bellowing faded entirely,
			  	the entire army of Orlane swept over the hill, 
			  	pikes and swords and all other manner of mayhem
				at the ready, but only a few of the lucky ones in 
				the front ranks succeeded in landing discrete 	
				blows before your ",(string) PossessionSuit(actor),
				" body was reduced to paste. Not standing on 
				ceremony, you retreated. ";
				@output_stream -3;
				DispossessSub(actor);
				rtrue;
	],
	w_to Bridge,
	e_to OuterWall,
	n_to GuardShack;

Detail -> GuardRoadDetail
	with
	select 0,
	parse_name [ w n flag;
		for (: flag == false: n++) {
			w = NextWord();
			switch (w) {  
				'check',
				'point',
				'checkpoint',
				'road'       :  self.select = 'checkpoint'; continue;
				'stone',
				'bridge'     :  self.select = 'bridge'; continue;
				'wall',
				'walls',
				'town'       :  self.select = 'town'; continue;
				'shelter',
				'sentry',
				'post',
				'building',
				'shack',
				'closet'     :  self.select = 'guardhouse'; continue;
	  		}
			flag = true; 
			n--;
		}
    return n;
	],
	description [;
		switch(self.select){
		'checkpoint' :GuardRoad.description();
		'bridge':"In the distance, you can see the top of a stone bridge."; 
		'town': "From here, you can see the top of the wall that surrounds the
             town.";
		'guardhouse': "A wooden shelter, built just to the north side of the
                   road.";
    }
  ],
  before [;
    examine : rfalse;
    enter   :  if(self.select == 'guardhouse'){
                 PlayerTo(GuardShack);
		 			<look>;
		 			rtrue;
	       	}
    default :  if(self.select ~= 'checkpoint')
                  "The ", (address) self.select," is too far away";
   ];

Being -> soldier "guard"
  with name 'guard' 'soldier' 'officer' 'lieutenant' 'second',
  wielding Sword,
  max_hp 25,
  current_hp 25,
  strength 12,
  armour 10,
  atk 10,
  dam 10,
  size 8, 
  capacity 10,
  memories "Yes sir...sentry duty, sir...enforce the curfew...on the lookout 
            for zombies...mindful of their spit...weapon ready...long shift...
            feet hurt...cucumbers...if captured blank mind...blank mind...
            blank mind...",
  appearance [; print "A young man with chiseled jaw and an athletic build";
                rtrue;],
  each_turn_for_just_me [;
    if(actor in Hill) rtrue;
    if(self.current_hp > 0 && self hasnt infection){
      if(parent(self) == parent(actor) && self ~= actor){
        if(random(20)<8){
          print "^The guard postures ",
	       (string) random("dramatically",
	                       "imprudently",
			       "impetuously",
			       "defiantly",
			       "belligerently",			 
			       "provocatively"),
              " and ",
	      (string) random ("challenges",
	                       "declares",
			       "jeers", 
			       "jibes"),
	      " , ~",
	      (string) random(
	      "You shall not pass this point, vile creature",
	      "Turn back, undead abomination, you have no buiness here",
	      "I warn you, disgusting creature, the entire army of Orlane
	       is within shouting distance. Turn back"),
	      "!~^";
        }
        Combat(self, actor); 
      }
    }
  ];

Garment ->-> Mail "suit of military mail armour"
  with name 'armour' 'mail',
  description "Shiny mail armour bearing the standards of the Town of Orlane 
               and insignia of a second lieutenant of the Army.",
  has clothing worn;

Weapon ->-> Sword "short sword"
  with name 'short' 'sword' 'blade',
  size 4,
  description "An army-issue short sword: a thick silvery blade with no 
               adornment.",
  dambonus 8;

Room GuardShack "Sentry Post"
  with
  description [;
	"The little shack is cramped; it is probably just a place for the
    guard to store an item or two and to keep dry when it rains.";
	],
  	before [;
		smell:"It smells like bad mayonaise here.";
    	exit:
      	PlayerTo(GuardRoad);
      	<look>;
      	rtrue;
  	],
  	s_to GuardRoad;

Detail -> GuardShackDetail
	with name 'sentry' 'post' 'shack' 'room' 'ceiling' 'floor'
				'walls' 'wall' 'shelf' 'shelves' 'building' 'closet'
				'shelter',
	description [;
		GuardShack.description();
	];

Prop -> Sandwich "sandwich"
	with name 'sandwich',
	description "A half-eaten mutton and cucumber sandwich.",
	before [;
	 	Lick,
		Taste: "Tastes like cucumber and mutton.";
		Smell: "Smells like cucumber and mutton.";
		Listen: "If cucumber and mutton had a distinctive sound,
				  that is what you would now be hearing.";
		Touch: "The sandwich is mushy. Too much mayonaise.";
	],
	has edible;

Outside OuterWall "Outer Wall"
  with name 'outer' 'wall',
  description "The army has massed here, near the outer walls of the town of
    Orlane. The wall is twice as high as a man, and made of crumbling, 
    white stone. There is a central gate, but it is closed.",
  w_to GuardRoad;

Being -> army "army"
  with name 'army' 'soldiers' 'troops',
  max_hp 2500,
  current_hp 2500,
  strength 2500,
  armour 2500,
  atk 100,
  dam 100,
  size 20, 
  capacity 10,
  memories 0,
  description "A fully outfitted, professional fighting force in full armour,
               five ranks deep.",
  before [;
     Drool:print "Suddenly, they take notice of you.^";
           Combat(self,actor);
           rtrue;
  ],
  each_turn_for_just_me [;
    if(actor in Hill || rabbit in location) rtrue;
    Combat(self, actor); 
  ],
  has animate ~concealed;


Fixture -> OuterGate "outer gate"
  	with
  	select 0,
  	parse_name [ w n flag;
    	for (: flag == false: n++) {
        	w = NextWord();
			switch (w) {
	  			'outer',  
	  			'gate',
	  			'stone',
	  			'sign',
				'population',	
	  			'white':  self.select = 'gate'; continue;
	  			'wall',
	  			'walls': self.select = 'wall'; continue;
	 			'town',
	  			'orlane': self.select = 'town'; continue;
	  			'spike',
	  			'spikes': self.select = 'spike'; continue;
	  			'hinge',
	  			'hinges': self.select = 'hinge'; continue;
	  			'stud',
	  			'studs',
	  			'bar',
	  			'bars': self.select = 'bar'; continue;
	  			'sign': self.select = w;continue;
	  		}
			flag = true; 
			n--;
    	}
    	return n;
   	],
   description [;
    switch(self.select){
      'gate':"The gate is clad in iron, studded, and reinforced with iron
              bars. The hinges must be buried in the wall, or on the other
	      side of the door, as no mechanism is apparent from this side.
	      A small sign above the gate reads, ~Welcome to Orlane. 
	      Population A012.~";
      'wall':"The top of the wall is crowned with sharp spikes, and the wall 
              itself is in good repair. The wall has been whitewashed so 
	      many times that the surface is almost smooth. Clearly, the
	      townpeople take security seriously.";
      'town':"This close to the gate, it is not possible to see the town itself.
              But you can hear the sounds of activity behind the wall.";
      'spike':"Sharp and metal; they don't send a welcoming message.";
      'hinge':"You can't see the hinges.";
      'bar':"Bars run horizontally and vertically along the wall and are 
             secured by large bolts. These bolts also reinforce the door
	     in areas between the bars, giving it a studded appearance.";
      'sign':"The sign is black slate, framed in painted white wood. The 
              lettering is painted, but the figure representing the town's 
	      population is written in white chalk.";
    }
  ],
  before [;
    Smell:"The scent of civilization: cooking fires, raw fish, as well as some 
           less pleasant smells that relate to inadequacies in civil 
	   engineering practices, personal hygiene, and urban planning.";
    Listen:"From within the walls of the town, you hear a vibrant market in 
            progress.";
    Taste:"As you prepare to taste the ", (address) self.select, " you are
           clubbed in the head by a soldier. You bite your tongue 
	   painfully.";
    Touch:"Before you can touch anything, the army pushes you away from the
           wall.";
    Climb:"Your attempt is short-lived, as multiple army pikes compete for your 
           attention.";
  ];

Room  WelcomeRoom "Hall Of Welcome"
  with
  description [;
    "An austere room with plain, white marble walls and a
    polished floor of checkered black and white tile. Through the 
    remnants of the ancient entranceway, only the barest sliver of pale daylight 
    penetrates the room (not that it matters...for you, at 
    least). There is ",(string) DoorToWoodKeyRoom.status()," ",
	(name) DoorToWoodKeyRoom," at the north end of the room.";
  ],
  s_to Hill,
  n_to DoorToWoodKeyRoom;

Detail -> WelcomeRoomDetail
	with
	select 0,
	parse_name [ w n flag;
		for (: flag == false: n++) {
			w = NextWord();
			switch (w) {  
				'hall',
				'welcome'    :  self.select = 'room'; continue;
				'wall',
				'walls'      :  self.select = 'walls'; continue;
				'pattern',
				'tile',
				'tiles',
				'floor'      :  self.select = 'floor'; continue;
				'entranceway':  self.select = 'entranceway'; continue;
			}
		flag = true; 
		n--;
	}
	return n;
	],
	description [;
		switch(self.select){
			'room'  :  WelcomeRoom.description();
			'walls' : "Plain, marble walls."; 
			'floor' : "The tiles are a bit glossy, but otherwise unremarkable. The
               		pattern alternates between black and white.";
			'entranceway' : "There used to be a cheap door that led to this room,
                     but now it has been utterly destroyed.";
		}
	],
	before [;
		go,
		enter:if(self.select == 'entranceway'){
					PlayerTo(Hill);
					<<look>>;
				}
	];
				

Fixture -> GrapeTable "wrought iron table"
  with name 'wrought' 'iron' 'table',
  description "The table's flat, highly polished top is supported by a
    root-like network of black, twisted iron strands which insert at odd
    angles into the western wall and floor. The oval surface of the
    table is bare except for a bowl.";

Prop -> Bowl "wooden bowl"
  with name 'wooden' 'bowl',
  description "A thick, wooden fruit bowl.",
  before [;
    Take:
      "If everyone walked off with the bowl, there wouldn't be much to 
       welcome other guests. It wouldn't be a very welcoming hall, now
       would it?  They're not taking any chances, though, the bowl is 
       glued to the table.";
  ],
  has container open static;

Prop ->-> MagickGrape "fruit"
  with name 'fruit' 'bristle' 'bristles',
  colour 'purple',
  size 1,
  description [;
    print "A succulent ";
    Vision.print_colour(self.colour);
    " fruit covered with minute, almost invisible bristles.";
  ],
  before [;  
    Taste: "You lick the fruit and find that it tastes a bit bitter. Of 
            course, that's just the skin of the fruit. Perhaps the inside
	    is sweeter.";
    Touch: "The fine bristles on the fruit's rind tickle you.";
    Smell: "The fruit has little scent.";
    Listen: "It sounds like every other fruit you have ever encountered.";
  ],
  has edible;

Prop -> Sculpture "sculpture"
  with
  parse_name [ w n flag;
    for (: flag == false: n++) {
        w = NextWord();
	switch (w) {  
	  'woman',
	  'sculpture',   
	  'statue',
	  'cape'      :  continue;
	}
        if(self.cleaned)
	  switch (w) {
	    'bulbous',
	    'eye',
	    'eyes',
	    'hand',
	    'hands',
	    'bronze'   : continue;
	  }
	else
	  switch (w) {
            'patina',
	    'green',
	    'dust'     : continue;
	  }
	flag = true; 
	n--;
      }
    return n;
   ],
  colour 'green',
  description [;
     if(~~self.cleaned){
	print "A sculpture of an old woman in a
         flowing cape. The sculpture is covered in dust
         and has aged and faded to a dark ";
	 Vision.print_colour(self.colour);
	 " patina. It is difficult to make out any detail.";
     }
     else{
        print "A gleaming, polished ";
	Vision.print_colour(self.colour);
	" sculpture of an exceptionally 
	 evil-appearing, wizened old woman, with penetrating, bulbous,
         hungry eyes, and claw-like, gnarled hands. The sculpture 
	 radiates a restrained hatred and sense of injustice that 
         yearns to revenge itself. It's hard to stop looking at it.";
     } 
  ] ,
  before [;
	Lick:
		if(~~self.cleaned){
			print "You lick the patina off the statue. ";
			<Rub self>;
			rtrue;
		}
    Rub:self.cleaned = true;
        self.colour = 'bronze';
        "Ew....shiny. And a bit scary!";
	Stare:
		 print (string) random (
			"Suddenly, you imagine yourself in priestly robes, living
			 in a small cabin",
			"There is a searing pain behind your eyes, and you 
			 lose consciousness momentarily",
			"You feel compelled to gnaw off your own limbs",
			"You develop an uncontrollable urge to eat a carrot"
		);
		".";
  ], 
   cleaned false,
   size 10;

TwoWayDoor DoorToWoodKeyRoom "marble door"
  with name 'marble' 'door',
  room1 WelcomeRoom,
  towards_room2 n_to,
  room2 WoodKeyRoom,
  towards_room1 s_to,
  appearance [;
    print "A solid-looking marble door.";
  ],
  before [;
  Attacking:
    "The sturdy door bears not the slightest evidence of your comparatively 
     feeble attack.";
  ];

Room WoodKeyRoom "Hall Of Wanting"
  with
  description [;
     print "Stairs lead downwards into this room from both the north and
     south ends; ",(string) DoorToWoodKeyRoom.status()," ",(name) 
	  DoorToWoodKeyRoom," leads out of the room to the south, and ",(string) DoorToGallery.status()," ",(name) 
	  DoorToGallery," leads northward. The room is panelled in dark wood, 
     and has an arched wooden 
     ceiling and grey, stone floor. Near the middle of 
     of the room, there is a sink inset into the east wall. ";
     if (MagickGrape in Drain && Knob has on)
       print "Water spills in a sheet over the edge of the sink and runs across
        the floor to the small ";
     else print "It looks like there is some sort of ";
     "hole in the middle of the floor near the north end.";
  ],
  s_to DoorToWoodKeyRoom,
  n_to DoorToGallery;    

Detail -> WoodKeyRoomDetail
	with
	select 0,
	parse_name [ w n flag;
		for (: flag == false: n++) {
			w = NextWord();
			switch (w) {  
				'room',
				'walls',
				'wood',
				'paneling',
				'panel',
				'panels',
				'wall',
				'stone',
				'floor',
				'hall',    		
				'roof',     
				'ceiling'     :  self.select = 'hall'; continue;
				'stair',
				'stairs'		:  self.select = 'stairs'; continue;
			}
			flag = true; 
			n--;
	}
	return n;
	],
	description [;
		switch(self.select){
			'hall' 		: 	WoodKeyRoom.description();
			'stairs'		:  "Small staircases lead in and out of
								 the room.";
		}
	];

Fixture -> Sink "marble sink"
  with name 'marble' 'sink' 'wall' 'walls',
  size 4,
  description [;
    print "A large marble sink ";
    if (PseudoWater in WoodKeyRoom && MagickGrape in Drain) 
      print "filled to the brim with water ";
    print "is inset partway into the wall. A 
           single white porcelain knob projects from the wall above the sink.
           Below the knob, a silvery wolf head points towards the sink 
	   beneath it. The wolf's mouth is open";
    if (MagickGrape in WolfHead) print ", and ", (a) MagickGrape," has been
      stuffed into it";
    if (Knob has on) print ", and a stream of water flows from it into the
           sink";
    print ". At the bottom of the sink, there is a small
           drain hole";
    if (MagickGrape in Drain) print " into which a purple fruit has been
      jammed";
    print ". ";
    if (Knob has on){
      if (MagickGrape in Drain) print "Since the drain has been plugged, water
        is overflowing the sink, spilling onto the floor, and draining towards
	the hole in the centre of the floor";
      else { 
        if (child(Drain)) print (A) child(Drain), " lies in the drain but does
	  not occlude it. ";
	print "A little whirlpool of water swirls down the drain";
      }
    print ".";
    }
    print "^";
  ],	 
  after [;
    Examine:
      OneDeep(self);
  ],
  before [;
	SwitchOn,
	SwitchOff,
	Turn: "How?";
  ],
  has container open;
  ![CONSIDER:] making objects of size > host too high to reach.

Fixture -> Knob "porcelain knob"
  with name 'porcelain' 'knob' 'valve' 'stem',
  size 4,
  description "A shiny, white, cross-shaped knob of smooth, cold porcelain.
    The knob is attached to the wall by a small metal stem. There are no 
    markings of any kind on the knob.",
  before [;
    Turn:
      if (self has on) <<SwitchOff self>>;
      if (self hasnt on) <<SwitchOn self>>;
    SwitchOn:  
      give self on;
      move PseudoWater to WoodKeyRoom;
      if (MagickGrape in WolfHead){
        print "Propelled by the water pressure, ",(the) MagickGrape,
	  " shoots out of ",(the) WolfHead,", ricochets off the side 
	   of ", (the) Sink," and lands near you, on the floor.";
        move MagickGrape to WoodKeyRoom;
      }
      else print "A stream of water now flows from the wolf's mouth into the sink. ";
      if (MagickGrape in Drain) Drain.plugged();
      "";
    SwitchOff: 
      give self ~on;
      if (~~(MagickGrape in Drain)) remove PseudoWater;
      "You shut off the flow of water.";
  ],
  has switchable ~on;

Fixture -> Drain "drain"
  with name 'drain' 'hole',
  description "At the bottom of the sink is a small, simple hole for the
    water to run out.",
  size 4,
  plugged [;
    print "The water can't drain because ",(the) self," is plugged by ",
    (the) MagickGrape,", and the water overflows ",(the) Sink,". "; 
    if(FloatingKey in FloorHole) FloatingKey.emerge();
  ],  
  capacity 1,
  before [;
    Receive:
     if(noun.size > 1) { 
        move noun to Sink;
        "",(The) noun," is too big to fit in the drain and rolls to the side.";
     }
     move noun to self;
     if(noun == MagickGrape) {
       print "You jam ", (the) MagickGrape," into the drain and it fits perfectly,
	making a tight seal. ";
       if (Knob has on) self.plugged(); 
       "";
     }
      "",(The) noun," lies in the drain, but doesn't fit very well.";
    LetGo:
      if (knob hasnt on) remove PseudoWater;
  ],
  has container open;

Fixture -> WolfHead "wolf head"
  with name 'wolf' 'wolf^s' 'head' 'spigot' 'faucet' 'tap' 'mouth' 'tube',
  size 4,
  description [;
    print "A gleaming silver wolf's head projects from the wall 
      above the sink. Its mouth is open and ";
    if (Knob has on) "water pours forth from it in a steady stream.";
    if (MagickGrape in self) "there is ", (a) MagickGrape," stuck in it.";
    "appears to be the end of a hollow tube.";
  ],
  before [;
    Receive:
      if(Knob has on) "Water sprays from the wolf's head spigot, and it is 
        impossible to jam ", (the) noun, " into it against the 
	pressure.";
      if(noun == MagickGrape){
        move MagickGrape to Wolfhead;
        "You shove ", (the) MagickGrape," into the wolf's mouth and it fits 
	 perfectly.";
      }
      move noun to Sink;
      if(noun.size > 1) print "",(The) noun," is too big to fit";
      else print (The) noun, " doesn't fit snugly into the wolf's head spigot";
      " and drops to the sink.";
  ],
  capacity 1,
  has container open;

Fixture -> FloorHole "floor hole"
  with name 'floor' 'hole' 'shaft',
  description [;
     print "The floor of the room slopes down almost imperceptibly towards
       the centre of the room. Here, you find a small, oddly shaped hole. ";
     if (FloatingKey in FloorHole) "At the bottom of the long, narrow shaft, 
       you can discern a key.";
     rtrue;
  ],
  before [;
    Receive:
      "You can't put ",(the) noun," in ", (the) self," -- the opening
       is too small.";
    Drool:
      "You can't salivate fast enough to keep up with the rate of drainage.
       Your spittle drains away almost immediately. Otherwise, it was just 
       the sort of thinking that separates you from the rabble.";
  ],
  has container open;

Prop ->-> FloatingKey "wooden key"
  with name 'wooden' 'key',
  size 1,
  description "A complicated-looking key made of light-coloured wood",
  before_implicit [;
	Take:
     return 2; !suppress
  ],
  before [;
    Take: 
      if(FloatingKey in FloorHole) "You can see the key, but can't reach it;
        the hole in the middle of the floor is just too narrow and deep. 
	How frustrating.";
  ],
  emerge [;
    move self to WoodKeyRoom;
    give self ~concealed;
    print "Buoyed up by the draining water, a wooden key has floated out of the 
     floor hole and now rests on the room's floor.";
    rtrue;
  ],
  has concealed;

TwoWayDoor DoorToGallery "speckled door"
	with 
	name 'speckled' 'door' 'lock' 'keyhole' 'bronze',
	room1 WoodKeyRoom,
	towards_room2 n_to,
	room2 Gallery,
	towards_room1 s_to,
	appearance [;
		print "A speckled door with bronze keyhole.";
	],
  	before [;
  	Attacking:
		"You bounce off the stone and are lucky that *you* aren't damaged!";
	Unlock,
	Open:
		if(FloatingKey in actor)
			give self ~locked;
		if(self hasnt locked){
			give self open;
			"The door opens with a click.";
		}
	Close:
		"The door seems to be stuck in the open position.";
	],
	with_key FloatingKey,
	has lockable locked door static openable;

Room Gallery "Portrait Gallery"
  with
  description [;
				"A long hall lined with a collection of portraits of men and 
				 women in priestly robes.  Some of the faces seem vaguely 
				 familiar to you.  There must be hexanies of them here.  One
				 picture frame stands out in particular, an empty frame at the
				 north end of the hall.  There is ",
				(string) DoorToGallery.status()," ",(name) 
	 			 DoorToGallery," at the south end of the hall.  
				To the north, there is an open archway which leads to an icy
				cavern.";
  ],
  n_to SlipperyRoom,
  s_to DoorToGallery;

Detail -> GalleryDetail
	with
	select 0,
	parse_name [ w n flag;
		for (: flag == false: n++) {
			w = NextWord();
			switch (w) {  
				'room',
				'walls',
				'wall',
				'floor',
				'hall',    		
				'roof',     
				'ceiling'     :  self.select = 'hall'; continue;
				'faces',
				'men',
				'man',
				'women',
				'woman',
				'people',
				'picture',
				'pictures',
				'portrait',
				'portraits'	:  self.select = 'portraits'; continue;
				'priestly',
				'robe',		 
				'robes'		:  self.select = 'robes'; continue;
				'ice',
				'icy',
				'cavern'		:  self.select = 'cavern'; continue;
				'empty',
				'frame'		:  self.select = 'frame'; continue;
				'face',
				'nibex'		:	self.select = 'face'; continue;
				'archway',
				'frames',
				'mist',
				'nameplate'	:  self.select = w; continue;
			}
			flag = true; 
			n--;
	}
	return n;
	],
	description [;
		switch(self.select){
			'hall' 		: 	Gallery.description();
			'portraits'	: 	"These are formal portraits, painted by a master."; 
			'robes' 	  	: 	print "The people in the pictures are all wearing similar
									robes, which strike you as priestly. ";
								if(PriestRobe has moved)
									"They remind you of the robe you found in the grave.";
								else
									"";
			'mist'			:  "A disturbing, depthless void.";
			'face'			:  "In your mind's eye, you can almost focus on the face...
								but then it slips away.";
			'archway'	  	:  "An open archway leads to an icy cavern to the north.";
			'frames' 		: 	"The portraits are framed nicely.";
			'cavern'	  	:  "To the north, there is a room with black walls and an 
								icy floor. You can see straight through this room to the
								other side, where there is another exit.";
			'frame'		:	"The last frame towards the north end of the hall is not
								 actually empty, but filled with a swirling, flat grey
								 mist.  You think you can almost glimpse a face, but then
								 it is gone.  There is a small nameplate under only this
								 blank frame.";
			'nameplate'	:  quote("NIBEX");
								"";
		}
	],
	before [;
		Examine : rfalse;
		Search	 : if(self.select == 'frame')
						"The frames are mounted flush with the walls, and
						 cannot be moved.";
		Go,
		Enter	:  if(self.select == 'cavern' or 'archway')
						<<go n_obj>>;
		default : switch(self.select) {
						'door',
						'archway',
						'cavern'		: "The cavern is 
											too far away.  Why not 
											go over there?";
						'mist'			: "The mist seems to be part of the painting.";
						'robes'		: "The robes are in the painting.";	
					}
  ];

Room SlipperyRoom "Hall Of Cold Logic"
!todo:system for freezing down items dropped in room until 
!cooling system deactivated
  with 
  east_west 0,
  north_south 0,
  room_size 3, !room is a grid of (room_size*2+1) by (room_size*2+1)
  initial "The temperature drops as you enter this long, echoing
	   chamber. The ceiling and floor seem to be coated with a clear,
	   slippery, hard substance. The walls, on the whole, look rubbery.
	   As you contemplate that, you 
	   realise that you have slid to the centre of the room...",
  description [;
     print "The white ceiling and floor of the room are
	   entirely unremarkable except for their unusual slickness. You can 
	   see exits near the centre of the north and south walls. ";
    self.room_location();
   ],
   room_location [;
	  if (Absolute(self.north_south) == self.room_size &&
         Absolute(self.east_west) == self.room_size){
       print " You are at the ";
	    if (self.north_south == -self.room_size) 
         print "south"; else print "north";
       print "-";
       if (self.east_west == -self.room_size) 
         print "west"; else print "east";
		"ern corner of the room.";
     }
     if(self.east_west == 0 && self.north_south == 0)
       "You are dead-centre in the middle of the room.";
     print "You are ";
     self.room_coords(self.north_south,"south","north");
     print " and ";
     self.room_coords(self.east_west,"west","east");
     print ". ";
     if(absolute(self.north_south) == self.room_size &&
        self.east_west == 0){
       print "The exit is just to your ";
       if (self.north_south == -self.room_size)
		  print "south";
       else
         print "north";
       print ".";
     }
     "";
   ],
   room_coords [coord dir1 dir2;
       if (coord == 0){ 
          print "equidistant between the ",(string) dir1,
            "ern and ", (string) dir2, "ern walls";
	       rtrue;
       } 
       switch (Absolute(coord)) {
			3: print "right next to";
			2: print "more than halfway to";
			1: print "less than halfway to";
	  	}
	print " the ";
	if (coord < 0) print (string) dir1; else  print (string) dir2;
	print "ern wall";
  ],
  rebound [direction size ns ew hit_wall;
    ns = 0;
    ew = 0;
    hit_wall = 0;
    switch(direction) {
	    u_to: print "ceiling.^";
	    d_to: print "floor.^";
	    n_to, s_to, e_to, w_to: 
	      LanguageDirection(direction);
              print "ern wall. ";
	      switch(direction){
	        n_to: ns = 1;
		s_to: ns = -1;
		e_to: ew = 1;
		w_to: ew = -1;
	      }
	    ne_to, se_to, nw_to, sw_to:
	       LanguageDirection(direction);
	       print "ern corner of the room. ";
	       switch(direction){
	         ne_to: ns = 1; ew = 1;
		 se_to: ns = -1; ew = 1; 
		 nw_to: ns = 1; ew = -1;
		 sw_to: ns = -1; ew = -1; 
	       }
    }

    if(ns) { 
      self.north_south = self.north_south - ns*size;
      if (self.north_south < -self.room_size) self.north_south = -self.room_size;
      if (self.north_south > self.room_size) self.north_south = self.room_size;
    }

    if(ew) {
      self.east_west = self.east_west - ew*size;
      if (self.east_west < -self.room_size) self.east_west = -self.room_size;
      if (self.east_west >  self.room_size) self.east_west = self.room_size; 
    }
   
    if (~~
         	(direction == u_to or d_to) ||
          	(self.east_west == -self.room_size  && direction == e_to) ||
			(self.east_west == self.room_size && direction == w_to) ||
			(self.north_south == -self.room_size  && direction == n_to) ||
			(self.north_south == self.room_size && direction == s_to) ) {
      print "You ";
      switch(size) {
     			1: print "are ever so gently propelled";
      			2: print "slip lazily";
	   			3: print "coast easily";
				4: print "slide deftly";
				5: print "glide smartly";
				6: print "scud forcefully";
				7: print "careen";
		8 to 200: print "rocket";
        default: print "go";
      }
      print " ";
      DirectionToText(OppositeDirection(direction));
      print ". ";
    }
    self.room_location();
 ],
  before [;
    Examine:
      switch(noun){
        d_to:"The floor is icy. Yet not quite ice. Colder.";
        u_to:"The ceiling is far over head and, like the floor, seems frozen solid.";
        default:rfalse;
      }
    Touch: 
      switch(noun) {
        d_to:"The floor is numbingly cold, and you pull back instantly from
              the contact.";
        u_to:"You can't reach the ceiling, and you are afraid that it would be
              unwise to jump for it given your precarious footing.";
        Pseudowall:
          if(Pseudowall.next_to_wall())
            "The wall is frigid and extremely slick. Strangely, it is also very
             elastic.";
          else
            "You can't reach the wall.";
          default:rfalse;
      } 
    Lick:
      if (player ~= skeleton) !because, of course, skeletons lack soft tissue like tongues
        switch (noun) {
          d_to:"Your tongue adheres briefly to the floor and then snaps painfully back
                into your mouth.";
          u_to: "Your tongue is not long enough to reach the ceiling. Nor, before you
                 ask, is any other body part.";
          Pseudowall:
              if(Pseudowall.next_to_wall())
                "Your tongue slides all over the slippery surface. Your tongue is 
                frozen almost solid and is numb.";
              else
				  "Your tongue isn't close enough to the wall to lick it.";
          default:
            rfalse;
        }
    Drop: 
       if(noun)
	     "You are afraid that anything you drop in here would instantly 
           freeze to the floor, so you hang on to ",(the) noun,".";
       else
         "You drop to the floor, but it is so cold that you get up immediately.";
    Go: if(self.north_south == -self.room_size && noun == s_to) {
      self.east_west = 0;
      self.north_south = 0;
      PlayerTo(Gallery); 
      rtrue;}
        if(self.north_south ==  self.room_size && noun == n_to) {
      self.east_west = 0;
      self.north_south = 0;
      PlayerTo(VaultedJunction); 
      rtrue;}
	"You can't get any traction!  You haven't moved at all!";
    Jump: "After a catastrophic fall, you flounder helplessly for a moment.";
    Attacking:
        if(noun == d_to) "Beating the floor has no effect.";
	if(noun == u_to) "You can't reach the ceiling.";
	rfalse;
    Drool:
      if (noun) {
        if (noun in compass) {
           if (second && inp2 == 1){
	     print "You spew spitballs rapid fire ";
	     DirectionToText(noun);
	     print " and they shatter in a shower of icy fragments against
	       the ";
	     if(second < 0) second = 1;
	   !  if(second > 200) second = 200;
	     self.rebound(noun,second);
	   }
	   else {
             print "You ", (string) random("expectorate",
	                                "spit",
					"send a glistening ball of spittle"
				        )," ";
             DirectionToText(noun);
             print ". The disgusting ball of spit freezes instantly and shatters
	     upon impact with the ";
	     self.rebound(noun,1);
	  }
      }
      else {"Your spit freezes solid when it has barely left your lips, 
        and shatters into so many microscopic icicles when it hits ", 
	(the) noun,"."; 
      }
    rtrue;
    }
    "The former droplet of saliva melds with the 
     slick coating floor, having frozen solid.";
    Throw:
      if(~~(second)) "You throw ", (the) noun, " in the air and then catch
        it again, carefully maintaining your balance. It might be more helpful
		 to throw it in a particular direction.";
      if (second == PseudoWall)
		 if(PseudoWall.direction)
			second = PseudoWall.direction;
		 else
		  "Could you please specify a particular wall, for example the northern one?";
      if (second in compass) {
        print "You throw ", (the) noun," ";
	DirectionToText(second);
	print "; and you catch it in mid-air, after it bounces off the ";
	self.rebound(second,noun.size);
	rtrue;
   }
  ],
  s_to Gallery,
  n_to VaultedJunction; 

Fixture -> PseudoWall
  with 
  direction 0,
  wall_selected 0,
  short_name [;
	if(self.direction){
		switch (self.direction){
			e_obj:print "east";
			s_obj:print "south";
			w_obj:print "west";
			n_obj:print "north";
		}
		print "ern ";
	}
	print (address) self.wall_selected;
	rtrue;
  ],
  parse_name [ w n flag;
	self.direction = 0;
	self.wall_selected =0;
    for (: flag == false: n++) {
        w = NextWord();
	if (w == 'wall' or 'walls') {
		self.wall_selected = w;
		continue;
	}
	if (w == 'eastern' or 'east') { self.direction = e_obj; continue;}
	if (w == 'southern' or 'south') { self.direction = s_obj; continue;}
	if (w == 'western' or 'west') {self.direction = w_obj; continue;}
	if (w == 'northern' or 'north') {self.direction = n_obj; continue;}
	flag = true; 
	n--;
    }
    if(self.wall_selected)
		return n;
	else
		return 0;
  ],
  next_to_wall [;
    switch (self.direction) {
     	n_obj:if(SlipperyRoom.north_south == SlipperyRoom.room_size)
 			 	return(true);
		s_obj:if(SlipperyRoom.north_south == -SlipperyRoom.room_size) 
				return(true);
		e_obj:if(SlipperyRoom.east_west  == SlipperyRoom.room_size) 
				return(true);
		w_obj:if(SlipperyRoom.east_west  == -SlipperyRoom.room_size) 
				return(true);
      	0:if (Absolute(SlipperyRoom.east_west) == SlipperyRoom.room_size || 
             Absolute(SlipperyRoom.north_south) == SlipperyRoom.room_size)
            return(true);
    }
    rfalse;
  ],
  before [;
    Take:
      "You can take a moment, you can take care, but you can't take a wall.";
    Examine:
	  if(self.direction){
	    switch (self.direction){
	      n_obj,
	      e_obj,
	      w_obj,
	      s_obj:"",(The) self," is rubbery and black.";
	   }
	}
	else
		"The walls are rubbery and matte black.";
    Push,
    Attacking:
       if(~~(Absolute(SlipperyRoom.north_south) == SlipperyRoom.room_size ||
             Absolute(SlipperyRoom.east_west) == SlipperyRoom.room_size))
       "You are too far from the wall to do anything to it, except perhaps
       to spit in its general direction out of frustration.";
    
       if(self.direction){
         if (~~((self.direction == n_obj && SlipperyRoom.north_south ==
            SlipperyRoom.room_size) ||
	        (self.direction == s_obj && SlipperyRoom.north_south ==
       	-SlipperyRoom.room_size) ||
	        (self.direction == e_obj && SlipperyRoom.east_west == 
           SlipperyRoom.room_size) || 
	        (self.direction == w_obj && SlipperyRoom.east_west == 
			-SlipperyRoom.room_size)))
	       "You're not next to that wall!";
       }
       else {
	     if (SlipperyRoom.east_west == SlipperyRoom.room_size)
   			self.direction = e_obj;
		 if (SlipperyRoom.east_west == -SlipperyRoom.room_size)
   			self.direction = w_obj;
		 if (SlipperyRoom.north_south == SlipperyRoom.room_size)
           self.direction = n_obj;
		 if (SlipperyRoom.north_south == -SlipperyRoom.room_size)
           self.direction = s_obj;
        }	
       
       if(action == ##Attacking){
	 print "You rocket across the room after ", 
			   (string) random("pound",
					   "slam",
					   "attack",
					   "hammer"),"ing the ";
	      SlipperyRoom.rebound(self.direction,3*SlipperyRoom.room_size);
         rtrue;
       }
       if(action == ##Push){
	 print "You slide the length of the room after pushing the ";
	 SlipperyRoom.rebound(self.direction,3*SlipperyRoom.room_size);
	 rtrue;
       }
];	

Room VaultedJunction "Vaulted Junction"
  with
  description [;
    "This room is remarkable for its high, arched ceiling which
    almost gives you the impression of being outside at night. An
    inclined metal shaft leads off to the west, there is 
	 some sort of tiled chamber to the east,
    and there is a frozen cavern to the south. In addition,
    a steep spiral stairway leads down. A sign is engraved into the wall
    near the top of the stairs.";
    ],
    before [;
      Listen : "You hear a distant sound of croaking frogs. It echoes around
                this cavernous room, but it seems to be coming from the east.";
    ],
    s_to SlipperyRoom, 
    w_to  MetalShaft,
    e_to  FrogRoom,
    d_to  SpiralStairCase;

Detail -> VaultedJunctionDetail
	with
	select 0,
	parse_name [ w n flag;
		for (: flag == false: n++) {
			w = NextWord();
			switch (w) {  
				'room',
				'walls',
				'vaulted',
				'junction'    :  self.select = 'room'; continue;
				'roof',     
				'ceiling'     :  self.select = 'ceiling'; continue;
				'metal',
				'shaft'		  :  self.select = 'shaft'; continue;
				'tiled',		  
				'chamber'	  :  self.select = 'chamber'; continue;	
				'frozen',		 
				'cavern'      :  self.select = 'cavern'; continue;
				'stair',
				'stairs',
				'stairway',
				'staircase'   :  self.select = 'staircase'; continue;
				'floor'       :  self.select = 'floor'; continue;
			}
			flag = true; 
			n--;
	}
	return n;
	],
	description [;
		switch(self.select){
			'room'      :  VaultedJunction.description();
			'ceiling'   : "The ceiling is bell-shaped, a bit more pointed than a
							true dome. It gives a feeling of great spaciousness here."; 
			'floor'     : "There is nothing remarkable about the floor aside from the 
							staircase that is inset into it.";
			'shaft' 	  : "To the west, there is a metal corridor, but you can't see
							where it leads.";
			'cavern'	  :  "To the south, there is a room with black walls and an 
							icy floor. You can see straight through this room to the
							other side, where there is another exit.";
			'chamber'	  :  "There is another room to the east, but you can't make out 
							much detail from here.";
			'staircase' : "There is a circular hole in the floor, and you can make
							out the top two steps from here, apparently descending 
							in a spiral.";
		}
	],
	before [;
		Go,
		Enter  : 
			switch (self.select) {
				'shaft'	:if(actor.size > MetalShaft.size)
							"You are too big to enter ",(the) MetalShaft,". Sorry.";
							PlayerTo(MetalShaft);
				'cavern'	:PlayerTo(SlipperyRoom);
				'chamber'	:PlayerTo(FrogRoom);
				'staircase':PlayerTo(SpiralStairCase);
				default:rfalse;
			}
			rtrue;
		Examine : rfalse;
		default : if (self.select == 'corridor' or 'staircase') 
						"You'll have to go to that ", (address) self.select," to do 
						that.";
  ];

Fixture -> SignAtTopOfStairs "sign"
  with name 'engraved' 'graven' 'sign',
  description "^Faithful Candidate,^^
  We applaude your effort and ingenuity in coming this far. Now that 
  preliminaries are out of the way, we can get down to the actual
  process of neuroalignment. If you fail, no matter how gruesome your death, 
  you can rest 
  assured that there will be others, and that however long it takes, 
  we shall in the end select a suitable candidate. It is more important to 
  assure mental compatibility than to do so hastily.^^
  The process of alignment may be gradual, so we have provided several 
  tools, found in the adjoining chambers, to aid you along the way.^^
  p.s. Sorry about the lousy poetry -- it is an unavoidable part of the 
  process. And really, it is the least of your problems.";

Room FrogRoom "Frog Room"
  with
  description [;
    print "A round room with domed ceiling. Every surface is covered in
    small, reflective tiles. The tiles create a mosaic depicting water and
    lily pads on the floor and scores of jumping frogs as the base of the walls.
    The scene is reinforced by a continuous chorus of croaking which 
    reverberates and is reflected by the tiles. You can exit to the west. ";
    if(whistle in self && whistle hasnt moved){
      print "A small, silvery tube floats in the middle of the room,
        lazily tumbling, as if weightless.";
    }
    "";
  ],
  before [;
    Listen: "It sounds like you are surrounded by an army of frogs.";
	 Smell: "You are reminded of the organic rotting smell of a 
				stagnant swamp.";
  ],
  w_to VaultedJunction;

Detail ->FrogRoomDetail "room"
  with
  select 0,
  parse_name [ w n flag;
    for (: flag == false: n++) {
        w = NextWord();
	switch (w) {  
	  'roof',     
	  'ceiling'     :  self.select = 'ceiling'; continue;
	  'wall',
	  'walls',
	  'mosaic',
	  'mosaics',
	  'frog',
	  'frogs',
	  'tile',
	  'tiles'       :  self.select = 'walls'; continue;
	  'chamber',
	  'room'	:  self.select = 'room'; continue;
	  'lily',
	  'pad',
	  'pads',
	  'water',
	  'floor'	:  self.select = 'floor'; continue;
	  }
	flag = true; 
	n--;
      }
    return n;
   ],
   description [;
    switch(self.select){
    'room'      :  FrogRoom.description();
    'ceiling'   : "The lighter colour of the domed ceiling gives you the 
                   impression of an evening sky.";
    'walls'     : "The very small tiles that form the mosiacs on the walls
					are glasslike and smooth. The level of detail is 
					astounding, and the frogs on the wall are so realistic 
					that you would almost swear that they are alive.";
    'floor'     : "Although very smooth, the floor is not slippery. The
					lily pads and water depicted on the floor are just as
					realistically rendered as the frogs on the walls.";
    }
  ];

Prop -> Whistle "whistle"
  with name 'whistle' 'silvery' 'tube',
  description "It is clearly a one-note whistle, like the kind used to call
    dogs.",
  before [;
    Take:
      give self ~concealed;
  ],
  has concealed;

Room MetalShaft "Metal Shaft"
  with
  description [;
    print "A straight, metal shaft";
    switch (self.size){
      0: print "which is completely blocked";
      3: print " with a very low ceiling";
    }
    ". The shaft runs east to west and there are exits at both ends. To
    the east, you can see a cavernous room, and to the west you catch a hint of 
    velvet-covered walls.";
  ],
  size 3,
  w_to CatRoom,
  e_to VaultedJunction;

Detail ->MetalShaftDetail
	with
	select 0,
	parse_name [ w n flag;
		for (: flag == false: n++) {
			w = NextWord();
			switch (w) {  
				'roof',     
				'ceiling'     :  self.select = 'ceiling'; continue;
				'wall',
				'walls',
				'shaft',
				'corridor',
				'passage',
				'metal'	:  self.select = 'shaft'; continue;
				'cavern',
				'cavernous'   :  self.select = 'cavern'; continue;
				'fabric',
				'velvet'      :  self.select = 'velvet'; continue;
			}
			flag = true; 
			n--;
		}
		return n;
	],
	description [;
		switch(self.select){
			'room'      :  MetalShaft.description();
			'ceiling'   : "The ceiling is a giant block of metal, and it can be
							raised and lowered, presumably as a way of restricting
		   movement between rooms.";
			'shaft'     : "A straight metal corridor with a completely smooth
							surface.";
			'cavern' : "The room to the east is large, so you can't see its
						full extent. Its roof is also above your field of 
						vision.";
			'velvet'    : "The walls of the room to the west are covered in a fabric
						-- you would guess, velvet. You can't see any other detail
						from here.";
		}
	],
	before [;
		Dig : 	print "Damn straight. ";
				if (cluecat in CatPedestal) 	 
			  		"Check out the cat who won't cop out, when there's danger all about, 
			   		on the groovy pedestal one room to the west.";
				else
					"He's one cool cat.";
  ];

Room CatRoom "Velvet Room"
  with
  colour 'purple',
  description [;
    print "An egg-shaped room which is lined floor, walls and ceiling
      with a lush ";
    Vision.print_colour(self.colour);
    print " velvet. There is a pedestal in the middle of the room. The 
      column of the pedestal is covered in fabric, and the fabric has scratch
      marks, as if sliced with a razor-sharp tool. ";
    if(child(CatPedestal)){
		print "On top of the pedestal, there is ";
		if(child(CatPedestal) == cluecat)
			print "a cat statuette";
		else
			print (a) child(CatPedestal);
		print  ". ";
	}
    print "At the base of the pedestal is a small, brass plaque.
      The only exit from the room is the metal shaft to the east, which ";
    switch (MetalShaft.size) {
    0:print "has been completely blocked";
    3:print "is very small";  
    10:print "is wide open";
    }
    print ". Next to the shaft, a ";
    Vision.print_colour('yellow'); 
    " lever sticks of out the wall.";
   ],
   e_to MetalShaft;

Detail ->CatPlaque "plaque"
  with
  name 'plaque' 'brass' 'engraved' 'graven' 'sign',
  description [;
	print "A polished metal plaque at the base of the pedestal 
			reads:^^";
	("My cat has a bizarre predilection^
	Preferring pushishment to affection^
	Should you meet some frustrating obstruction^
	Of perversely exotic construction^
	One need only remember that^
	for a clue, whack it with the cat.^").print_to_array(Centrist);
	TxtEntry.align_centre(Centrist,RIGHT_MARGIN,true);
  ];

Detail ->CatRoomDetail
	with
	select 0,
	parse_name [ w n flag;
		for (: flag == false: n++) {
			w = NextWord();
			switch (w) {  
				'roof',     
				'ceiling',
				'wall',
				'walls',
				'room',
				'floor'		:  self.select = 'room'; continue;
				'fabric',
				'velvet'		:  self.select = 'fabric'; continue;
				'metal',
				'shaft',
				'corridor',
				'passage'		:  self.select = 'shaft'; continue;
			}
			flag = true; 
			n--;
		}
		return n;
	],
	description [;
		switch(self.select){
			'room'      : CatRoom.description();
			'fabric'    : "Close up, it looks gaudy.";
			'shaft'     : "A sloping metal corridor to the east 
							 which must be designed to 
							 limit access to this room.";
    }
  ],
	before [;
		Examine: rfalse;
		Go,
		Enter	:  if(self.select == 'shaft')
						<<Go e_obj>>;
		default: "You'll have to enter the metal shaft to do 
					that.";
	];

Fixture ->CatLever "lever"
  with name 'lever',
  parse_name [;
    return(Vision.parser(self));
  ],
  colour 'yellow',
  description [; 
    print "The ";
    Vision.print_colour(self.colour);
    print " lever ";
    switch (MetalShaft.size){
      0:print "has been pushed all the way towards the pedestal";
      3:print "is in a mid-position, and sticks straight up";
      10:print "has been pulled all the way towards the entrance";
    }
    ".";
   ],
  before [;
    Pull:
      switch(MetalShaft.size){
        0:MetalShaft.size = 3;
	  "The several tonne metal barrier that had been blocking the side
	   passage has risen slightly, with a grating sound. There is now
	   a small passage to the east.";
	3:MetalShaft.size = 10;
	  "The passage leading to this room enlarges from a mere crawl space
	   to true hallway as its ceiling retracts with a sliding sound.";
	10:"You can't pull it any further.";
      }
    Push:
      switch(MetalShaft.size){
	0:"You can't push it any further.";
	3:MetalShaft.size = 0;
	 "Clunk. The room is sealed off as the metallic ceiling of the 
	   passageway drops all the way.";
	10:MetalShaft.size =3;
	  "The passage leading to this room shrinks as its ceiling lowers
	   almost all the way.";
      }
  ];

Fixture ->CatPedestal "marble pedestal"
  	with name 'marble' 'pedestal' 'grooves' 'scratch' 'marks' 'marks',
  	description "A straight column of marble, with smooth vertical grooves. 
				The column is covered in a thick fabric, and the fabric has been
				scratched as if by sharp claws. There is a plaque at the foot of the
				pedestal.",
	capacity 1,
  	has supporter ~concealed;

Prop ->-> cluecat "cat"
  with
  parse_name [ w n flag;
    for (: flag == false: n++) {
		w = NextWord();
		switch (w) {  
			'cat',
			'black',
			'ebony':continue;
		}
		if (self notin actor)
			switch(w) {
				'statue',
				'statuette',
				'gem',
				'gems':continue;
			}
		if (w == 'frizzy') continue;
	flag = true; 
	n--;
	}
  return n;
  ],
  size 4,
  description [; if(cluecat in actor)
                   "A frizzy black cat with mysterious yellow eyes.";
                   "A finely carved ebony cat statuette, inlaid with 
		    		  precious gems.";
    ],
  before [stuff;
    Drop: if(cluecat in actor) {
				if(location == Bridge){
					print "The cat smiles carnivourously and remarks,
					~This should be fun. See you on the other 
					 side!~^^";
				move cluecat to FrogRoom;
				rtrue;
				}
				move cluecat to parent(actor);
             "The cat reverts to the form of a stone statuette.";
          }
          "You didn't have the cat, so it shouldn't be surprising
           that your last action was entirely superfluous";
    Take: if(cluecat.size > actor.size)
			  "You are too tiny to pick up such a large cat!";
          if(cluecat in actor) "You have already got the cat!";
          print "As soon as you pick up the cat, it comes alive, hissing
                 and arching its back. The chaotic mass of fur, teeth
                 and claws is quite a handful...^";
 			stuff=child(actor);
			!my happy place is used for temporary storage while working through
			!this loop.
			while(stuff){
 			  stuff = child(actor);
  			  if(stuff){
					if((stuff has worn) ||
						(stuff ofclass Weapon && actor.wielding == stuff))
						move stuff to MyHappyPlace;
					else {
						keep_silent = true;
						<drop stuff>;
						keep_silent = false;
						!move stuff to parent(actor);
              		print (string) random(
                			"Oops",
               			"Ack",
              			"Oy",
              			"Zounds",
              			"Doh",
             		 		"Dang",
							"Oofta",
							"Aaarrgghhhhh",
                			"Yipes"
              		);
              		print "!!!...dropped ",(the) stuff,"!^";
            		}
				}
			}
		   while (child(MyHappyPlace))
			  move (child(MyHappyPlace)) to actor;	
          move cluecat to actor;
          "^Now that you can pay full attention to the cat, it 
           nuzzles you.";
    Attacking:
      if(self notin actor)
        "The little cat statue does not appear damaged at all.";
      else
        "",(string) random ("Oh yeah.",
	           "That's what I'm talkin' about!",
			    "Do your worst!",
			    "Is that all you have?",
			    "Okay, teddy boy, don't hold back.",
				"Let it all out!",
				"Bring it on!",
				"Let's have another, this time like you mean it!",
				"Come on, my grandmother could do better.",
				"I've seen kittens that are tougher. Take it up a notch, would ya?",
				"A little more to the left, please.",
				"That was a good one.",
				"Purrrr...",
				"I could do this all day and night.",
				"Oh, are you tickling me?",
				"Am I suppossed to be impressed?",
				"Quite enjoyable.",
				"That's the way to my heart, all right.",
				"It's times like this that I wish I could remember where I put
				 the whip.",
				"If only every cat were so lucky!",
				"Heavenly.",
				"Don't let up!",
				"Again, again!",
			    "That felt nice.");
    ];   

Room SpiralStairCase "Spiral Stairs"
  with
  description [;
    "The staircase is made of dull, black stone, and a bannister 
    of the same material spirals down along the wall. The staircase is steep
    but regular, with landings every step. You can go up or down.";
  ],
  u_to VaultedJunction,
  d_to BaseOfStairs;

Detail -> SpiralStairCaseDetail
	with
	select 0,
	parse_name [ w n flag;
		for (: flag == false: n++) {
			w = NextWord();
			switch (w) {  
				'roof',     
				'ceiling',
				'wall',
				'walls',
				'room'			:  self.select = 'room'; continue;
				'stairs',
				'staircase',
				'black',
				'stone',
				'stairway',		
				'step',
				'steps'		:  self.select = 'steps'; continue;
				'bannister',
				'rail',
				'railing',
				'handrail'    :  self.select = 'bannister'; continue;
				'landings',
				'landing'     :  self.select = 'landing'; continue;
			}
			flag = true; 
			n--;
      	}
		return n;
	],
	description [;
		switch(self.select){
			'room'      : SpiralStaircase.description();
			'steps'      : "The steps are made of black stone, and are perfectly
							square, without any tool marks at all.";
			'bannister' : "The bannister is merely a raised lip of stone that 
							arises from the wall itself and follows the course
							of the stairs.";
			'landing'   : "There are regularly spaced flat areas between runs of
							the stairs.";
    }
  ];

Room BaseOfStairs "Bottom Of Stairwell"
  with 
  description [;
    print  "At the bottom of the staircase, there is a large room with
            no furnishings. "; 
    if(ChallengeOne in self) 
      print "Well, except the monkey golem and the sign. There is a room 
      behind the monkey, but you can't get a good
      look at it. Even more surreally, there is 
      a small storm cloud over the monkey's head, and rain is pouring down 
      violently only in the immediate area of the monkey. After all that, it 
      seems logical that the monkey is using an umbrella to keep dry. ";
    else
      print "There is an exit to the east.";
    " Obviously, going up the stairs is also a consideration.";
  ],
    u_to SpiralStairCase,
    e_to ChallengeOne;

Detail -> BaseOfStairsDetail "bottom of stairwell"
  with name 'base' 'bottom' 'stairwell' 'room' 'stairs' 'staircase' 'step'
            'steps',
  description [;
    BaseOfStairs.description();
  ];

Detail -> Umbrella "umbrella"
	with
	name 'umbrella' 'handle' 'polished' 'bone',
	description "A black umbrella with a polished bone 
					handle. It looks brand new. It is very 
					effective in keeping the monkey dry.",
  	before [;
		Push,
		Pull,
		Attacking,
		take:
			"The monkey holds the umbrella higher, 
			jealously guarding his umbrella.";
	];

Detail -> StormCloud "storm cloud"
  with 
  name 'storm' 'cloud' 'tempest',
  description "A miniature tempest, black in the centre, fringed with grey,
    and as forboding as such a little cloud can manage to be.",
  before [;
	examine:	rfalse;
	default:	self.zap();
				rtrue;	 
  ],
  zap [;
	actor.current_hp = actor.current_hp - 2;
	if (actor.current_hp < 0) actor.current_hp = 0;
		"Lightning lashes down cruelly from the little storm cloud
		and strikes you!";
  ];
  
Obstruction -> ChallengeOne "monkey golem"
  with name 'monkey' 'golem',
  description "A beefy looking stone monkey golem stands between you and the 
    next room. Clearly, he intends to block your way, because whichever way
    you move, he apes your movement. The
    monkey looks at you expectantly, as if you are supposed to say something. 
    There is a small sign on the wall to the right of the monkey.",
  max_hp 250,
  current_hp 250,
  size 10,
  wrong_guess 0,
  cat_text 
    "This guy's trying to make a monkey out of you!  Don't listen to his 
       double talk!"
    "You'd better follow his instructions to the letter!"
    "Harder!  Oh come on, he's spelling it out for ya!"
    "Put some back into it. For you answer, look to Gibbons, Baboons,
       Chimpanzees, not Macaques, Tamarins, Lemurs, or Howlers."
    "Come on. I barely felt that one. I think he wants you to say something."
    "Take it literally, one clue per line!",
  door_to EndOfPartOne,
  replacement_object TinMonkey,
  before [;
    Touch: "Now is not the time for the touching of the monkey!";
	 Kiss, 
	 Lick: "The monkey blushes slightly, and then squares its shoulders
			 suggesting that while flattered, there is a time and a place
			 for everything, and just now the monkey is here on business.";
	 Smell: "Something smells burnt, or perhaps it would be more appropriate
			  to say, singed.";
	 Taste: "The monkey looks on tolerantly.";
 	 Listen: "The fine rain hisses against the monkey's umbrella.";
   ],
  life [;
    Answer: switch(noun){
      t_storms:print "The clouds dissipate, and the monkey folds up his 
                      umbrella and shakes it to the side. There is a puff of 
		      pink smoke, and the monkey is replaced by a wind-up 
		      tin monkey with cymbals";
	       self.goodbye(e_to);
	       remove (StormCloud);
	       remove (Umbrella);
	       rtrue;
      default:
            self.wrong_guess++;
            if(self.wrong_guess < 2)
              "The clouds thunder ominously.";
             else 
				StormCloud.zap();
				
    }
    default: "Ook!  Ook!";
  ],
  has animate;
 
Fixture -> SignOne "sign"
  with name 'sign' 'riddle' 'puzzle',
  description [;
    print "Upon inspection, this plaque is actually part of the wall itself. 
           Written in black letters upon a white background is the 
	   following:^^";
    ("Some say that less is more^ 
      A rule you'd better learn to ignore.^
      When thunder booms and lightning strikes^
      Don't worry about swords, shields or pikes.^
      If the sky is dimming avoid trouble.^
      Express your answer on the double.^").print_to_array(Centrist);
     TxtEntry.align_centre(Centrist,RIGHT_MARGIN,true);
  ];

Outside EndOfPartOne "Glowing Chamber"
  with
  description [;
    "This magnificent chamber pulses with living energy. There is a 
    small inscription on the wall, and below it, a keyhole. The only exit
    from the room is to the west, back towards the stairs.";
  ],
  before [;
		smell:"The air has absolutely no scent here.";
		touch:"The slightest touch overwhelms you with a sense
				of brightness and optimism.";
		taste,
		lick: "Your tongue tingles.";
		listen: "There is a slow pulsing in this room, more felt than
				  heard. It is a comforting, regular sound.";
	],
  w_to BaseofStairs;

Detail -> EndOfPartOneDetail
	with
	select 0,
	parse_name [ w n flag;
		for (: flag == false: n++) {
			w = NextWord();
			switch (w) {
				'chamber',
				'roof',     
				'ceiling',
				'floor',
				'room'        :  self.select = 'room'; continue;
				'wall',
				'walls'		:  self.select = 'walls'; continue;
				'writing',
				'letters',
				'lettering',
				'words',
				'text',
				'inscription' :  self.select = 'inscription'; continue;
	  		}
			flag = true; 
			n--;
		}
		return n;
	],
	description [;
		switch(self.select){
			'room'        : EndOfPartOne.description();
			'walls'       : "The walls pulse electrically with unimaginable 
								colours. On the east wall, there is a keyhole and
								above it, some writing.";
			'inscription' : "An inscription is engraved into the material of the
								wall. It reads:^^Dear Candidate,^^To proceed
								to the next phase of neuroalignment, insert the Ivory Key 
								of Obsidian Annihilation into the teleport controller 
								below.^^The Order of the Perigee.";
		}
	];

 Proptainer -> EndOfPartOneKeyhole "keyhole"
	with
	size 2,
	name 'keyhole' 'hole',
	description "A hole in the wall, similar to a keyhole, but you can 
                see nothing inside the hole -- only darkness.",
   before [;
		receive:
			if(noun == magic_key && magic_key.material == TxtEntry.ltr){
				if(TxtEntry.ltr == false)
					TxtEntry.screen_on(true);
				print "A strange sounds builds and builds, 
					like someone running a set of metal
					keys slowly up and down the strings of a harp. 
					Slowly, your surroundings fade.^^
					You are standing on the command deck of a starship.^^A 
					large viewing screen shows a planet, with patches of 
					blue ocean and land peeking through the cloud cover.^^
					Congratulations, you have completed the introduction
					to ~Nine-tenths of the Law~!^^
					The continuation will be released in 2009.";
				deadflag = 2;
				rtrue;
			}
			else
				"Nothing seems to happen. How anticlimactic.";
	],
  	has static concealed open;

!****** LOCATION-CHALLENGED OBJECTS *******************************

Object CommonDataHerbPotion
	with
	colour 
		'yellow'							!0: Poison
		'violet'							!1: Shrink
		'blue'								!2: Curelight
		'orange'							!3: Dayview
		'burgundy'							!4: Aronk
		'crimson',							!5: Pelzall

	name 
		'mortitude'
		'minutise'
		'healicity'
		'sighting'
		'aronk'
		'pelzall',	

	duration_potion
		0		
		20
		0
		5
		5
		0,

	duration_herb
		20	 		!if not-toxic, zero
		5	
		3
		3	
		5	
		10, 

	herb_home
		Graveyard
		Garden
		Garden
		VeggieGarden
		Garden
		Graveyard;

Prop TinMonkey "toy monkey"
  with 
  name 'monkey' 'tab' 'cymbal' 'cymbals' 'toy' 'doll' 'gold' 'golden',
  reps 0,
  description "A wind-up toy monkey -- a soft monkey doll with a pair 
               of golden cymbals. There is a small tab on the
	       	 monkey's back to wind it up.",
  before [;
    Turn:  self.reps = 5;
           print "You wind up ",(the) self,".^";
           StartDaemon(self);
	   rtrue;
  ],
  daemon [;
    self.reps = self.reps - 1;
    if (self.reps < 0) {
      StopDaemon(self);
      rtrue;
    }
    if(CommonAncestor(self,actor)){
    	print "The monkey doll bangs its miniature 
				cymbals together, producing
     			a tinny sounding clanging.
				^Clang!^Clang!^Clang!^^";
		if(IndirectlyContains(FrontRoom, self)){
			if(~~Laemmli.awake){
 				print "The old man wakes with a start, and screams, ",
				(quote)
				"What in the name of Helle is that racket?!!";
				print "^^";
				Laemmli.wake_up();
			}
			else {
				print (quote) random (
					"Would you shut that simian up!",
					"I wish I were deafer!",
					"What a hideous little monster.",
					"Oh, the cacophony!",
					"Get that thing out of here!",
					"If I had a big piece of wood, I would
					 beat that monkey to death",
					"Get your toy out of my room! How am 
					 I supposed to work under these conditions?",
					"What a nasty little creature!",
					"Could you please drop that thing over the
					 bridge on the way to town?",
					"With toys like that, who needs zombies.",
					"I may never be able to go back to sleep!",
					"My headache is throbbing!",
					"How does anything so small make so much noise?"
				);
				"";
			}
		}
	}
];

Room MyHappyPlace "My Happy Place"
!A waystation on the way to oblivion
!a useful virtual place to stash stuff while working around the issue of 
!moving items during an objectloop
with
item_lister [whom item;
	if((whom provides wielding && whom.wielding == item) || item has worn){
		print (the) item," which ";
		TheHost("the",whom,"/are/is");
		print " ";
		if(item has worn)
			print "wearing";
		else
			print "wielding";
	}
	else
		print (a) item;
	rtrue;
],
frisk [whom;
		print " ";
		if(~~child(whom)){
			print "absolutely nothing";
			rtrue;
		}
		self.item_lister(whom,child(whom));
		move child(whom) to self;
		while(child(whom)){
			if(children(whom) == 1)
				print " and ";
			else 
				print ", ";
			self.item_lister(whom,child(whom));
			move child(whom) to self;
		}
		while(child(self))
			move child(self) to whom;	
	rtrue;
];

Object Vision
!everything related to vision and colour perception
  with
  supports_colour false,
  day_colours false, 	!during initialisation, this is set true
					    	!if false, it is dark out
  test_colour [;
    !test to see if coloured text is supported on device
    !if ((0->1) & 1 == 0) self.supports_colour = true;

    !because of a ?bug in winfrotz, this condition tests false even though
    !the interpreter handles the colours correctly in full colour mode
    !no harm, though, probably, for now in forcing it true.
    self.supports_colour = true;

  ],
  clear [;
    @erase_window 0;
  ],
  set_colour [foreground background;
    @set_colour foreground background;
  ],
  colour_my_world [;
  !set the font colours
  if(self.day_colours)
    self.set_colour(YELLOW, BLACK);
  else
    self.set_colour(WHITE, BLACK);
  ],
  dayvision [state;
  !where state = true or false
  !returns false if no change in state
  !returns true if state has been toggled
  !calls colour_my_world appropriately
    if(state){
      if(self.day_colours) rfalse;
      self.day_colours = true;
    }
    else {
       if(~~self.day_colours) rfalse;
       self.day_colours = false;
    }
    if(Vision.supports_colour){
      self.colour_my_world();
      self.clear();
    }
    rtrue;
  ],
  colour_enabled [;
    if(self.day_colours) return true;
    else return false;
  ],
  perceived_colour [actual_colour;
  !with day vision, the perceived colour is the actual colour, otherwise
  !the undead see only greys
    if(self.day_colours) 
		return (actual_colour);
	else
		return ('grey');
 	rtrue;
  ],
  print_colour [actual_colour output_colour;
  !where actual_colour is a  dictionary word
  !prints the appropriate colour
    output_colour = self.perceived_colour(actual_colour);
    print (address) output_colour;
    rtrue;
  ],
  parser [obj w n j flag;
  !will run through dictionary words for an object and look at the 
  !object's colour property, if one is provided. If dayvision is not
  !enabled, it will match on grey rather than self.colour
    while(flag == false) {
		w = NextWord();
		flag = true;
		if(obj provides colour && obj.colour &&
        	!testing for object to provide colour is actually redundant since
			!colour is a common property; but this is retained in case that
			!someday is not the case.
	     ((self.day_colours == true && w == obj.colour) ||
	      (self.day_colours == false && w == 'grey'))){
	 			n++;
				flag = false;
	  			continue;
		}
		for (j=0: j < (obj.#name)/2 : j++){
			if (obj.&name-->j == w) {
				n++;
				flag = false;
				break;
			}
		}
    }
    !print "obj(",(name) obj,") = ",n,"^"; !for debuggagery
	return n;
	];

Object Limbs "limb"
with
  short_name [;
    print "your ";
    if(~~(self.limb == 'arms' or 'legs'))
      switch(self.laterality){
        0:;
        1:print "left ";
        2:print "right ";
      } 
    print (address) self.select;
    rtrue;
  ],
  description [; 
	print "You see ";
	self.short_name();
  	", just as you would expect.";
  ],
  laterality 0,
  limb 0,
  select 0,
  parse_name [ w; 
    self.limb = 0;
    self.laterality = 0;
	 self.select = 0;
    w= NextWord();
    if(w=='my')
       w = NextWord();
    if(w == 'left' or 'right'){
      if( w == 'left') self.laterality =1;
      if( w == 'right') self.laterality =2;
         w = NextWord();
    }
    switch (w){
      'shoulder',
	  'shoulders',
	  'humerus',
	  'humeri',
	  'arm',
	  'arms',
	  'wrist',
	  'wrists',
	  'elbow',
	  'elbows',
	  'forearm',
	  'forearms',
	  'hand',
	  'hands',
	  'leg',
	  'legs',
	  'thigh',
	  'thighs',
	  'knee',
	  'knees',
	  'calf',
	  'calves',
	  'shin',
	  'shins',
	  'ankle',
	  'ankles',
	  'foot',
	  'feet'		: self.select = w;
	  'finger',
	  'fingers',
	  'thumb',
	  'pinky'		: self.select = 'hand';
	  'toe',
	  'toes'		: self.select = 'foot';
	  'thumbs',
	  'pinkies'		: self.select = 'hands';
    }
    if(actor.animal)
      {
        switch(w){
          'foreleg',
          'forelegs',
          'hindleg',
          'hindlegs',
          'paw',
          'paws':self.select = w;
        }
      }
    switch(self.select){
      'foreleg',
	   'paw',
      'shoulder',
	  'humerus',
	  'arm',
	  'wrist',
	  'elbow',
	  'forearm',
	  'hand'		: self.limb = 'arm';
      'hindleg',
	  'leg',
	  'thigh',
	  'knee',
	  'calf',
	  'shin',
	  'ankle',
	  'foot'		: self.limb = 'leg';
      'forearms',
      'paws',
	  'shoulders',
	  'humeri',
	  'arms',
	  'wrists',
	  'elbows',
	  'hands'		: self.limb = 'arms';
      'hindlegs',
	  'legs',
	  'knees',
	  'calves',
	  'shins',
	  'ankles',
	  'feet'          : self.limb = 'legs';

    }
    if(actor == polyp) return 0; !polyps don't have appendages
    if (~~(self.limb_present())) return 0;
    if ((self.limb == 'arms' or 'legs') && self.limb_present() < 3){
		self.laterality = self.limb_present();
		if(self.limb == 'arms') 
			self.limb = 'arm';
		else
			self.limb = 'leg';
		self.select = self.limb;
		return 2;
    }
    if (self.laterality && self.limb == 'arm' or 'leg')
		if (self.limb_present() & self.laterality) 
		  return 2;
		else
		  return 0;
    if (self.limb && self.limb_present()) return 1;
    return 0;
  ],
  limb_present[upr_lwr;
  !returns which limbs are present for upper or lower pair
  upr_lwr = 0;
  if(self.limb == 'arm' or 'arms') upr_lwr = actor.arms;
  if(self.limb == 'leg' or 'legs') upr_lwr = actor.legs;
  return(upr_lwr);
  ],
  before_implicit [;
    default: return 2;
    !kill implicit take and its despised parenthetical assertions
  ],
  before [;
    examine:
      rfalse;
    pull,
    take,
    drop:
      if(action == ##pull && self.limb == 'leg')
		 "The undead are many things, but not gullible.";
      print "That would be hard to do, as ";
      self.short_name();
      print " ";
      if (self.limb == 'leg' or 'arm') 
        print "is";
      else 
        print "are";
      " attached to your body.";
    default:
      if(self.limb == 'arms' or 'legs'){
        if((actor.arms == 3 && self.limb == 'arms') ||
	   (actor.legs == 3 && self.limb == 'legs'))
	     "You have to say which side. You have two, you know.";
	if((actor.arms == 0 && self.limb == 'arms') ||
	   (actor.legs == 0 && self.limb == 'legs'))
	     "Shocking though this may be, you don't have any ",
	      (address) self.limb,", so that would be quite difficult.";
	"You are suffering from overoptimism. You don't have two ",
	(address) self.limb," -- you only have one. Please be more specific.";
       }
      if((self.limb == 'arm' && actor.arms) || 
         (self.limb == 'leg' &&  actor.legs)) {
            print "All this talk about ";
	    self.short_name();
	    " is making you chomp at the bit.";
      }
     !no need to address the situation of a missing limb as predicate,
     !as the limb would not be in scope.
  ],
  biteoff [side new_meat;
    !side is passesd as a parameter rather than relying on self.laterality
    !because sometimes no laterality is defined -- e.g., if you only have
    !a right arm and say "gnaw arm", it is clear that you must mean the
    !right one.
    print "You ", (string) random (
                  "haphazard",
		  "voracious",
		  "nonchalant",
		  "violent",
		  "intentional",
		  "bloodthirsti",
		  "brutal",
		  "cruel",
		  "fierce",
		  "self-deprecating",
		  "savage",
		  "vicious",
		  "ruthless",
		  "truculent"),"ly bite off ";
    self.short_name();
    print ".^";
    if(Limbs.limb == 'arm') actor.arms = actor.arms - side;
    else actor.legs = actor.legs - side;
    new_meat = Appendage.create();
    new_meat.rename(actor.&name-->0,side,self.limb);
    rtrue;
  ],
  has proper;

Prop PseudoWater "water"
	with name 'water',
	article "some",
  	before [;
		Take: "Glurp. You take a long, slow drink of water. 
				Ah...Refreshing. You feel almost alive.";
		Drinking: rtrue;
	],
	has concealed drinkable;

Prop ZomboRepel "canister"
  with 
  name 'pelzall' 'can' 'canister' 'red' 'yellow' 'orange' 'white' 
  'nozzle' 'button',
  description [;
    print "A metal canister with a white button on top of a small nozzle. The 
    can is fluorescent ";
    Vision.print_colour('yellow');
    print " with a bright ";
    Vision.print_colour('orange');
    print " and dark ";
    Vision.print_colour('red');
    " warning label. The label reads, in bold black letters: ^^PELZALL 
       EXTRACT. For use on undead only.^";
  ],
 before [;
    Push:       
      self.actuate(actor,30);
      print "^You recall pressing the button...and a large cloud of particles 
        spraying into the air. The mist drifted in all directions, including 
	yours. After that, you can't recall how you got here.^";
      <look>;
      rtrue;
    Spray:
      if(noun == self) "The canister can't spray itself -- just say what you
        want to spray.";
  ],
  actuate [who duration whither;
    whither = random(Hill,Garden,PeasantRoad,Meadow);
    WorldTime.offset(0,0,0,random(duration));
    if(who == actor) PlayerTo(whither);
    else move who to whither;
  ];

Prop JadeFrog "Jade Frog"
  with name 'jade' 'frog' 'nephrite',
  size 2,
  description "An unquestionably authentic jade (specifically, nephrite) frog.",
  before [;
	Kiss:"The jade frog stares up at you with affection.";
  ];

Weapon pitchfork "pitchfork"
	with 
	name 'pitchfork' 'tong' 'tongs',
	description "A rusty old pitchfork.
		Some farmer has thoughfully taken the time to hone
		the tongs to a fine point. Perhaps excessive for baling 
		hay, but just the thing for skewering your enemies.",
	size 3,
	dambonus 4;

Being skeleton "skeleton"
  with name 'skeleton' 'skull',
  memories "Headaches are getting worse...must finish 
			 calculation...next transmission of orbital 
			correction...so much to do...Laemmli not 
			ready...it is starting...call the 
			monastery...I need to be planted...bursting
			bursting...so this is dead..",
  max_hp 10,
  current_hp 0,
  strength 10,
  armour 10,
  atk 4,
  dam 4,
  size 7,
  size_original 7,
  cant_drool true,
  appearance [; print "A rickety old skeleton with a jagged hole in the back
                       of the skull -- as if something had burst outward";
                rtrue;];

Garment PriestRobe
  with 
  name 'robe',
  cursed true,
  short_name [;
    Vision.print_colour(self.colour);
    print " robe";
    rtrue;
  ],
  colour 'purple',
  description [;
    print "A flowing ";
    Vision.print_colour(self.colour);
    print " robe of heavy, and unquestionably expensive, cloth.^";
  ];

Outside mountains "mountains"
  	with name 
		'mountain' 'mountains' 'surrounding' 'range',
  	description [;
		"White-capped mountains fade into the distance in all 
    	directions. Beautiful, if bleak.";
	],
  	has scenery static pluralname;

Outside sky "sky"
  with name 'sky' 'heavens' 'space' 'cloud' 'clouds',
  description "Low dark clouds rim the mountains.",
  has scenery static;

Detail NearWoods "woods"
	with name 'woods' 'forest' 'tree' 'trees',
	description "Deep woods, densely packed with trees of all types.",
	found_in 	DirtRoad CountryRoad VeggieGarden Garden
			  	Graveyard Meadow PeasantRoad Bridge River
				GuardRoad OuterWall,
	before [;
		examine:
			rfalse;
		go,
		enter:
			"The trees are too dense, you will have to look for
			 another place to enter the forest.";
		default:
			"You are too far from the forest to do that.";
	];

Detail FarWoods "woods"
	with name 'woods' 'forest' 'tree' 'trees',
	description "In the distance, a vast forest.",
	found_in Hill Slope CountryRoad,
	before [;
		examine:
			rfalse;
		default:
			"You are quite a distance from the edge of the forest.";
	];

Object RabbitSkeleton "rabbit skeleton"
	with name 'rabbit' 'bunny' 'skeleton' 'bone' 'bones' 'little',
	description 
		"A small rabbit skeleton.",
	size 3;

Object Zomboguts "zombie guts"
	with name 'zombie' 'guts//p' 'intestine' 'stomach' 'innards',
	size 2,
	capacity 50,
	description [;
		print "An unspeakable mess of erratically pulsating zombie innards. ";
		if(children(self)) 
			print "They seem quite lumpy.";
		"";
	],
	rumble [contents counter;
		counter = 0;
		objectloop(contents in self){
			counter++;
		}
		if(random(20) < counter){
			print "^", (string) random(
			"You experience a sudden wave of nausea. Perhaps it was something that 
			you ate",
			"You have a bit of heartburn, but it passes",
			"For a moment, you feel like you might throw up, but only for a moment",
			"Your innards rumble, maybe something you ate isn't sitting well",
			"You feel bloated",
			"Your stomach feels funny",
			"You have indigestion",
			"Something you ate doesn't seem to agree with you");
			if(random(20) == 2){
				print ". Suddenly, you are sick to your stomach!  Bits and pieces
				of your unspeakably hideous meals go flying!^^";
				<<Barf>>; 
      		}
			else
				print ".^";
		}
	],
	before [;
		Receive:
			if (noun == actor)
				"Don't be absurd. There are some places you are just not
				 willing to go.";
			move noun to self;
			"",(The) noun," ",(IsOrAre) noun, 
			" sucked deep within the wreathing mass of viscera.";
		Empty:
			if(children(self)){
				print "The squishy, flatulent bag of zombie flesh disgorges ",
						(a) child(self);
				move child(self) to location;
				while(child(self)){
					if(children(self) == 1)
						print " and ",(a) child(self);
					else 
						print ", ",(a) child(self);
					move child(self) to location;			
				}
			".";
			}
			else
				"You shake the rotting zombie intestines, but nothing
				 comes out. Apparently, they are empty.";
	],
  	invent [;
    if(inventory_stage == 2) 
		rtrue;
    rfalse;
    !to avoid listing contents
  	],
	article "some",
	has container open pluralname;

Object TxtEntry
!Handles print formatting, wrapping, left-to-right and twisty printing
  with
  stream_selected 1,				!stream 1 = screen; 
  ltr true,					!stream 3 = to array
  twisting false,
  backup false,
  left_margin 15,
  twisty_width 5,
  towards_right false,
  twistiness 5,
  straightness 5,
  !undulation 5,
  looking_mode 1,				!1 normal, 2 verbose, 3 brief
  toggle_textdir [;
    self.ltr = ~~self.ltr;
    TxtEntry.screen_on(false);
    rtrue;
  ],
  screen_on[state;
    !if true, routes output to screen; false to buffer
    if(state){
      if(self.stream_selected == 3){
        @buffer_mode 1;
        self.stream_selected = 1;
        @output_stream 1;
        @output_stream -3; !may be redundant with setting stream 1.
      }
    }
    else {
      if(self.stream_selected == 1){
        @buffer_mode 0;
        self.stream_selected = 3;
         @output_stream 3 workhorse;
        @output_stream -1; !may be redundant with setting stream 3.
      }
    }
  ],
  info [;
    !gives some info about screen and fonts
    print "colour handling? ";
    if(0->$1 & 1) print "yes"; else print "no";new_line;
    print "fixed font available? ";
    if(0->$1 & 16) print "yes"; else print "no";new_line;
    print "screen height (lines):",0->$20;new_line;
    print "screen width (char):",0->$21;new_line;
    print "screen height (units):",0-->$24;new_line;
    print "screen width (units):",0->$22;new_line;
  ],
  set_font [fontselected result;
    !set the font (V5)
    @set_font fontselected -> result;
  ],
  strstr [chr times; 
    !print chr x times
    if(times < 1) rfalse;
    for (:times > 0:times--){
      print (char) chr;
    }
  rtrue;
  ],
  trim_array[input_array trim;
    !given an array, it shortens it by trim bytes, to min len of zero
    !returns length of trimmed array
    if(trim > input_array-->0) input_array-->0 = 0;
    else input_array-->0 = input_array-->0 - trim;
    return(input_array-->0);
  ],
  next_twisty_line [line_size;
        if(line_size > RIGHT_MARGIN) line_size = RIGHT_MARGIN; !sanity check
	if(random(20) > self.straightness){  !if not straight...
	  if(random(20) < self.twistiness){
	    self.towards_right = ~~self.towards_right;
	  }
	  if(self.towards_right){
	    if(self.left_margin + line_size > RIGHT_MARGIN){
	      self.towards_right == false;
	    }
	    else {
	    self.left_margin++;
	    }
	  }
	  else {
	    if(self.left_margin == 0){
	      self.towards_right = true;
	    }
	    else {
	    self.left_margin--;
	    }
          }
        }
	self.strstr(SPACE,self.left_margin);
  ],
  print_forward [input_array start end;
    for (:start < end + 1:start++)
      print (char) input_array->start;
  ],
  print_reverse [input_array start end;
    for (:end > start - 1:end--){
      switch(input_array->end){
        '(':input_array->end = ')';
        ')':input_array->end = '(';
        '[':input_array->end = ']';
        ']':input_array->end = '[';
        '{':input_array->end = '}';
        '<':input_array->end = '>';
        '>':input_array->end = '<';
         47:input_array->end = 92;		  !reverses the slashes
	 92:input_array->end = 47;
      }
      print (char) input_array->end;
    }
  ],
  print_line [input_array alignment line_size start end;
    !prints an input array with desired alignment: 1) Left
    !						   						2) Centre
    !						   						3) Right
    !						   						4) Twisty
    if(alignment < 1 || alignment > 4) alignment = 1; !sanity check
    switch(alignment){
      2:self.strstr(SPACE,(line_size-(end-start))/2);
      3:self.strstr(SPACE,RIGHT_MARGIN-(end-start));
      4:self.next_twisty_line(line_size);
    }
    if(self.ltr ~= true && alignment ~=2)
		!Consider: The case of centre printing is excluded because it may occur
	   	!while capture is set to rtl, and if it reversed the text during
		!the first pass to centre the text, the text would then be 
		!re-reversed on when printed to screen.  This mechanism should
		!be cleaned up to be more general, as other combinations could
		!occur in the second part. It might make sense to separate the 
		!mechanism for centre, left and right printing which are "instant"
		!and rtl and twisty printing which are span a turn and act on all
		!input and output.
      self.print_reverse(input_array,start,end);
    else
      self.print_forward(input_array,start,end);
  ],        
  word_wrap [input_array alignment line_size buffering start end;
  !Read input_array. Wrap according to buffered or not; demarcate lines
  !by carriage returns. 
  font off;
  if(line_size < 1) line_size = RIGHT_MARGIN;		!sanity check
  if(buffering < 0) buffering = true;			!sanity check
  start = 2;
  for(end = 2: end < input_array-->0 + 2 : end++) {
    !trim leading white space
    if(start == end && input_array->end == SPACE) {
      start++;
      continue;
    }
    !if a CR is hit before end of line length, print line
    if(input_array->end == CARRIAGE_RETURN) {
      self.print_line(input_array,alignment,line_size,start,end-1);
      start=end+1;
      new_line;
      continue;
    } 
    if(end - start + 1 == line_size || end == (input_array -->0) + 1){
    !i.e., going to write to the output array this round...
      if(buffering && (end - start + 1) == line_size){
         !need to find the last full word of the line
         while(input_array->end ~= SPACE && end > start) 
	   end--;
	 if (start == end){
           !paranoid case -- if word length > line size
	   !e.g., supercalifragilisticexpialidociousantidisestablishmentarianism
	   end = end + line_size - 1;
	 }  
      }
      !trim the white space on the right, if any 
      while(input_array->end == SPACE) end--;
      self.print_line(input_array,alignment,line_size,start,end);
      start=end+1;
      new_line;
    }
  }
],
align_left [input_array line_size buffering;
  self.word_wrap(input_array,1,line_size,buffering);
],
align_centre [input_array line_size buffering;
  self.word_wrap(input_array,2,line_size,buffering);
],
align_right [input_array line_size buffering;
  self.word_wrap(input_array,3,line_size,buffering);
],
align_twisty [input_array line_size buffering;
  self.word_wrap(input_array,4,line_size,buffering);
],
print_dump [input_array;
!just dumps the entire contents of the array, w/o worrying about line length
  self.print_forward(input_array,2,1+input_array-->0);
];

Object WorldTime 
  with
  temporal_coord 0 0 0 0,			
  !set year, day, hour, minute
  set_time [yr dy hr mn;
    self.&temporal_coord-->0 = yr;
    self.&temporal_coord-->1 = dy;
    self.&temporal_coord-->2 = hr;
    self.&temporal_coord-->3 = mn;
  ],
  carry [big_index small_index convert temp;
  !propagates odometer-like carries from smaller to larger units
    if(self.&temporal_coord-->small_index > convert || 
       self.&temporal_coord-->small_index < 1) {
       temp = self.&temporal_coord-->small_index / convert;
       if (self.&temporal_coord-->small_index > 1) {
         self.&temporal_coord-->big_index = 
	   self.&temporal_coord-->big_index + temp;
	 self.&temporal_coord-->small_index = 
	   self.&temporal_coord-->small_index % convert;
       }
       else {
        self.&temporal_coord-->big_index = 
	  self.&temporal_coord-->big_index + temp - 1;
        self.&temporal_coord-->small_index = 
	  self.&temporal_coord-->small_index - convert * (temp - 1);
       }
    }
  ],
  offset [yr dy hr mn;
    !set time using an offset amount (note: within year range 0000 to FFFE)
    !offsets can be positive (anterograde time flow) or negative
    self.&temporal_coord-->0 = self.&temporal_coord-->0 + yr;
    self.&temporal_coord-->1 = self.&temporal_coord-->1 + dy;	
    self.&temporal_coord-->2 = self.&temporal_coord-->2 + hr;
    self.&temporal_coord-->3 = self.&temporal_coord-->3 + mn;
    self.carry(2, 3, MINUTES_IN_HOUR);
    self.carry(1, 2, HOURS_IN_DAY);
    self.carry(0, 1, DAYS_IN_YEAR);
  ];

Object TimeAndSpace;
Object -> seconds "seconds" with name 'second' 'seconds';
Object -> minutes "minutes" with name 'minute' 'minutes';
Object -> hours "hours" with name 'hour' 'hours';
Object -> days "days" with name 'day' 'days';
Object -> weeks "weeks" with name 'week' 'weeks';
Object -> years "years" with name 'year' 'years';
Object -> hexanies "hexanies" with name 'hexany' 'hexanies';

!Topics and Conversation:

Object Topics "conversational topics";
Topic  -> t_aronk "aronk"
	with name 'aronk' 'booze' 'liquor' 'alcohol' 'wine',
  	valid  $$00000011,
  	choices [choix; 
    	switch (choix){
      		0:print (quote) "I would never drink Aronk, it sounds vile.";
      		1:print (quote) "There are far few things in life more sweet than the 
         		              pungent vapours of distilled Aronk.";
      		2:print (quote) "Sir, I found some Aronk in your bedroom.";
      		3:print (quote) "I found Aronk in your bedroom and am shocked. Shocked!  
          		             You are a shame to the Siblinghood.";
      		4:print (quote) "I found the Aronk you had hidden in the bedroom. 
          		             Fantastic, old boy!";
      		5:print (quote) "I have some Aronk right here. Mmm. Smells potent.";
      		6:print (quote) "No more concerns about Aronk, sir, it's all gone.";
    }
  ];

Topic  -> t_pelzall "pelzall"        
	with name 'pelzall' 'derivative' 'herb',
  	valid $$00000000,
	choices [choix;
		switch (choix){
      		0:print (quote) "I really wish you wouldn't spray me again with that 
                       		pelzall stuff. It really stings.";
      		1:print (quote) "I picked some of your pelzall plants";
     		2:print (quote) "Someone seems to have picked all of your pelzall 
                   		    plants.";
      		3:print (quote) "I saw a rabbit eating your pelzall plants.";
   }
 ];


Topic  -> t_curfew "curfew day"         
	with name 'curfew' 'day' 'today',
  	valid $$00000000,
  	choices [choix;
    	switch (choix){
      		0:print (quote) "I am not worried about the curfew because, in fact, I 
                       		am the very zombie of which everyone is scared.";
      		1:print (quote) "Today is curfew day.";
      		2:print (quote) "I think that today is not curfew day.";
   }
 ];

Topic  -> t_neuroalignment "neuroalignment"
	with name 'neuroalig',
  	valid $$00000000,
  	choices [choix;
    	switch (choix){
      		0:print (quote) "You mentioned neuroalignment earlier --
          		             what exactly is it?";
      		1:print (quote) "Neuroalignment sounds complicated.";
      		2:print (quote) "Neuroalignment does not sound ethical.";
      		3:print (quote) "Neuroalignment sounds great -- how can I get 
                       		neurally aligned?";
   }
 ];

Topic  -> t_alignment "alignment"    
	with name 'alignment' 'aligned';

Topic  -> t_neuromatrix "neuromatrix"    
with name 'neuromatr' 'matrix' 'matrices';

Topic  -> t_undead "undead"	    
	with name 'undead',
	valid $$00000011,
	choices [choix;
    	switch (choix){
      		0:print (quote) "I am feeling somewhat undead myself today.";
      		1:print (quote) "I think I saw a zombie earlier today.";
      		2:print (quote) "Could you tell me more about the undead?";
   }
 ];

Topic  -> t_monastery "monastery" 	    
	with name 'monastery';

Topic  -> t_helle "Helle"	    
	with name 'helle' 'founder',
	has proper;

Topic  -> t_ascension "ascension"	    
	with name 'ascension' 'age' 'of';

Topic  -> t_mission "mission"	    
	with name 'mission';

Topic  -> t_hexany "hexany"	    
	with name 'hexany' 'hexanies' '100';

Topic  -> t_throne "Throne"	    
	with name 'throne';

Topic  -> t_transmission "transmission"   
	with name 'transmission';

Topic  -> t_ether "ether"	    
	with name 'ether' 'space';

Topic  -> t_groceries "produce"	    
	with name 'groceries' 'produce';

Topic  -> t_wood "wood"	    
	with name 'wood';

Topic  -> t_perigee "perigee"	    
	with name 'perigee' 'perigination';

Topic  -> t_sixth	"sixth"     
	with name 'sixth' '6th';

Topic  -> t_farm "farm"	    
	with name 'farm' 'field' 'crops';

Topic  -> t_village "village"	    
	with name 'village' 'orlane' 'town' 'hamlet';

Topic  -> t_foodstuffs "food"	    
	with name 'foodstuff' 'food' 'snack' 'snacks//p' 
                                      'pastry' 'pastries//p';

Topic  -> t_sundries "sundries"	    
	with name 'sundry' 'sundries//p';

Topic  -> t_valley "valley"	    
	with name 'valley';

Topic  -> t_mountain	"mountain"    
	with name 'mountain' 'mountains//p';

Topic  -> t_walls	"walls"    
	with name 'walls//p' 'wall';

Topic  -> t_roof "roof"	    
	with name 'roof' 'ceiling' 'thatch';

Topic  -> t_siblinghood "siblinghood"   
	with name 'siblinghood' 'order';

Topic  -> t_disaster	"disaster"    
	with name 'disaster' 'catastrophe' 'apocalypse';

Topic  -> t_tomato "tomato"	    
	with name 'tomato' 'tomatoes//p';

Topic  -> t_guard	"guard"    
	with name 'guard' 'guards' 'soldiers' 'soldier' 'cadet' 'cadets' 'army'
				'shack' 'post' 'sentry' 'checkpoint';

Topic  -> t_townfolk "townsfolk"	    
	with name 'townsfolk' 'people';

Topic  -> t_equipment "equipment"	    
	with name 'equipment' 'apparatus' 'device';

Topic  -> t_herb "herbs in generis"	    
	with name 'herb' 'herbs' 'in' 'generis' 'plant';

Topic  -> t_garden "garden"	    
	with name 'garden';

Topic  -> t_coast "coast"	    
	with name 'coast' 'ocean';

Topic  -> t_emphyteote "emphyteote"	    
	with name 'emphyteote' 'caretaker' 'resident';

Topic  -> t_duties "duties"	    
	with name 'duties' 'obligations' 'official' 'tasks' 'your';

Topic  -> t_nibex	"Nibex"    
	with name 'nibex' 'predecessor' 'mentor',
	has proper;

Topic  -> t_transmigretics "transmigretics"
	with name 'transmigretics';

Topic  -> t_astronumerology "astronumerology"
	with name 'astronumerology';

Topic  -> t_zombie "zombie"	    
	with name 'zombie' 'zombies//p';

Topic  -> t_possession "possession"    
	with name 'possession';

Topic  -> t_mirror "mirror"        
	with name 'mirror',
	valid $$00000000,
	choices [choix;
		switch (choix){
			0:print (quote) "I accidentally brushed past the ribbon on the mirror and
                       	it fell off. I was leaning against it ever so gently, 
		       		  	and I fell through into another world.";
      		1:print (quote) "When I ripped the ribbon off the mirror and stepped into
                       	it, I found another world where everything was reversed. 
		       		  	What do you make of that?";
   }
 ];

Topic  -> t_mob "mob"			  
	with name 'mob',
  	valid $$00000000,
  	choices [choix;
		switch (choix){
			0: print (quote) "There's an angry crowd gathered just down the road.";
			1: print (quote) "I don't like the look of the mob down the road.  They
					    		have pitchforks and torches.";
			2: print (quote) "Those peasants down the road seem dangerous.  Any idea
					    		of how we can get rid of them?";
			3: print (quote) "I noticed that the peasants are no longer gathered on the
						 		road to town.  Good riddance.";
			4: print (quote) "I drove off the peasants.  They were violating curfew.";
			5: print (quote) "The peasants ran scared once I revealed my undead nature 
						 		to them.  I should be rewarded for clearing the road of
						 		that scum.";
			6: print (quote) "That peasant mob ran away.  I guess they're just not up to
						 		snuff when it comes to dealing with the undead.";
  }
 ];

Topic  -> t_ribbon "ribbon"        
	with name 'ribbon',
	valid $$00000000,
	choices [choix;
    	switch (choix){
      		0:print (quote) "I love what you've done with the bedroom.  
								That little ribbon is
							   the perfect accent piece for the classic mirror.  It 
							   absolutely *makes* the room come together for me.";
      		1:print (quote) "Looks like the ribbon fell off the mirror in the bedroom.";
      		2:print (quote) "Ripping your precious little ribbon to pieces filled me
							   with pleasure, old man!";
   }
 ];

Topic  -> t_rabbit "rabbit"        
	with name 'rabbit' 'bunny' 'hare' 'rodent' 'rabbits//p' 'bunnies//p',			     
  	valid $$00000011,
  	choices [choix;
    	switch (choix){
      		0:print (quote) "I like bunny rabbits.";
      		1:print (quote) "I saw a bunny rabbit earlier today.";
      		2:print (quote) "I tried to take over the mind of the bunny earlier today
                       		and it failed. Do you have any pointers?";
   }
 ];

Topic  -> t_polyp "polyp"        
	with name 'polyp';

Topic  -> t_frog "frog"          
	with name 'frog' 'jade' 'nephrite';

Topic  -> t_arthritis "arthritis"      
	with name 'arthritis' 'your' 'gout' 'pain';

Topic  -> t_knee	"knee"    
	with name 'knee' 'leg' 'patella' 'popliteal' 'your';

Topic  -> t_back "back"	    
	with name 'back' 'spine' 'lumbar' 'sacral' 'your';

Topic  -> t_basement "basement"       
	with name 'basement' 'cellar';

Topic  -> t_slab "slab"          
	with name 'slab';

Topic  -> t_transmitter "transmitter"    
	with name 'transmitter' 'transceiver';

Topic -> t_calculations "calculations"    
	with name 'calcuations' 'musings' 'calculation' 'your';

Topic -> t_bed "bed"		   
	with name 'bed' 'cot' 'mattress' 'your';

Topic -> t_grave "grave"	   
	with name 'grave' 'plot';

Topic -> t_drool "drool"	   
	with name 'drool' 'drivel' 'saliva' 'spit'
                                     'sputum';

Topic -> t_house "house"           
	with name 'house' 'home' 'building' 'residence' 'cabin';

Topic -> t_ordeal "ordeal"	   
	with name 'ordeal' 'test';

Topic -> t_colour	"colour"   
	with name 'colour' 'tint';

Topic -> t_potion "potion"	   
	with name 'potion' 'potions';

Topic -> t_shackles "shackles"	   
	with name 'shackle' 'shackles' 'chain' 'obsidian';

Topic -> t_ivory_key	"ivory key"	
	with name 'ivory' 'key' 'obsidian' 'annihilation' 'IKOA'
				'annihilate';

Topic -> t_coordinate "coordinate"	   
	with name 'coordinate' 'coordinates';

Topic -> t_juicer	 "juicer machine"   
	with name 'juicer' 'machine' 'funnel';

Topic -> t_cat "cat"		   
with name 'cat' 'feline' 'pussy' 'pussycat';

Topic  -> t_yes "yes"     
	with name 'yes' 'please' 'ok' 'oui';

Topic  -> t_no "no"       
	with name 'no' 'non' 'thanks';

Topic  -> t_hello "hello"   
	with name 'hello' 'hi' 'greetings' 'salutations';

Topic  -> t_goodbye "good-bye"  
	with name 'goodbye' 'good-bye' 'good' 'bye' 'cheerio' 'ta' 'ciao' 
				'ttfn' 'adios' 'later';

Topic  -> t_storms "storms"  
	with name 'storms';
	
Topic  -> t_name "name"		
	with name 'name' 'your' 'his' 'what' 'is' 'laemmli' 'himself';

Topic 	-> t_robe "robe"
	with name 'robe' 'purple';

Topic	-> t_note "note"
	with name 'note' 'parchment';

Topic 	-> t_box	"box"
	with name 'lacquer' 'box';

Topic	-> t_recycling "recycling unit"
	with name 'recycling' 'unit' 'hopper' 'appliance' 'cutting' 'board';

Topic	-> t_kitchen "kitchen"
	with name 'kitchen' 'cupboard' 'cabinet';

Topic	-> t_bedroom "bedroom"
	with name 'bedroom';

Topic -> t_whistle "whistle"
	with name 'whistle' 'tube' 'instrument';

!***** FUNCTIONS *************************************************

[SpraySub;
    if(ZomboRepel notin actor) 
      "You don't have anything that sprays.";
    if(noun ==polyp){
       deadflag = 1;
       "As the mist settles onto the surface of the polyp, you are briefly
        wracked with intense pain, followed by a sense of defeat.";
    }
    if(noun == actor){ 
      <Push ZomboRepel>;
      rtrue;
    }
    print "You spray ",(the) noun," dusting it with a fine mist. ";  
    if(noun hasnt infection)
      "It doesn't seem to have any effect.";
    !blowback
    else {
      ZomboRepel.actuate(noun,1);
      !TOCONSIDER: give each target a timer; would remain affected
      !after being sprayed; no longer possessible in that state
          "Immediately, ",(the) noun,"'s eyes loll backwards and its 
	  tongue hangs down, dripping with saliva. The muscles in its neck
	  tense and it howls furiously, in spastic convulsions. It launches
	  itself away, jerking this way and that, mindless but driven by 
	  the effects of the spray.";
      }
]; 
  
[TopicScope; switch(scope_stage) {
        1: rfalse;
        2: ScopeWithin(Topics); rtrue;
        3: "You are befuddled.";
        } 
];

[TimeScope; switch(scope_stage) {
        1: rfalse;
        2: ScopeWithin(TimeAndSpace); rtrue;
        3: "Those units do not make sense.";
        } 
];

[entity;
	if(noun has animate || noun ofclass Being)
		rtrue;
	else
		rfalse;
];

[Speaker;
if (FarmGarments in player && FarmGarments has worn) return 1;
if (Mail in player && Mail has worn) return 2;
if (player == Rabbit) return 3;
if (PriestRobe in player && PriestRobe has worn) return 4;
return false;
];

[Speaker_print selector;
!the need to print "farmer | soldier | rabbit | priest" comes up so often
!it gets its own function.
  switch(selector){
    1:print "farmer"; return true;
    2:print "solider";return true;
    3:print "rabbit";return true;
    4:print "priest";return true;
    default:print "person"; return false;
  }
];

[PossessionSuit who;
!returns a string, the skin-suit inhabited by "who"
   switch (who){
        zombie:  return "zombie";
		rabbit:  return "rabbit";
		skeleton:return "skeleton";
		polyp:   return "polyp";
		soldier: return "soldier";
     }
];


[Power  x n tl i;
!x to the n for zero or small positive values of n
!consider -- look in the library, these powers are already defined in an 
!array; would be more efficient to just access that array...
  tl = 1;
  if(n < 0) "Error: Negative exponent in Power routine";
  if(n > 16) "Error: Exponent too big in Power routine";
  if(n == 0) return(1);
  for(i = 1: i < n+1 : i++)
    tl = tl*x;
  return(tl);
];

[Quote str;
!usage:  print (quote) "laugh it up, monkey boy";
  print "~",(string) str,"~";
];

[TellChoices auditor n said notsaid exp2 pressed;
  !List the choices available for each topic, where the topic is in variable
  !second. Uses the global remap array to sort menu according to avaiable 
  !choices: unsaid phrases, followed already said phrases.
  !returns -1 if nothing to say, or if zero option selected
  !otherwise, returns the phrase index within the topic object

  if(auditor == Laemmli) ;!later, when other added pcs, auditor will select 
			 !an set of valid and unsaid flags for each pc
  notsaid=0;
  said=0;
  for (n=0 : n < 8 : n++){
    exp2 = Power(2,n);
    if(exp2 & second.valid){
      if(exp2 & second.unsaid){
	remap->notsaid = n;
	notsaid++;
      }
    }
  }
  for (n=0 : n < 8: n++){
    exp2 = Power(2,n);
    if(exp2 & second.valid){
      if(~~(exp2 & second.unsaid)){
        remap->(notsaid+said) = n;
	said++;
      }
    }  
  }
  for (n=0 : n < notsaid : n++){
    print "[",n+1,"] ";
    second.choices(remap->n);
    print "^";
  } 
  @set_colour BLUE BLACK;
  for (n=notsaid : n < (notsaid+said) : n++){
    print "[",n+1,"] ";
    second.choices(remap->n);
    print "^";
  }  
  Vision.colour_my_world(); !<- should set it to present colour scheme
  if((said+notsaid) == 0) {
    print (string) random(
      "You can't think of anything to say",
      "You draw a blank",
      "Nothing comes to mind",
      "You stare into space briefly and then realise you have nothing to say",
      "You have nothing to say, for the moment at least, on that topic"
      ),".^";
     !TODO: need more of these
    return (-1);
  }
  print "^[0] To remain silent.^";
  @read_char 1 -> pressed;
  if(pressed < 49 || pressed > (48+said+notsaid)) return -1;
  pressed = pressed - 48;
  print "^You say, ";
  second.choices(remap->(pressed-1));
  print "^";
  exp2 = Power(2,remap->(pressed-1));
  if (exp2 & second.unsaid)
    second.unsaid = second.unsaid - exp2;
  return(remap->(pressed-1));
];

[hex x y flag;
!prints value x as an unsigned four-digit hexadecimal
!number. Omits leading zeroes. Based on DM4, p.32
  flag = false;
  y = (x & $7f00) / $100;
  if (x<0) y = y + $80;
  x = x & $ff;
  if (y/$10 > 0) {
    flag = true;
    print (hexdigit) y/$10;
    }
  if (y > 0) flag = true;
  if (flag == true) print (hexdigit) y;
  if (x/$10 > 0) flag = true;
  if (flag == true) print (hexdigit) x/$10;
  print (hexdigit) x;
];

[hexdigit x;
!prints a single hex digit
  x = x % $10;
  switch (x) {
    0 to 9: print x;
    10: print "A";
    11: print "B";
    12: print "C";
    13: print "D";
    14: print "E";
    15: print "F";
  }
];

[ TitlePage i;
	@erase_window -1;
	i = 0->33; 
	if (i < RIGHT_MARGIN) i = RIGHT_MARGIN;  !sanity
	font off;
	style bold;
	("^^^^Nine-Tenths of the Law").print_to_array(Centrist);
	TxtEntry.align_centre(Centrist,i,true);
        style roman;
	("^^by
	  ^Jack Welch
	  ^^^An introduction submitted to the 2008 IntroComp
	  ^^^Please press [Space] to begin").print_to_array(Centrist);
        TxtEntry.align_centre(Centrist,i,true);
	font on;
        @read_char 1 -> i;
        @erase_window -1;
        ];

[MultiplySub;
  if (actor == rabbit) "Let's keep our mind on business...";
  else "This is no time for trivial arithmetic.";
];

[WieldSub new_damage old_damage;
	![TODO] actor benefits from the added bonus of the weapon
	if(~~(noun ofclass Weapon))
		"You can only wield certain items as a weapon. Wielding ",
		(a) noun," would be about as effective as arming yourself
		with smoked salmon. Maybe less.";
	if(noun provides dambonus) 
		new_damage = noun.dambonus;
	else
		new_damage = 1;
	if(actor.wielding){
		if(actor.wielding provides dambonus)
			old_damage = (actor.wielding).dambonus;
		else
			old_damage = 1;
		print "You put away ",(the) actor.wielding," and ";
	}
	else 
		print "You ";
	print "wield the ";
	if(actor.wielding) {
		if(new_damage > old_damage)
			print "more";
		else
			if(new_damage == old_damage)
				print "equally";
			else
				print "less";
		print " effective ";
	}
	actor.wielding = noun;
	"",(name) noun,".^";
];

[UnwieldSub;
	if(~~actor.wielding) 
		"You weren't wielding anything to begin with!";
	if(noun)
		if(noun ~= actor.wielding) 
			"You aren't wielding ",(the) noun,", you
        	are wielding ",(the) actor.wielding,".";
	if(actor.wielding provides cursed && (actor.wielding).cursed)
		"It doesn't want to be set down. You are stuck with it.";
	print "You stop brandishing ",(the) actor.wielding,".^";
	actor.wielding = 0;
	rtrue;
];

[HelpSub;
  help_menu.select();
];

[GnawSub;
  "Hmm...not so tasty. You stop.";
];

[Absolute num;
!return the absolute value of num
if (num < 0) return(-1*num); else return(num);
];

[OppositeDirection direction;
!return the opposite direction of standard Compass objects
!return false if no corresponding compass object
switch (direction) {
  u_to: return(d_to);
  d_to: return(u_to);
  e_to: return(w_to);
  w_to: return(e_to);
  n_to: return(s_to);
  s_to: return(n_to);
  nw_to: return(se_to);
  sw_to: return(ne_to);
  ne_to: return(sw_to);
  se_to: return(nw_to);
  default: rfalse;
 }
];

[DirectionToText direction;
!make a compass direction object into printed text
  if (direction == u_to or d_to){
    LanguageDirection(direction);
    print "wards"; 
  }
  else {
    print "towards the ";
    LanguageDirection(direction);
  }
  rfalse;
];
!would be cleaner to have the function return a string object
!if so, need to rewrite the calls to this function

[Exits where max_exits exit_count direction;
!When player tries to go in a direction that does not provide an
!exit, this routine reminds player of the obvious exits.
  max_exits=0;
  exit_count=0;

  objectloop(direction in compass) {
    if (where.(direction.door_dir) ofclass Object) max_exits++;
  }
  if (max_exits == 0) "You can't go that way, and, more disconcertingly,
    there are no obvious ways away from here!";
  print (string) random ("That way isn't possible",
                         "You can't go that way",
			 "Nope. Can't go that way",
			 "Think again. That way won't work",
			 "A fine idea, except for the lack of an obvious way
			    to go in that direction",
			 "It doesn't appear that you can go in that direction"
			 );
  print ", but ";
  print (string) random ("you could go",
                         "you might consider heading"
			 );
  print " ";
  objectloop(direction in compass) {
    if(where.(direction.door_dir) ofclass Object){
      exit_count++;
      if (max_exits > 1 && exit_count == (max_exits)) print "or ";
      DirectionToText(direction);
      print " to ", (the) where.(direction.door_dir);
      if (max_exits == 1 || exit_count == max_exits) break;
      print ", ";
    }
  }
  print ".^";
  rtrue;
];

[TheHost whatarticle whatobject root_youdo_itdoes i;
!"You" if you are possessing the whatarticle, or the whatarticle itself, if
!not. The verb is then conjugated correctly. The verb is given as a string 
!with three slash separators: "root/you/it", where "root" is a common root, and
!"you" is the termination for second person forms, and "it" is the third person
!singular termination. Any or all of these can be of zero length.

  whatarticle.print_to_array(ArticleBuffer);
  if(actor == whatobject){
    if(ArticleBuffer->2 < 92) print "You";
    else print "you";
  } 
  else {
    switch (ArticleBuffer->2){
      't': print (the) whatobject;
      'T': print (The) whatobject;
      'a': print (a) whatobject;
      'A': print (A) whatobject;
    default: print whatobject;
    } 
  }

  root_youdo_itdoes.print_to_array(TextBuffer);
  if(TextBuffer->1 < 3) rfalse;
  !since sometimes you don't want a verb; absence of verb may be 
  !specified as "" or "//"

  print " ";

  for(i=2: TextBuffer->i ~= '/':i++){
    print (char) TextBuffer->i;
  }
  i++;
  for (: TextBuffer->i ~= '/':i++){
     if (actor == whatobject) print (char) TextBuffer->i;
  }
  if (actor == whatobject) rfalse;
  i++;
  while (i<(TextBuffer->1+2)){
    print (char) TextBuffer->i;
    i++;
  }
  rfalse; 
];

[DrinkingSub;
  if (noun has drinkable)
    print "You drink ", (the) noun,".^";
  else
    print "Huh?  You can't drink ",(the) noun,"!^";
rtrue;
];

[OneDeep target stuff more;
!examines contents of object one deep
  if(self hasnt container) rfalse;
  more = false;
  stuff = nothing;
  if (child(target)){
    print "Contents: ";
    objectloop(stuff in target){
      if (more) print ", ";
      print (name) stuff;
      more = true;              
    }
    print ".^";
  }
rfalse;
];

[PourSub;
  print "You pour out the liquid.";
];

[PlayerTeleport thither avant;
		avant=Vision.day_colours;
		PlayerTo(thither);
		if(avant ~= Vision.day_colours){
			Vision.clear();
			<<look>>;
		}
		if(thither.size < actor.size){
			!If in twisty area or RTL mode, flush the input stream.
			!or there will be hell to pay -- stream death of interpreter!!!
				if(TxtEntry.twisting || TxtEntry.ltr == false)
					TxtEntry.screen_on(true);
				print "^You have teleported into too small a space! The",
						(string) PossessionSuit(actor),"'s body is smooshed!^^";
				actor.current_hp = 0;
				rtrue;
		}
];

[BlowingSub locale;
	if(noun has animate)
		"You reconsider.";
	if(noun ~= whistle)
		"You can't find a good place to blow.";
	if (~~(parent(JadeFrog))) { !jade frog in original non-location
		PlayerTeleport(FrontRoom);
		"^You somersault out of the fireplace, covered with black soot and 
		smelling like a barbeque.^";
	}
	!if here, has blown whistle and jadefrog has moved; now find right room
	if(~~parent(JadeFrog))
		"Nothing happens.";
	else
		locale = parent(JadeFrog); 	!in case frog is outside game world (e.g., zomboguts)
  	while (~~(locale ofclass Room || locale ofclass Outside)){
										!helpful to prevent teleport onto supporter
										!or container not designed for that sort of thing
		if(~~parent(locale))
			"Nothing happens.";
		else
			locale = parent(locale);
	}
	PlayerTeleport(locale);
	if(actor.current_hp > 0) 
		print "^You  briefly experience vertigo.^^";
];

[AttackingSub;
!This is for things in general; beings and obstructions intercept
!this call as a before and deal with it in detail.
!NPCs will only attack beings and obstructions, so this works.
if(second == cluecat){
  switch(random(3)){
    1:print "You ",(string) random("slam",
                             "bang",
			     "whip")," the cat into the ", (name) noun,".^";
    2:print "The cat ",(string) random ("grins maniacally",
                             "laughs with pleasure",
			     "giggles with abandon",
			     "seems delighted",
			     "appears thrilled",
			     "asks for more",
			     "can't get enough"),
	     " as you ",(string) random ("beat it against",
	                     "repeatedly drum it into",
			     "thwap it against",
			     "slap it into",
			     "pound it into",
			     "strike it against",
			     "hurl it towards",
			     "spike it into",
			     "drive it into",
			     "swing it into")," "
	    ,(the) noun,".^";
    3:print "The cat seems ",(string) random ("chuffed",
			     "content",
			     "entertained",
			     "amused",
			     "satisfied",
			     "bemused",
			     "ecstatic",
			     "overjoyed",
			     "delighted",
			     "grateful"),
            " that you have ",(string) random ("pounded",
	                     "pummeled",
			     "struck",
			     "clobbered",
			     "hammered",
			     "smashed",
			     "repeatly beaten")," ",
	    (the) noun," with it.^";
  }
if(noun provides hit_by_cat) noun.hit_by_cat();
rtrue;  
}
print "You half-heartedly try to attack ", (the) noun;
if (second) print " with ", (the) second;
print ", but it doesn't 
      seem to have much effect.^";
];

[PossessSub;
	if (noun == polyp) 
		if (actor == polyp) 
			"Sorry?  Did you just try to possess yourself?  
			 Clever though that might be, it can't work.";
    	else 
			"Talk about tautology. 
          How about just dispossessing your present host?";
	if (noun == actor) 
		"Ummm...okay. You're already possessing it.";
	if (noun == Laemmli)
		"You encounter an overwhelmingly powerful psychic barrier.
		 The attempt fails entirely!";
	if (noun ofclass Being){
		if (noun.current_hp < 1){ 
			print "The neuropsychic matrix of ", (the) noun,
			" is entirely depolarised!  The attempt fails";
			if (random(20) < 3) 
				print ", but nice try anyway.^";
        	else 	
				print "!^";
			rtrue;
    		}
		if (noun hasnt infection) {
			print "You can't! ",(The) noun," has not been suitably prepared! ";
			if (random(20) < 2) 
				print "Not yet, at least.";
			"";
		}
		else {
			print "You possess ",(the) noun,".^";
			if(noun.memories){
				print "^As you slide into the mind of your new host, you brush
				against neural resonances of ",(the) noun,"'s 
				former life. The decohering images are not clear and 
		   		they are already fading: ";
				print (string) noun.memories,".^";
				noun.memories = 0;
			}
			JumpShip(actor,noun);
			rtrue;
		}
	}
	print "The attempt fails; you cannot sense the neuropsychic matrix of 
    ",(the) noun,".^";
	rtrue;
];

[BarfSub;
"Yaaaaaaaaacccccccccccckkkkkkkkkkkkkkkkkkk^
 Did that accomplish anything?";
];

[JumpShip source destination;
  changePlayer(destination);
  give source ~animate;
  give source ~proper;
  give source transparent;
  rtrue;
];

[DispossessSub subject alternate flag;
	if (~~subject) subject = noun;
	if (subject == polyp) 
		"You can't dispossess yourself!  Clearly, the years
		of mouldering in a grave have done little for your mental acuity.";
	if (subject ~= actor) 
		"You can't dispossess what you don't possess.";
	JumpShip(subject,polyp);
	PlayerTeleport(Hill);
	if(DispossessMessage-->0){
		print "^You are once again on your familiar hilltop. ";
		TxtEntry.print_dump(DispossessMessage);
		DispossessMessage-->0 = 0;
		print "Sensing imminent unpleasantness, and always motivated by
				an acute sense of self-preservation, you withdrew from 
				your unfortunate host at the last possible moment, 
				returning to both the comfort and
				immobility of your polypoid body.^";
	}
	else
		print "^With a brief exertion of will, you withdraw from the neuropsychic 
		matrix of your former host and return to your durable, 
		if less than stylish, polypoid body.^";
	objectloop (alternate in location){
		if(alternate has infection && alternate ~= polyp)
			flag = true;
	}
	if(~~flag){
		("^The sun sets and night falls, and the world is plunged into a flat, 
		colourless panorama. You stretch your fronds, searching for another
		host.^^The sun rises, and you feel your strength 
		ebbing. You are alone.^^As the day progresses, you realise that you 
		are wilting and that your transient unlife is slipping through your 
		fronds.^^No one comes. No hosts. 
		No escape.^^").print_to_array(Centrist);
		TxtEntry.align_centre(Centrist,RIGHT_MARGIN,true);
		WorldTime.offset(0,1,0,0);
		deadflag = 3;
	} 
	rtrue;
];

[BiteSub;
  "Your not-very-polite manners don't seem to have any effect on ", 
(the) noun,".";
];

[DroolSub;
	if(actor == skeleton)
		"There is not a drop of saliva in your musty old mouth.";
	if (noun) {
		if (noun in compass) {
			print "You spit ";
			DirectionToText(noun);
			".";
    	}
    else { 
		if (noun has scenery) 
			"You save your precious spit for better things!";
		print "You cover the ", (name) noun," 
		with ", (string) random("glistening","disgusting",
                              "sticky","wet","revolting"),
		" saliva. It evaporates. ";
		if (noun == skeleton)
			"Would you look at how dead it is?  He'll need
			 some serious healing before he's up and about
			 again.";
	   "";
      }
  }
  "Now there's a job skill. A small pool of saliva evaporates.";
];

[Combat prosecutor defendant;

	if (prosecutor == player && defendant == player) 
		"That would be suicidal!";
	if (prosecutor == player) 
		print "^You attack ";
	else 
		print "^",(The) prosecutor," attacks ";
	if (defendant == player) 
		print "you!  ";
	else 
		print (the) defendant,"!  ";
	if (defendant.current_hp < 1) 
	    "You know the expression ~beating a dead
	     horse~?  Well, this is entirely analogous, 
	     except for the word ~horse~.";
 
	!*********Does it hit or not?
	if((prosecutor.atk + defendant.size - prosecutor.size + random(20)) >  
	defendant.armour){
		defendant.current_hp = defendant.current_hp - prosecutor.dam;
          
		!*******Lethal damage...but for whom?????
		if (defendant.current_hp < 0) 
			defendant.current_hp = 0;
		if (defendant.current_hp == 0){
			if(defendant == polyp){
					deadflag=1;
					"^Unthinkable!  Your beautiful vegetative body 
					has died! How eternally embarrassing -- killed
					by a mere ", (string) PossessionSuit(prosecutor),"!^";
			}
			if(defendant == player){
				print "^";
				@output_stream 3 DispossessMessage;
				print "Your ", (string) PossessionSuit(defendant),
				" body took all the punishment that it could. ";
				@output_stream -3;
				DispossessSub(defendant);
				if(defendant == zombie)
					zombie.nothing_but_loot();  !if zombie is defeated in battle
				rtrue;								!it goes to pieces...
			}
			if(defendant == zombie){
				zombie.nothing_but_loot();
				"Suddenly, the zombie explodes, leaving 
					behind a wormy mass of internal organs.";
			}
			"",(The) defendant, " has stopped moving. 
				Some would call it ~dead~,
				but of course, you know better.";
		}
		!********Sublethal Damage:
		if(defendant == player){
			switch((defendant.current_hp*100)/defendant.max_hp) {
                1 to 5: "You look like you're on death's doorstep!";
               6 to 10: "You're not looking at all well.";
              11 to 20: "You feel very beaten up. Not good.";
              21 to 30: "Your injuries are becoming more serious.";
              31 to 40: "You have sustained moderate injuries.";
              41 to 50: "Your injuries are slowing you down.";
              51 to 60: "You have been injured, but can keep going.";
              61 to 70: "You are wounded, but not badly.";
              71 to 80: "A minor injury, as far as you are concerned!";
              81 to 90: "You are only scratched! A mere flesh wound.";
             91 to 100: "You barely notice it!";
               default: "Ow!";
			}
		}
		!i.e, if defendant = non-player character
		print (The) defendant," ";
		switch((defendant.current_hp*100)/defendant.max_hp) {
			 1 to 10: "is hanging on by a thread.";
			11 to 20: "is not doing well at all.";
			21 to 30: "has been severely damaged!";
			31 to 40: "is not looking at all well.";
			41 to 50: "has taken quite a beating.";
			51 to 60: "is moderately injured, but carrying on";
       	61 to 70: "has been slightly injured.";
			71 to 80: "is a little bruised.";
			81 to 90: "is barely scratched.";
			91 to 100: "looks unimpressed by your effort.";
			default: "has been injured.";
		}
	}
 	!****** A miss...
	if (prosecutor == player) 
		print " You miss "; 
	else 
		print " ",(The) prosecutor," misses ";
	if (defendant == player) 
		print "you!^"; 
	else 
		print (the) defendant,".^";
	rtrue;  
];

[ReasonSub;
  print (The) noun," is mildly entertained by your attempt at rational 
  discourse. But only momentarily. And that moment has passed.^";
rtrue;
];

[KnawSub;
  "I don't gnow what you mean.";
];

[ThrowSub;
  if(noun == magic_key && second == mirror){
		magic_key.go_nuclear();
		rtrue;
  }	
  move (noun) to parent(actor);
  if (second){
    if(second in compass) {
      print "You throw ",(the) noun," ";
      DirectionToText(second);
      ", where it lands with a ", (string) random ("thud",
					           "thump",
						   "disquieting sort of squishy sound"),
       ".";
    }
    "You throw ",(the) noun," at ",(the) second,". ",(The) noun," bounces off
      and comes to a stop not far from ",(the) second,".";
    }  
  "You throw ",(the) noun," ", 
    (string) random ("in a not very coordinated manner",
                     "spastically",
		     "awkwardly",
		     "pathetically"),
    " and it lands a short distance away, unharmed.";
];

[EatingSub;
!be careful -- replaces the normal Eat * held with * noun, so it
!applies to anything in scope. Allows characters to eat non-holdable
!objects, like the wall-of-carrot.
if(noun has scenery) "Get real.";
if(noun has edible){
  remove noun; 
  if(noun == MagickGrape) move noun to Bowl;
  "Yummmm... ", (name) noun, ". Quite tasty.";
  }
if(noun hasnt edible) "You can't eat ",(a) noun,"!  Please, have some
  standards!";
];

[EvolveSub;
  "You try in earnest to evolve. There, you feel much more evolved now.";
];

[GrowSub;
  print "You grow ";
  print (string) random (
    "dusty",
    "tired",
    "fatigued",
    "laconic",
    "maltempered",
    "irksome",
    "sarcastic",
    "bored",
    "pensive",
    "pessimistic"
 );
 print ".^";
 rtrue;
];

[OozeSub;
  "You grow effusive.";
];

[WavingSub;
  "You wave at ",(the) noun," but ", (the) noun, " doesn't wave back.";
];

[LickSub;
  if(player == skeleton)
    "There is a dry, rasping sound and you realise that skeletons don't have 
     tongues.";
  else
    "You give ",(the) noun," a nice wet lick!";
];

[SmokeSub;
  "You lack any source of flame.";
];

[CalculateSub;
  if(actor == rabbit)
	"Rabbits are only good at multiplication.";
  else
	"You recall that it is somewhere around three, but don't sweat the details.";
];

[WaitTimeSub i;
	!wait for noun amount of time x second units
	!where noun is decimal integer
	if(noun == 0)
		"The march of time is inexorable.";
  	if(noun < 0)
		"You fail in your attempt to time-travel.";
	if(noun == 1)
		noun = 0; !since counter advances each turn anyhow
	if(noun > 255)
		"The undead have short attention spans. There is no way that you would 
		 remember a number that large.";
	switch (second) {
		seconds: "In the process of preparing to wait for such a short 
				   period of time, you have actually done so.";
		hexanies,
		years,
		days,
		hours	: "Let's face it. Since dying, you are way too impatient to wait 
				   anything more than a few minutes. You're not getting any younger,
					you know.";
		minutes: 
				for(i=0: i < noun : i++) {
					
					GamePostRoutine();
					RunTimersAndDaemons();
					if(deadflag) rtrue;
					RunEachTurnProperties();
					if(deadflag) rtrue;
					TimePasses();
					if(deadflag) rtrue;

				}
				"Done waiting.";	
		default: "You pause for a moment.";
	}
];

[HexNumberToken  n wa wl sign base digit digit_count;
 !Adapted from DM4, exercise 92, page 209
	sign = 1; 
	digit_count = 0; 
	n = 0; 
	base = 16;

	wa = WordAddress(wn);
	wl = WordLength(wn);
	if (wa->0 == '-') { 
		sign = -1; wl--; wa++; 
	}
	if (wl == 0) 
		return GPR_FAIL;
	while (wl > 0) {
		if (wa->0 ~= '0' 	or '1' or '2' or '3' or '4' or '5' or '6' or '7' or '8' or '9'
					  		or 'a' or 'b' or 'c' or 'd' or 'e' or 'f')
			return GPR_FAIL;
		if (wa->0 >= 'a') 
			digit = wa->0 - 'a' + 10;
		else 
			digit = wa->0 - '0';
		digit_count++;
		if (digit_count == 5) 
			return GPR_FAIL;
		if (digit >= 0 && digit < base) 
			n = base*n + digit;
		else 
			return GPR_FAIL;
		wl--; wa++;
	}
	parsed_number = n*sign; 
	wn++; 
	return GPR_NUMBER;
];

[DanceSub;
	"You do your best impression of a ", (string) random(
		"jig",
		"waltz",
		"ballet"),
	". Comical at best.";
];

[YellSub;
	"You yell at the top of your undead lungs.";
];

[BendSub;
	"Yes, well that would require bending, and since becoming undead, 
	 you have noticed a major loss of flexibility.  You are stuck in 
	 a standing position.";
];

[StandUpSub;
	"You're already standing. In fact, there isn't much choice in 
	 the matter as your undead joints barely bend at all.";
];

[TouchWithSub;
	"You touch ",(the) noun," to ",(the) second," but nothing happens.";
];

[GreetSub;
	<answer t_hello noun>;
];

[TalkHelpSub;
	"You can ASK or TELL someone ABOUT something, or you can SHOW someone something.";
];

[WhatIsSub; 
	"You seem to be talking to yourself."; 
];

[WhereIsSub; 
	"You seem to be talking to yourelf."; 
];

[StareSub;
	if(noun)
		"You stare at ",(the) noun,".";
	else
		"You stare off into space.";
];

[TakeAllSub;
  "You stand back for a moment to get some perspective on the situation.
  Slowly, you take it all in. Figuratively.";
];

![TODO - if drag/push of class prop is enabled, may need this token routine
![IsDirection;
!	if(noun in Compass)
!		rtrue;
!	rfalse;
!];

[ ScoreSub;
  if (deadflag == 0)
    "No one is keeping score. Either you survive this,
		or you won't remember not doing so.";
];

[PuzzleBypassSub;
	"Somewhere across the universe, some fortuitious adventurer
overcomes a diabolically clever obstacle. Not so for you.";
];

!***** ENTRY POINTS *************************************************
 
[ Initialise;	
	TitlePage();
	WorldTime.set_time(STARTYEAR,STARTDAY,STARTHOUR,STARTMINUTE);
	Vision.test_colour(); !test to see if coloured text is supported
	Vision.dayvision(true); !set daylight vision
  	Bottle.create();
  	Potion.create(1,CoffeeTable);
  	Herb.create(0);
  	Herb.create(1);
  	Herb.create(2);
	location = Hill;
  	changePlayer(polyp);
	!intro line or two here
	Banner();                 ! Call up the standard banner.
	print "Type HELP for info on licencing and credits, or if you get stuck.^";
	return 2;                 ! No need to display the banner again.
];

[ ChooseObjects obj code;
! To avoid the "take all" problem of mentioning the sky, mountains, etc.
! Now, anything labeled "scenery" is excluded from "all".
! based on DM4, p. 239
  if (code < 2) {if (obj has scenery) return 2; rfalse; }
  if (obj hasnt scenery) return 2;
  return 1;
];

[InScope person;
! To bring the limbs pseudoobject into scope for generation of
! severed humanoid appendages
	if (person ofclass Being && ~~(person.animal))
		if(person.arms || person.legs) PlaceInScope(Limbs);

	if (parent(actor) ofclass Outside) {
		PlaceInScope(mountains);
		PlaceInScope(sky);
	}

	rfalse;
];

[  GamePostRoutine;
   !set/reset day vision 
	Vision.dayvision(   ((parent(player) ofclass Outside) &&
					   (WorldTime.&temporal_coord-->2 > 5) &&
					   (WorldTime.&temporal_coord-->2 < 23)) ||
                     actor.force_colour_vision);
   rfalse;
];

!BeforeParsing, NewRoom and AfterPrompt used in conjunction with
!TxtEntry Object to intercept I/O streams

[BeforeParsing i temp;
if((~~TxtEntry.ltr) || TxtEntry.twisting){
   TxtEntry.screen_on(false);
   }
if((~~TxtEntry.ltr)){
  for(i=0:i<((buffer->1)/2):i++){
    temp = buffer->(i+2);
    buffer->(i+2) = buffer->(1-i+buffer->1);
    buffer->(1-i+buffer->1) = temp;
  }
  @tokenise buffer parse;
}
if(actor ofclass Being && actor.buzzed){
!consider: this should come above the reversal routine...
  if(random(20) < 11){
    temp = random("n","s","e","w","u","d",
                  "jump","wave","hit self","sing",
		  			"drool","sleep","think","smell","pray");
    temp.print_to_array(buffer);
    @tokenise buffer parse;
  }  
}
rfalse;
];

[NewRoom;
 !make sure that the player is moved around using PlayerTo, as that is
 !trigger for this entry point

  if(TxtEntry.twisting){
    if(location provides twisty) rfalse;
    else {
      TxtEntry.twisting=false;
      lookmode = TxtEntry.looking_mode;
      rtrue;
    }
  }
  !...not twisting
  if(location provides twisty) { 
    TxtEntry.twisting=true;
    TxtEntry.looking_mode = lookmode;
    lookmode = 2;
    TxtEntry.screen_on(false);
    rtrue;
  }
  rfalse;
];

[AfterPrompt;
	if(TxtEntry.stream_selected == 3){
		TxtEntry.screen_on(true);
		TxtEntry.trim_array(workhorse,2);
		if (TxtEntry.twisting) { !handles regardless if ltr is true or false
      		TxtEntry.align_twisty(workhorse,TxtEntry.twisty_width,false);
      		rfalse;
    	}
    	if ((~~TxtEntry.ltr))
       	TxtEntry.align_right(workhorse,RIGHT_MARGIN,true);
    	else {
			font on;
       	TxtEntry.print_dump(workhorse);  !flush capture buffer
		}
   		 L__M(##Prompt);
  	}
font on;
];

[TimePasses;
	WorldTime.offset(0,0,0,1);
	if (WorldTime.&temporal_coord-->0 > STARTYEAR ||
		 WorldTime.&temporal_coord-->1 > STARTDAY + 2)
	deadflag = 3;
];

[DeathMessage;
!deadflag 2 = you've won.
!
!1 - death of polyp due to HP decrease
!2 - game won 
!3-  death of polyp due to wilting 
!4-  collapse of universe
!5-  poisoned
 
switch (deadflag) {
	1:	print "You have perished!";
	2:  print	"Congratulations!  You have won.  The introduction.";
	3:	print "Wilted!";
	4:	print "Everyone is dead!.";
	5: 	print "Poisoned!";
}
];

!***** VERBS AND SUCH ************************************************

Include "Grammar";

Verb	 'stare' * 'at'/'into'/'over' noun -> Stare;
Verb    'what' 'who'
          * 'is'/'are' scope=TopicScope	-> WhatIs;
Verb    'where'
         * 'is'/'are' scope=TopicScope	-> WhereIs;

verb 'poke' = 'touch';
verb 'talk' 'chat'	
	* 'to'/'with' noun=entity 								-> TalkHelp
	* 'to'/'with' noun=entity 'about' scope=TopicScope 	-> Ask;

extend only 'speak'
	* 'to'/'with' noun=entity								-> TalkHelp;

verb	'greet' * noun=entity								-> Greet;
extend 'touch' * held 'to'/'with' noun 	-> TouchWith;

![TODO: see note above in Prop Class
!extend only 'drag' * noun noun=IsDirection	-> PushDir;

extend 'sit' replace 	* 				-> Bend
							* 'on' noun 	-> Bend
							* 'down'		-> Bend;
verb 'kneel' 'crouch' 'bend' = 'sit';
extend 'lie' replace 	* 				-> Bend
							* 'on' noun 	-> Bend
							* 'down'		-> Bend;
extend 'stand' replace 	*				-> StandUp
							* 'up'			-> StandUp;
verb 'smoke' * noun -> Smoke;
verb 'dance' * -> Dance;
verb	'scream' 'yell' 'cheer' 'bellow' 'howl'
	  	'roar' 'screech' 'shriek' 'holler' 'woot' * -> Yell;
verb 'evolve' * -> Evolve;
verb 'grow' * -> Grow;
verb 'ooze' * -> Ooze;

verb 'spray' * noun -> Spray
             * noun 'at'/'toward'/'towards'/'onto' noun -> Spray
	     * noun 'with' noun -> Spray;

verb 'pour' * held 'on'/'into'/'on to'/'over' noun -> Pour
            * 'out' held -> Pour;
verb 'barf' 'vomit' 'yack' 'hurl' 'chowder' 'puke' 'retch' 'upchuck' 'spew'
                                            * -> Barf
                                            * 'on'/'into' noun -> Barf
					    * noun -> Barf;
verb 'bite' * noun -> Bite
            * 'off' noun -> Gnaw;

verb 'lick' * noun -> Lick;
	  
verb 'drool' 'slaver' 'slather' 'salivate' 'spit' 'expectorate'
            * -> Drool
            * 'on'/'at'/'to'/'towards' noun -> Drool
	    * noun -> Drool
	    * noun HexNumberToken 'times' -> Drool;
verb 'identify' * noun -> Examine;
verb 'possess' * noun -> Possess;
verb 'dispossess' * noun -> Dispossess;
verb 'obliterate' 'annihilate' 'crush' 'harm' 'kick' 'bash' 'scratch' 
     'demolish' 'rip' 'tear' 'whack' 'slam' 'spike' = 'hit';
verb 'roll' 'somersault' 'saltate' = 'go';
verb 'flip' 'leap' = 'jump';
verb 'reason' * 'with' noun -> Reason;
extend 'attack' replace  * noun -> Attacking
                         * noun 'with'/'using' noun -> Attacking;
extend 'drink' replace * held -> Drinking;
verb 'pet' * noun -> Touch;
verb 'ls' = 'look';
verb 'crank' = 'turn';
verb 'wind' * 'up' noun -> Turn
			 * noun -> Turn;
extend 'eat' replace * noun -> Eating;
extend only 'drop' replace * held -> Drop
    * multiheld                                 -> Drop
    * multiexcept 'in'/'into'/'down' noun       -> Insert
    * multiexcept 'on'/'onto' noun              -> PutOn
    * held 'at'/'against'/'on'/'onto' noun      -> Throw;

extend 'throw' replace * held -> Throw
                       * held 'at'/'to'/'towards' noun -> Throw
	               * held noun -> Throw;

extend 'kiss' replace * noun -> Kiss;

verb 'gnaw' 'chew'
            * noun		-> Gnaw
            * 'off' noun	-> Gnaw;

verb 'knaw' * noun	 -> Knaw
            * 'off' noun -> Knaw;

verb 'puzzle' * 'bypass'	-> PuzzleBypass;

verb 'info' 'help' 'instructions' 'menu' 'rules' 'guide' 
      'assistance' 'hint' 'hints' * -> Help;

verb 'wield' * held  -> Wield;
verb 'unwield' * noun -> Unwield;
verb 'multiply' *  -> Multiply;
verb 'calculate' * 'pi' -> Calculate;

extend 'wait' last
		 * HexNumberToken 		scope=TimeScope	-> WaitTime		 
		 * 'for' HexNumberToken 	scope=TimeScope	-> WaitTime;

extend 'look' first
        *                                   	-> Look
        * 'up' scope=TopicScope 'in' noun   	-> Consult reverse
		 * 'in'/'behind' noun					-> Search;


extend 'consult' first
        * noun 'about' scope=TopicScope     -> Consult;
extend 'ask' first
        * creature 'about' scope=TopicScope -> Ask		
		 * creature scope=TopicScope		  -> Ask;	
extend 'tell' first
        * creature 'about' scope=TopicScope -> Tell;
extend 'answer' first
        * scope=TopicScope 'to' creature    -> Answer;
extend 'blow' first
	* held -> Blowing;

extend 'wave' first 
        * 'at'/'to'/'toward'/'towards' noun -> Waving;

extend 'give' first	* noun 'to' noun=entity			-> Give;
extend 'jump' replace	*									-> Jump
							* 'over'/'off'/'down' 			-> Jump
					  		* 'over'/'off'/'down' noun		-> Jump
							* 'through' noun					-> Enter;
extend 'drop' last 	* noun 'off'/'from' noun		-> Drop;

extend 'take' first 	* 'all' -> TakeAll;


!Replaced Library Functions

[KeyboardPrimitive b p k i line_len;
!Captures the keyboard input during "twisty" printing
  if(TxtEntry.twisting){
    k=0;
    i=2;
    b->1 = 0;
    p->1 = 0;
    line_len = 1;
    TxtEntry.next_twisty_line(TxtEntry.twisty_width);
    print ">";
    while (i < INPUT_BUFFER_LEN){
      @read_char 1 -> k;
      if(k == CARRIAGE_RETURN) break;
      if(k == 8 or 131 or 127) {  !yes, although 127 doesn't really exist
        new_line;
	("This space is too cramped to back up!^").print_to_array(workhorse);
        TxtEntry.align_twisty(workhorse,TxtEntry.twisty_width,false);
	TxtEntry.backup = true;
        rfalse;
      }
      if(k < SPACE || k > 122) continue;
      print (char) k;
      b->i = k;
      i++;line_len++;
      if(line_len == TxtEntry.twisty_width){
        line_len = 0;
	new_line;
	TxtEntry.next_twisty_line(TxtEntry.twisty_width);
      }
    }
    new_line;
    b->1 = i-2; !-two because it's at least one letter + CR
    @tokenise b p;
  }
  else
  read b p;
];

[ DrawStatusLine width chrono_pos;
  @split_window 1;
  @set_window 1;
  @set_cursor 1 1; 
  style reverse;
  width = 0->33; !fixed character screen width
  chrono_pos = width - 32;
  spaces(width); !blank line on top;
  @set_cursor 1 2;
  PrintShortName(location);
  @set_cursor 1 chrono_pos;
  print "y:37E12", (hex) WorldTime.&temporal_coord-->0,
       "  d:",(hex) WorldTime.&temporal_coord-->1,
       "  h:",(hex) WorldTime.&temporal_coord-->2,
       "  m:",(hex) WorldTime.&temporal_coord-->3;
	!the universe is around 15 billion [Earth] years old, somewhat above the
	!range of integers in the z-machine, so the $37E12 prefix is added
	!to the date
  @set_cursor  1 1;
  style roman;
  @set_window 0;
];
